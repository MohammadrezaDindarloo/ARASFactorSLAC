// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl0
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl0(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 500

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (159)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp3 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp5 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = _tmp2 * _tmp9;
  const Scalar _tmp11 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                        _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp12 = 2 * _tmp11 * _tmp4;
  const Scalar _tmp13 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp4 * _tmp9;
  const Scalar _tmp15 = 2 * _tmp2;
  const Scalar _tmp16 = _tmp11 * _tmp15;
  const Scalar _tmp17 = _tmp14 - _tmp16;
  const Scalar _tmp18 = -Scalar(0.010999999999999999) * _tmp17;
  const Scalar _tmp19 = -_tmp13 + _tmp18;
  const Scalar _tmp20 = _tmp19 + _tmp7;
  const Scalar _tmp21 = _tmp20 + position_vector(1, 0);
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp10 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = 1 - 2 * std::pow(_tmp8, Scalar(2));
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp26 = _tmp15 * _tmp4;
  const Scalar _tmp27 = _tmp11 * _tmp9;
  const Scalar _tmp28 = _tmp26 + _tmp27;
  const Scalar _tmp29 = -Scalar(0.010999999999999999) * _tmp28;
  const Scalar _tmp30 = -_tmp25 + _tmp29;
  const Scalar _tmp31 = _tmp23 + _tmp30;
  const Scalar _tmp32 = _tmp31 + position_vector(0, 0);
  const Scalar _tmp33 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp34 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp16;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 =
      -Scalar(0.010999999999999999) * _tmp24 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp37 = Scalar(0.20999999999999999) * _tmp26 - Scalar(0.20999999999999999) * _tmp27;
  const Scalar _tmp38 = _tmp36 - _tmp37;
  const Scalar _tmp39 = _tmp35 + _tmp38;
  const Scalar _tmp40 = _tmp34 + _tmp38;
  const Scalar _tmp41 = _tmp22 + _tmp30;
  const Scalar _tmp42 = _tmp41 + position_vector(0, 0);
  const Scalar _tmp43 = _tmp42 + Scalar(125.0);
  const Scalar _tmp44 = _tmp19 + _tmp6;
  const Scalar _tmp45 = _tmp44 + position_vector(1, 0);
  const Scalar _tmp46 = _tmp45 + Scalar(-110.0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp43, Scalar(2)) + std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp43 * _tmp47;
  const Scalar _tmp49 = _tmp36 + _tmp37;
  const Scalar _tmp50 = _tmp35 + _tmp49;
  const Scalar _tmp51 = _tmp48 * _tmp50;
  const Scalar _tmp52 = _tmp34 + _tmp49;
  const Scalar _tmp53 = _tmp13 + _tmp18;
  const Scalar _tmp54 = _tmp53 + _tmp6;
  const Scalar _tmp55 = _tmp54 + position_vector(1, 0);
  const Scalar _tmp56 = _tmp55 + Scalar(-110.0);
  const Scalar _tmp57 = _tmp25 + _tmp29;
  const Scalar _tmp58 = _tmp22 + _tmp57;
  const Scalar _tmp59 = _tmp58 + position_vector(0, 0);
  const Scalar _tmp60 = _tmp59 + Scalar(-125.0);
  const Scalar _tmp61 = std::pow(Scalar(std::pow(_tmp56, Scalar(2)) + std::pow(_tmp60, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp62 = _tmp60 * _tmp61;
  const Scalar _tmp63 = _tmp50 * _tmp62 - _tmp52 * _tmp62;
  const Scalar _tmp64 = _tmp46 * _tmp47;
  const Scalar _tmp65 = _tmp23 + _tmp57;
  const Scalar _tmp66 = _tmp65 + position_vector(0, 0);
  const Scalar _tmp67 = _tmp66 + Scalar(-125.0);
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp53 + _tmp7;
  const Scalar _tmp70 = _tmp69 + position_vector(1, 0);
  const Scalar _tmp71 = _tmp70 + Scalar(110.0);
  const Scalar _tmp72 = _tmp68 * _tmp71;
  const Scalar _tmp73 = _tmp48 * _tmp72 - _tmp64;
  const Scalar _tmp74 = _tmp56 * _tmp61;
  const Scalar _tmp75 = Scalar(1.0) / (_tmp62 * _tmp72 - _tmp74);
  const Scalar _tmp76 = _tmp73 * _tmp75;
  const Scalar _tmp77 = _tmp50 * _tmp72;
  const Scalar _tmp78 = _tmp52 * _tmp74 - _tmp62 * _tmp77;
  const Scalar _tmp79 = _tmp40 * _tmp64 - _tmp51 * _tmp72 - _tmp76 * _tmp78;
  const Scalar _tmp80 = Scalar(1.0) * _tmp69;
  const Scalar _tmp81 = -_tmp80;
  const Scalar _tmp82 = Scalar(1.0) / (_tmp54 + _tmp81);
  const Scalar _tmp83 = Scalar(1.0) * _tmp65;
  const Scalar _tmp84 = -_tmp58 + _tmp83;
  const Scalar _tmp85 = _tmp82 * _tmp84;
  const Scalar _tmp86 = -_tmp40 * _tmp48 + _tmp51 - _tmp63 * _tmp76 - _tmp79 * _tmp85;
  const Scalar _tmp87 = Scalar(1.0) / (_tmp86);
  const Scalar _tmp88 = _tmp72 * _tmp75;
  const Scalar _tmp89 = _tmp77 + _tmp78 * _tmp88;
  const Scalar _tmp90 = -_tmp50 + _tmp63 * _tmp88 - _tmp85 * _tmp89;
  const Scalar _tmp91 =
      std::sqrt(Scalar(std::pow(_tmp67, Scalar(2)) + std::pow(_tmp71, Scalar(2))));
  const Scalar _tmp92 = Scalar(1.0) / (_tmp91);
  const Scalar _tmp93 = _tmp68 * _tmp91;
  const Scalar _tmp94 = _tmp93 * (_tmp65 * _tmp71 * _tmp92 - _tmp67 * _tmp69 * _tmp92);
  const Scalar _tmp95 = _tmp54 * _tmp62 - _tmp58 * _tmp74 + _tmp62 * _tmp94;
  const Scalar _tmp96 = -_tmp41 * _tmp64 + _tmp44 * _tmp48 + _tmp48 * _tmp94 - _tmp76 * _tmp95;
  const Scalar _tmp97 = _tmp87 * _tmp96;
  const Scalar _tmp98 = Scalar(1.0) / (_tmp96);
  const Scalar _tmp99 = _tmp86 * _tmp98;
  const Scalar _tmp100 = _tmp99 * (_tmp88 * _tmp95 - _tmp90 * _tmp97 - _tmp94);
  const Scalar _tmp101 = _tmp87 * (_tmp100 + _tmp90);
  const Scalar _tmp102 = -_tmp101 * _tmp73 - _tmp72;
  const Scalar _tmp103 = _tmp62 * _tmp75;
  const Scalar _tmp104 = _tmp32 + Scalar(125.0);
  const Scalar _tmp105 = _tmp21 + Scalar(110.0);
  const Scalar _tmp106 =
      std::pow(Scalar(std::pow(_tmp104, Scalar(2)) + std::pow(_tmp105, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp107 = _tmp104 * _tmp106;
  const Scalar _tmp108 = _tmp107 * fh1;
  const Scalar _tmp109 = Scalar(1.0) * _tmp98;
  const Scalar _tmp110 = _tmp62 * _tmp76;
  const Scalar _tmp111 = _tmp105 * _tmp106;
  const Scalar _tmp112 = fh1 * (-_tmp107 * _tmp20 + _tmp111 * _tmp31);
  const Scalar _tmp113 = Scalar(1.0) * _tmp75;
  const Scalar _tmp114 = Scalar(1.0) * _tmp82;
  const Scalar _tmp115 = -_tmp113 * _tmp63 + _tmp114 * _tmp75 * _tmp78 * _tmp84;
  const Scalar _tmp116 = _tmp99 * (-_tmp113 * _tmp95 - _tmp115 * _tmp97);
  const Scalar _tmp117 = _tmp115 + _tmp116;
  const Scalar _tmp118 = _tmp117 * _tmp87;
  const Scalar _tmp119 = -_tmp118 * _tmp73 + Scalar(1.0);
  const Scalar _tmp120 = _tmp111 * fh1;
  const Scalar _tmp121 = Scalar(19.620000000000001) - fv1;
  const Scalar _tmp122 = _tmp80 * _tmp85 + _tmp83;
  const Scalar _tmp123 = 0;
  const Scalar _tmp124 = _tmp123 * _tmp87;
  const Scalar _tmp125 = -_tmp108 * _tmp93 * (_tmp101 * _tmp48 + _tmp102 * _tmp103 + Scalar(1.0)) -
                         _tmp112 * _tmp93 * (-_tmp109 * _tmp110 + _tmp109 * _tmp48) -
                         _tmp120 * _tmp93 * (_tmp103 * _tmp119 + _tmp118 * _tmp48) -
                         _tmp121 * _tmp93 * (-_tmp110 * _tmp124 + _tmp124 * _tmp48);
  const Scalar _tmp126 = Scalar(1.0) / (_tmp125);
  const Scalar _tmp127 = _tmp44 + _tmp81;
  const Scalar _tmp128 = _tmp127 * _tmp85;
  const Scalar _tmp129 = Scalar(1.0) / (-_tmp128 - _tmp41 + _tmp83);
  const Scalar _tmp130 = Scalar(1.0) * _tmp129;
  const Scalar _tmp131 = _tmp128 * _tmp130 + Scalar(1.0);
  const Scalar _tmp132 = _tmp130 * _tmp85;
  const Scalar _tmp133 = _tmp39 * fh1;
  const Scalar _tmp134 = -_tmp111 * _tmp133 - Scalar(2.3544) * _tmp17 - _tmp20 * fv1;
  const Scalar _tmp135 = _tmp107 * _tmp133 + Scalar(2.3544) * _tmp28 + _tmp31 * fv1;
  const Scalar _tmp136 = _tmp127 * _tmp82;
  const Scalar _tmp137 = _tmp130 * _tmp99;
  const Scalar _tmp138 = -_tmp109 * _tmp79 + _tmp127 * _tmp137;
  const Scalar _tmp139 = _tmp127 * _tmp129;
  const Scalar _tmp140 = _tmp79 * _tmp87;
  const Scalar _tmp141 = -_tmp113 * _tmp78 + _tmp116 * _tmp139 - _tmp117 * _tmp140;
  const Scalar _tmp142 = _tmp100 * _tmp139 - _tmp101 * _tmp79 + _tmp89;
  const Scalar _tmp143 = _tmp122 * _tmp129;
  const Scalar _tmp144 = -_tmp123 * _tmp140 - _tmp127 * _tmp143 + _tmp81;
  const Scalar _tmp145 = std::asinh(
      _tmp126 * (Scalar(1.0) * _tmp108 * (_tmp100 * _tmp130 - _tmp114 * _tmp142) +
                 Scalar(1.0) * _tmp112 * (-_tmp114 * _tmp138 + _tmp137) +
                 Scalar(1.0) * _tmp120 * (-_tmp114 * _tmp141 + _tmp116 * _tmp130) +
                 Scalar(1.0) * _tmp121 * (-_tmp114 * _tmp144 - _tmp122 * _tmp130 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp134 * (-_tmp114 * _tmp131 + _tmp132) +
                 Scalar(1.0) * _tmp135 * (_tmp130 * _tmp136 - _tmp130)));
  const Scalar _tmp146 = Scalar(9.6622558468725703) * _tmp125;
  const Scalar _tmp147 = _tmp130 * _tmp135;
  const Scalar _tmp148 = _tmp82 * fh1;
  const Scalar _tmp149 = _tmp109 * _tmp112;
  const Scalar _tmp150 = _tmp121 * _tmp124;
  const Scalar _tmp151 =
      _tmp102 * _tmp108 * _tmp75 + _tmp119 * _tmp120 * _tmp75 - _tmp149 * _tmp76 - _tmp150 * _tmp76;
  const Scalar _tmp152 = Scalar(1.0) / (_tmp151);
  const Scalar _tmp153 =
      std::asinh(_tmp152 * (_tmp107 * _tmp142 * _tmp148 + _tmp111 * _tmp141 * _tmp148 +
                            _tmp112 * _tmp138 * _tmp82 + _tmp121 * _tmp144 * _tmp82 +
                            _tmp131 * _tmp134 * _tmp82 - _tmp136 * _tmp147));
  const Scalar _tmp154 = Scalar(9.6622558468725703) * _tmp151;
  const Scalar _tmp155 = _tmp101 * _tmp108 + _tmp118 * _tmp120 + _tmp149 + _tmp150;
  const Scalar _tmp156 = Scalar(1.0) / (_tmp155);
  const Scalar _tmp157 = std::asinh(_tmp156 * (-_tmp100 * _tmp108 * _tmp129 - _tmp112 * _tmp137 -
                                               _tmp116 * _tmp120 * _tmp129 + _tmp121 * _tmp143 -
                                               _tmp132 * _tmp134 + _tmp147));
  const Scalar _tmp158 = Scalar(9.6622558468725703) * _tmp155;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp33 *
          (Scalar(4.967784) * _tmp0 + std::cosh(Scalar(1.0) * _tmp1) -
           std::cosh(Scalar(0.1034955) * _tmp0 *
                     (-_tmp1 * _tmp33 -
                      Scalar(125.0) *
                          std::sqrt(Scalar(
                              Scalar(0.77439999999999998) *
                                  std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp21 - 1),
                                           Scalar(2)) +
                              std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp32 - 1),
                                       Scalar(2))))))) +
      _tmp39 + position_vector(2, 0);
  _res(1, 0) =
      -_tmp146 *
          (Scalar(4.967784) * _tmp126 + std::cosh(Scalar(1.0) * _tmp145) -
           std::cosh(
               Scalar(0.1034955) * _tmp126 *
               (-_tmp145 * _tmp146 -
                Scalar(125.0) *
                    std::sqrt(Scalar(
                        std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp66), Scalar(2)) +
                        Scalar(0.77439999999999998) *
                            std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp70 - 1),
                                     Scalar(2))))))) +
      _tmp50 + position_vector(2, 0);
  _res(2, 0) =
      -_tmp154 *
          (Scalar(4.967784) * _tmp152 + std::cosh(Scalar(1.0) * _tmp153) -
           std::cosh(
               Scalar(0.1034955) * _tmp152 *
               (-_tmp153 * _tmp154 -
                Scalar(125.0) * std::sqrt(Scalar(
                                    Scalar(0.77439999999999998) *
                                        std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp55),
                                                 Scalar(2)) +
                                    std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp59),
                                             Scalar(2))))))) +
      _tmp52 + position_vector(2, 0);
  _res(3, 0) =
      -_tmp158 *
          (Scalar(4.967784) * _tmp156 + std::cosh(Scalar(1.0) * _tmp157) -
           std::cosh(
               Scalar(0.1034955) * _tmp156 *
               (-_tmp157 * _tmp158 -
                Scalar(125.0) * std::sqrt(Scalar(
                                    Scalar(0.77439999999999998) *
                                        std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp45),
                                                 Scalar(2)) +
                                    std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp42 - 1),
                                             Scalar(2))))))) +
      _tmp40 + position_vector(2, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
