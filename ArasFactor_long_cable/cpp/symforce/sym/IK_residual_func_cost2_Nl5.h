// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost2_Nl5
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost2Nl5(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 523

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (159)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp1 * _tmp8;
  const Scalar _tmp10 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                        _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp11 = 2 * _tmp10 * _tmp3;
  const Scalar _tmp12 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp13 = _tmp3 * _tmp8;
  const Scalar _tmp14 = 2 * _tmp1;
  const Scalar _tmp15 = _tmp10 * _tmp14;
  const Scalar _tmp16 = _tmp13 - _tmp15;
  const Scalar _tmp17 = -Scalar(0.010999999999999999) * _tmp16;
  const Scalar _tmp18 = -_tmp12 + _tmp17;
  const Scalar _tmp19 = _tmp18 + _tmp6;
  const Scalar _tmp20 = _tmp19 + position_vector(1, 0);
  const Scalar _tmp21 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = _tmp14 * _tmp3;
  const Scalar _tmp25 = _tmp10 * _tmp8;
  const Scalar _tmp26 = _tmp24 + _tmp25;
  const Scalar _tmp27 = -Scalar(0.010999999999999999) * _tmp26;
  const Scalar _tmp28 = -Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp29 = _tmp27 - _tmp28;
  const Scalar _tmp30 = _tmp23 + _tmp29;
  const Scalar _tmp31 = _tmp30 + position_vector(0, 0);
  const Scalar _tmp32 =
      Scalar(12100.0) * std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp20 - 1), Scalar(2)) +
      Scalar(15625.0) * std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp31 - 1), Scalar(2));
  const Scalar _tmp33 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp34 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp24 - Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp36 = -_tmp35;
  const Scalar _tmp37 =
      -Scalar(0.010999999999999999) * _tmp2 - Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp38 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp39 = _tmp37 - _tmp38;
  const Scalar _tmp40 = _tmp36 + _tmp39;
  const Scalar _tmp41 = _tmp12 + _tmp17;
  const Scalar _tmp42 = _tmp41 + _tmp6;
  const Scalar _tmp43 = _tmp42 + position_vector(1, 0);
  const Scalar _tmp44 = _tmp43 + Scalar(110.0);
  const Scalar _tmp45 = _tmp22 + _tmp29;
  const Scalar _tmp46 = _tmp45 + position_vector(0, 0);
  const Scalar _tmp47 = _tmp46 + Scalar(-125.0);
  const Scalar _tmp48 = std::pow(Scalar(std::pow(_tmp44, Scalar(2)) + std::pow(_tmp47, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp49 = _tmp47 * _tmp48;
  const Scalar _tmp50 = _tmp18 + _tmp5;
  const Scalar _tmp51 = _tmp50 + position_vector(1, 0);
  const Scalar _tmp52 = _tmp51 + Scalar(-110.0);
  const Scalar _tmp53 = _tmp27 + _tmp28;
  const Scalar _tmp54 = _tmp23 + _tmp53;
  const Scalar _tmp55 = _tmp54 + position_vector(0, 0);
  const Scalar _tmp56 = _tmp55 + Scalar(125.0);
  const Scalar _tmp57 =
      std::sqrt(Scalar(std::pow(_tmp52, Scalar(2)) + std::pow(_tmp56, Scalar(2))));
  const Scalar _tmp58 = Scalar(1.0) / (_tmp57);
  const Scalar _tmp59 = Scalar(1.0) / (_tmp56);
  const Scalar _tmp60 = _tmp57 * _tmp59;
  const Scalar _tmp61 = _tmp60 * (-_tmp50 * _tmp56 * _tmp58 + _tmp52 * _tmp54 * _tmp58);
  const Scalar _tmp62 = _tmp44 * _tmp48;
  const Scalar _tmp63 = _tmp41 + _tmp5;
  const Scalar _tmp64 = _tmp63 + position_vector(1, 0);
  const Scalar _tmp65 = _tmp64 + Scalar(-110.0);
  const Scalar _tmp66 = _tmp22 + _tmp53;
  const Scalar _tmp67 = _tmp66 + position_vector(0, 0);
  const Scalar _tmp68 = _tmp67 + Scalar(-125.0);
  const Scalar _tmp69 = std::pow(Scalar(std::pow(_tmp65, Scalar(2)) + std::pow(_tmp68, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp70 = _tmp68 * _tmp69;
  const Scalar _tmp71 = _tmp65 * _tmp69;
  const Scalar _tmp72 = _tmp61 * _tmp70 + _tmp63 * _tmp70 - _tmp66 * _tmp71;
  const Scalar _tmp73 = _tmp52 * _tmp59;
  const Scalar _tmp74 = _tmp49 * _tmp73 - _tmp62;
  const Scalar _tmp75 = Scalar(1.0) / (_tmp70 * _tmp73 - _tmp71);
  const Scalar _tmp76 = _tmp74 * _tmp75;
  const Scalar _tmp77 = _tmp42 * _tmp49 - _tmp45 * _tmp62 + _tmp49 * _tmp61 - _tmp72 * _tmp76;
  const Scalar _tmp78 = Scalar(1.0) / (_tmp77);
  const Scalar _tmp79 = Scalar(1.0) * _tmp78;
  const Scalar _tmp80 = _tmp70 * _tmp76;
  const Scalar _tmp81 = _tmp20 + Scalar(110.0);
  const Scalar _tmp82 = _tmp31 + Scalar(125.0);
  const Scalar _tmp83 = std::pow(Scalar(std::pow(_tmp81, Scalar(2)) + std::pow(_tmp82, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp84 = _tmp81 * _tmp83;
  const Scalar _tmp85 = _tmp82 * _tmp83;
  const Scalar _tmp86 = fh1 * (-_tmp19 * _tmp85 + _tmp30 * _tmp84);
  const Scalar _tmp87 = Scalar(19.620000000000001) - fv1;
  const Scalar _tmp88 = _tmp35 + _tmp39;
  const Scalar _tmp89 = _tmp37 + _tmp38;
  const Scalar _tmp90 = _tmp36 + _tmp89;
  const Scalar _tmp91 = _tmp49 * _tmp90;
  const Scalar _tmp92 = _tmp70 * _tmp90;
  const Scalar _tmp93 = _tmp35 + _tmp89;
  const Scalar _tmp94 = _tmp71 * _tmp93 - _tmp73 * _tmp92;
  const Scalar _tmp95 = _tmp62 * _tmp88 - _tmp73 * _tmp91 - _tmp76 * _tmp94;
  const Scalar _tmp96 = Scalar(1.0) * _tmp50;
  const Scalar _tmp97 = -_tmp96;
  const Scalar _tmp98 = Scalar(1.0) / (_tmp63 + _tmp97);
  const Scalar _tmp99 = Scalar(1.0) * _tmp54;
  const Scalar _tmp100 = _tmp98 * (-_tmp66 + _tmp99);
  const Scalar _tmp101 = -_tmp70 * _tmp93 + _tmp92;
  const Scalar _tmp102 = -_tmp100 * _tmp95 - _tmp101 * _tmp76 - _tmp49 * _tmp88 + _tmp91;
  const Scalar _tmp103 = Scalar(1.0) / (_tmp102);
  const Scalar _tmp104 = _tmp100 * _tmp96 + _tmp99;
  const Scalar _tmp105 = 0;
  const Scalar _tmp106 = _tmp73 * _tmp75;
  const Scalar _tmp107 = _tmp106 * _tmp94 + _tmp73 * _tmp90;
  const Scalar _tmp108 = -_tmp100 * _tmp107 + _tmp101 * _tmp106 - _tmp90;
  const Scalar _tmp109 = _tmp103 * _tmp77;
  const Scalar _tmp110 = _tmp102 * _tmp78;
  const Scalar _tmp111 = _tmp110 * (_tmp106 * _tmp72 - _tmp108 * _tmp109 - _tmp61);
  const Scalar _tmp112 = _tmp103 * (_tmp108 + _tmp111);
  const Scalar _tmp113 = -_tmp112 * _tmp74 - _tmp73;
  const Scalar _tmp114 = _tmp70 * _tmp75;
  const Scalar _tmp115 = _tmp85 * fh1;
  const Scalar _tmp116 = Scalar(1.0) * _tmp75;
  const Scalar _tmp117 = _tmp116 * _tmp94;
  const Scalar _tmp118 = _tmp100 * _tmp117 - _tmp101 * _tmp116;
  const Scalar _tmp119 = _tmp110 * (-_tmp109 * _tmp118 - _tmp116 * _tmp72);
  const Scalar _tmp120 = _tmp103 * (_tmp118 + _tmp119);
  const Scalar _tmp121 = -_tmp120 * _tmp74 + Scalar(1.0);
  const Scalar _tmp122 = _tmp84 * fh1;
  const Scalar _tmp123 = -_tmp115 * _tmp60 * (_tmp112 * _tmp49 + _tmp113 * _tmp114 + Scalar(1.0)) -
                         _tmp122 * _tmp60 * (_tmp114 * _tmp121 + _tmp120 * _tmp49) -
                         _tmp60 * _tmp86 * (_tmp49 * _tmp79 - _tmp79 * _tmp80) -
                         _tmp60 * _tmp87 * (_tmp105 * _tmp49 - _tmp105 * _tmp80);
  const Scalar _tmp124 = Scalar(1.0) / (_tmp123);
  const Scalar _tmp125 = _tmp42 + _tmp97;
  const Scalar _tmp126 = _tmp100 * _tmp125;
  const Scalar _tmp127 = Scalar(1.0) / (-_tmp126 - _tmp45 + _tmp99);
  const Scalar _tmp128 = Scalar(1.0) * _tmp127;
  const Scalar _tmp129 = _tmp104 * _tmp127;
  const Scalar _tmp130 = -_tmp105 * _tmp95 - _tmp125 * _tmp129 + _tmp97;
  const Scalar _tmp131 = Scalar(1.0) * _tmp98;
  const Scalar _tmp132 = _tmp125 * _tmp127;
  const Scalar _tmp133 = -_tmp117 + _tmp119 * _tmp132 - _tmp120 * _tmp95;
  const Scalar _tmp134 = _tmp126 * _tmp128 + Scalar(1.0);
  const Scalar _tmp135 = _tmp100 * _tmp128;
  const Scalar _tmp136 = _tmp40 * fh1;
  const Scalar _tmp137 = -_tmp136 * _tmp84 - Scalar(2.3544) * _tmp16 - _tmp19 * fv1;
  const Scalar _tmp138 = _tmp136 * _tmp85 + Scalar(2.3544) * _tmp26 + _tmp30 * fv1;
  const Scalar _tmp139 = _tmp125 * _tmp98;
  const Scalar _tmp140 = _tmp110 * _tmp128;
  const Scalar _tmp141 = _tmp125 * _tmp140 - _tmp79 * _tmp95;
  const Scalar _tmp142 = _tmp107 + _tmp111 * _tmp132 - _tmp112 * _tmp95;
  const Scalar _tmp143 = std::asinh(
      _tmp124 * (Scalar(1.0) * _tmp115 * (_tmp111 * _tmp128 - _tmp131 * _tmp142) +
                 Scalar(1.0) * _tmp122 * (_tmp119 * _tmp128 - _tmp131 * _tmp133) +
                 Scalar(1.0) * _tmp137 * (-_tmp131 * _tmp134 + _tmp135) +
                 Scalar(1.0) * _tmp138 * (_tmp128 * _tmp139 - _tmp128) +
                 Scalar(1.0) * _tmp86 * (-_tmp131 * _tmp141 + _tmp140) +
                 Scalar(1.0) * _tmp87 * (-_tmp104 * _tmp128 - _tmp130 * _tmp131 + Scalar(1.0))));
  const Scalar _tmp144 =
      Scalar(12100.0) * std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp51), Scalar(2)) +
      Scalar(15625.0) * std::pow(Scalar(-Scalar(0.0080000000000000002) * _tmp55 - 1), Scalar(2));
  const Scalar _tmp145 = Scalar(9.6622558468725703) * _tmp123;
  const Scalar _tmp146 =
      Scalar(12100.0) * std::pow(Scalar(1 - Scalar(0.0090909090909090905) * _tmp64), Scalar(2)) +
      Scalar(15625.0) * std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp67), Scalar(2));
  const Scalar _tmp147 = _tmp79 * _tmp86;
  const Scalar _tmp148 = _tmp105 * _tmp87;
  const Scalar _tmp149 =
      _tmp113 * _tmp115 * _tmp75 + _tmp121 * _tmp122 * _tmp75 - _tmp147 * _tmp76 - _tmp148 * _tmp76;
  const Scalar _tmp150 = Scalar(1.0) / (_tmp149);
  const Scalar _tmp151 = _tmp128 * _tmp138;
  const Scalar _tmp152 =
      std::asinh(_tmp150 * (_tmp115 * _tmp142 * _tmp98 + _tmp122 * _tmp133 * _tmp98 +
                            _tmp130 * _tmp87 * _tmp98 + _tmp134 * _tmp137 * _tmp98 -
                            _tmp139 * _tmp151 + _tmp141 * _tmp86 * _tmp98));
  const Scalar _tmp153 = Scalar(9.6622558468725703) * _tmp149;
  const Scalar _tmp154 = _tmp112 * _tmp115 + _tmp120 * _tmp122 + _tmp147 + _tmp148;
  const Scalar _tmp155 = Scalar(1.0) / (_tmp154);
  const Scalar _tmp156 =
      std::asinh(_tmp155 * (-_tmp111 * _tmp115 * _tmp127 - _tmp119 * _tmp122 * _tmp127 +
                            _tmp129 * _tmp87 - _tmp135 * _tmp137 - _tmp140 * _tmp86 + _tmp151));
  const Scalar _tmp157 = Scalar(9.6622558468725703) * _tmp154;
  const Scalar _tmp158 =
      Scalar(15625.0) * std::pow(Scalar(1 - Scalar(0.0080000000000000002) * _tmp46), Scalar(2)) +
      Scalar(12100.0) * std::pow(Scalar(-Scalar(0.0090909090909090905) * _tmp43 - 1), Scalar(2));

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp34 * (-std::sinh(Scalar(1.0) * _tmp33) -
                std::sinh(Scalar(0.1034955) * _tmp0 * (-std::sqrt(_tmp32) - _tmp33 * _tmp34))) -
      Scalar(48.0) * std::sqrt(Scalar(
                         Scalar(0.00043402777777777775) * _tmp32 +
                         std::pow(Scalar(-Scalar(0.020833333333333332) * _tmp40 -
                                         Scalar(0.020833333333333332) * position_vector(2, 0) + 1),
                                  Scalar(2))));
  _res(1, 0) =
      _tmp145 *
          (-std::sinh(Scalar(1.0) * _tmp143) -
           std::sinh(Scalar(0.1034955) * _tmp124 * (-_tmp143 * _tmp145 - std::sqrt(_tmp144)))) -
      Scalar(48.0) * std::sqrt(Scalar(
                         Scalar(0.00043402777777777775) * _tmp144 +
                         std::pow(Scalar(-Scalar(0.020833333333333332) * _tmp90 -
                                         Scalar(0.020833333333333332) * position_vector(2, 0) + 1),
                                  Scalar(2))));
  _res(2, 0) =
      _tmp153 *
          (-std::sinh(Scalar(1.0) * _tmp152) -
           std::sinh(Scalar(0.1034955) * _tmp150 * (-std::sqrt(_tmp146) - _tmp152 * _tmp153))) -
      Scalar(48.0) * std::sqrt(Scalar(
                         Scalar(0.00043402777777777775) * _tmp146 +
                         std::pow(Scalar(-Scalar(0.020833333333333332) * _tmp93 -
                                         Scalar(0.020833333333333332) * position_vector(2, 0) + 1),
                                  Scalar(2))));
  _res(3, 0) =
      _tmp157 *
          (-std::sinh(Scalar(1.0) * _tmp156) -
           std::sinh(Scalar(0.1034955) * _tmp155 * (-_tmp156 * _tmp157 - std::sqrt(_tmp158)))) -
      Scalar(48.0) * std::sqrt(Scalar(
                         Scalar(0.00043402777777777775) * _tmp158 +
                         std::pow(Scalar(-Scalar(0.020833333333333332) * _tmp88 -
                                         Scalar(0.020833333333333332) * position_vector(2, 0) + 1),
                                  Scalar(2))));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
