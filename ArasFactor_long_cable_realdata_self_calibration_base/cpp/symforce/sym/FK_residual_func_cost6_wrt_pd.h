// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost6_wrt_pd
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     TransformationMatrix: Pose3
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix23
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 3> FkResidualFuncCost6WrtPd(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const sym::Pose3<Scalar>& TransformationMatrix, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const Scalar epsilon) {
  // Total ops: 591

  // Unused inputs
  (void)fh1;
  (void)fv1;
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _TransformationMatrix = TransformationMatrix.Data();

  // Intermediate terms (205)
  const Scalar _tmp0 =
      _DeltaRot[0] * _TransformationMatrix[2] + _DeltaRot[1] * _TransformationMatrix[3] -
      _DeltaRot[2] * _TransformationMatrix[0] + _DeltaRot[3] * _TransformationMatrix[1];
  const Scalar _tmp1 =
      _DeltaRot[0] * _TransformationMatrix[3] - _DeltaRot[1] * _TransformationMatrix[2] +
      _DeltaRot[2] * _TransformationMatrix[1] + _DeltaRot[3] * _TransformationMatrix[0];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 =
      -_DeltaRot[0] * _TransformationMatrix[1] + _DeltaRot[1] * _TransformationMatrix[0] +
      _DeltaRot[2] * _TransformationMatrix[3] + _DeltaRot[3] * _TransformationMatrix[2];
  const Scalar _tmp5 =
      -2 * _DeltaRot[0] * _TransformationMatrix[0] - 2 * _DeltaRot[1] * _TransformationMatrix[1] -
      2 * _DeltaRot[2] * _TransformationMatrix[2] + 2 * _DeltaRot[3] * _TransformationMatrix[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp10 = _tmp1 * _tmp5;
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = -Scalar(0.010999999999999999) * _tmp11;
  const Scalar _tmp13 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp14 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp15 = Scalar(0.20999999999999999) * _tmp13 +
                        Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999);
  const Scalar _tmp16 = _tmp12 + _tmp15;
  const Scalar _tmp17 = _tmp16 + _tmp8;
  const Scalar _tmp18 = _TransformationMatrix[5] + _tmp17 - p_d(1, 0);
  const Scalar _tmp19 = std::pow(_tmp18, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp21 = 1 - 2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp22 =
      -Scalar(0.010999999999999999) * _tmp13 - Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp23 = _tmp2 * _tmp4;
  const Scalar _tmp24 = _tmp0 * _tmp5;
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp23 - Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp26 = _tmp22 - _tmp25;
  const Scalar _tmp27 = _tmp20 + _tmp26;
  const Scalar _tmp28 = _TransformationMatrix[6] + _tmp27 - p_d(2, 0);
  const Scalar _tmp29 = std::pow(_tmp28, Scalar(2));
  const Scalar _tmp30 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp31 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp32 =
      -Scalar(0.010999999999999999) * _tmp23 - Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp33 = -_tmp31 + _tmp32;
  const Scalar _tmp34 = _tmp30 + _tmp33;
  const Scalar _tmp35 = _TransformationMatrix[4] + _tmp34 - p_d(0, 0);
  const Scalar _tmp36 = std::pow(_tmp35, Scalar(2));
  const Scalar _tmp37 = _tmp19 + _tmp29 + _tmp36;
  const Scalar _tmp38 = std::pow(_tmp37, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp39 = _tmp18 * _tmp38;
  const Scalar _tmp40 = -_tmp20;
  const Scalar _tmp41 = _tmp26 + _tmp40;
  const Scalar _tmp42 = _TransformationMatrix[6] + _tmp41 - p_a(2, 0);
  const Scalar _tmp43 = -_tmp30;
  const Scalar _tmp44 = _tmp33 + _tmp43;
  const Scalar _tmp45 = _TransformationMatrix[4] + _tmp44 - p_a(0, 0);
  const Scalar _tmp46 = Scalar(1.0) / (_tmp45);
  const Scalar _tmp47 = _tmp38 * _tmp46;
  const Scalar _tmp48 = _tmp42 * _tmp47;
  const Scalar _tmp49 = _tmp28 * _tmp38;
  const Scalar _tmp50 = _tmp12 - _tmp15;
  const Scalar _tmp51 = _tmp50 + _tmp8;
  const Scalar _tmp52 = _TransformationMatrix[5] + _tmp51 - p_a(1, 0);
  const Scalar _tmp53 = _tmp47 * _tmp52;
  const Scalar _tmp54 = -_tmp35 * _tmp53 + _tmp39;
  const Scalar _tmp55 = _tmp50 + _tmp7;
  const Scalar _tmp56 = _TransformationMatrix[5] + _tmp55 - p_b(1, 0);
  const Scalar _tmp57 = _tmp22 + _tmp25;
  const Scalar _tmp58 = _tmp40 + _tmp57;
  const Scalar _tmp59 = _TransformationMatrix[6] + _tmp58 - p_b(2, 0);
  const Scalar _tmp60 = _tmp31 + _tmp32;
  const Scalar _tmp61 = _tmp43 + _tmp60;
  const Scalar _tmp62 = _TransformationMatrix[4] + _tmp61 - p_b(0, 0);
  const Scalar _tmp63 = std::pow(Scalar(std::pow(_tmp56, Scalar(2)) + std::pow(_tmp59, Scalar(2)) +
                                        std::pow(_tmp62, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp64 = _tmp62 * _tmp63;
  const Scalar _tmp65 = _tmp46 * _tmp52;
  const Scalar _tmp66 = _tmp56 * _tmp63;
  const Scalar _tmp67 = Scalar(1.0) / (-_tmp64 * _tmp65 + _tmp66);
  const Scalar _tmp68 = _tmp42 * _tmp46;
  const Scalar _tmp69 = _tmp59 * _tmp63;
  const Scalar _tmp70 = _tmp67 * (-_tmp64 * _tmp68 + _tmp69);
  const Scalar _tmp71 = -_tmp35 * _tmp48 + _tmp49 - _tmp54 * _tmp70;
  const Scalar _tmp72 = _tmp20 + _tmp57;
  const Scalar _tmp73 = _TransformationMatrix[6] + _tmp72 - p_c(2, 0);
  const Scalar _tmp74 = _tmp30 + _tmp60;
  const Scalar _tmp75 = _TransformationMatrix[4] + _tmp74 - p_c(0, 0);
  const Scalar _tmp76 = _tmp16 + _tmp7;
  const Scalar _tmp77 = _TransformationMatrix[5] + _tmp76 - p_c(1, 0);
  const Scalar _tmp78 = std::pow(Scalar(std::pow(_tmp73, Scalar(2)) + std::pow(_tmp75, Scalar(2)) +
                                        std::pow(_tmp77, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp79 = _tmp73 * _tmp78;
  const Scalar _tmp80 = _tmp75 * _tmp78;
  const Scalar _tmp81 = _tmp77 * _tmp78;
  const Scalar _tmp82 = -_tmp65 * _tmp80 + _tmp81;
  const Scalar _tmp83 = Scalar(1.0) / (-_tmp68 * _tmp80 - _tmp70 * _tmp82 + _tmp79);
  const Scalar _tmp84 = std::sqrt(Scalar(std::pow(_tmp42, Scalar(2)) + std::pow(_tmp45, Scalar(2)) +
                                         std::pow(_tmp52, Scalar(2))));
  const Scalar _tmp85 = Scalar(1.0) / (_tmp84);
  const Scalar _tmp86 = _tmp42 * _tmp85;
  const Scalar _tmp87 = _tmp52 * _tmp85;
  const Scalar _tmp88 = -_tmp41 * _tmp87 + _tmp51 * _tmp86;
  const Scalar _tmp89 = _tmp46 * _tmp84;
  const Scalar _tmp90 = _tmp88 * _tmp89;
  const Scalar _tmp91 = _tmp67 * (_tmp55 * _tmp69 - _tmp58 * _tmp66 - _tmp64 * _tmp90);
  const Scalar _tmp92 =
      _tmp83 * (-_tmp72 * _tmp81 + _tmp76 * _tmp79 - _tmp80 * _tmp90 - _tmp82 * _tmp91);
  const Scalar _tmp93 = _tmp71 * _tmp92;
  const Scalar _tmp94 = _tmp47 * _tmp84 * _tmp88;
  const Scalar _tmp95 = _tmp17 * _tmp38;
  const Scalar _tmp96 =
      -_tmp27 * _tmp39 + _tmp28 * _tmp95 - _tmp35 * _tmp94 - _tmp54 * _tmp91 - _tmp93;
  const Scalar _tmp97 = Scalar(1.0) / (_tmp96);
  const Scalar _tmp98 = _tmp38 * _tmp97;
  const Scalar _tmp99 = std::pow(_tmp37, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp100 = _tmp36 * _tmp99;
  const Scalar _tmp101 = _tmp18 * _tmp35 * _tmp99;
  const Scalar _tmp102 = -_tmp100 * _tmp65 + _tmp101 + _tmp53;
  const Scalar _tmp103 = _tmp101 * _tmp27;
  const Scalar _tmp104 = _tmp28 * _tmp99;
  const Scalar _tmp105 = _tmp104 * _tmp35;
  const Scalar _tmp106 = _tmp105 * _tmp17;
  const Scalar _tmp107 = -_tmp100 * _tmp68 - _tmp102 * _tmp70 + _tmp105 + _tmp48;
  const Scalar _tmp108 = _tmp107 * _tmp92;
  const Scalar _tmp109 =
      -_tmp100 * _tmp90 - _tmp102 * _tmp91 - _tmp103 + _tmp106 - _tmp108 + _tmp94;
  const Scalar _tmp110 = std::pow(_tmp96, Scalar(-2));
  const Scalar _tmp111 = _tmp35 * _tmp38;
  const Scalar _tmp112 = _tmp110 * _tmp111;
  const Scalar _tmp113 = _tmp109 * _tmp112;
  const Scalar _tmp114 = _tmp110 * _tmp93;
  const Scalar _tmp115 = _tmp108 * _tmp97 - _tmp109 * _tmp114;
  const Scalar _tmp116 = _tmp80 * _tmp83;
  const Scalar _tmp117 = _tmp82 * _tmp83;
  const Scalar _tmp118 = _tmp110 * _tmp54;
  const Scalar _tmp119 = _tmp109 * _tmp118;
  const Scalar _tmp120 = _tmp102 * _tmp97;
  const Scalar _tmp121 = -_tmp115 * _tmp117 - _tmp119 * _tmp92 + _tmp120 * _tmp92;
  const Scalar _tmp122 = _tmp64 * _tmp67;
  const Scalar _tmp123 = _tmp100 * _tmp97;
  const Scalar _tmp124 = -_tmp113 * _tmp92 - _tmp115 * _tmp116 - _tmp121 * _tmp122 +
                         _tmp123 * _tmp92 - _tmp92 * _tmp98;
  const Scalar _tmp125 = _tmp45 * _tmp85;
  const Scalar _tmp126 = _tmp125 * _tmp41 - _tmp44 * _tmp86;
  const Scalar _tmp127 = _tmp126 * _tmp89;
  const Scalar _tmp128 = Scalar(333.54000000000002) * _tmp127;
  const Scalar _tmp129 = _tmp27 * _tmp38;
  const Scalar _tmp130 = _tmp97 * (_tmp100 * _tmp27 - _tmp105 * _tmp34 - _tmp129);
  const Scalar _tmp131 = Scalar(333.54000000000002) * _tmp92;
  const Scalar _tmp132 = _tmp58 * _tmp64 - _tmp61 * _tmp69;
  const Scalar _tmp133 = _tmp132 * _tmp67;
  const Scalar _tmp134 = Scalar(333.54000000000002) * _tmp121;
  const Scalar _tmp135 = _tmp110 * (_tmp129 * _tmp35 - _tmp34 * _tmp49);
  const Scalar _tmp136 = _tmp109 * _tmp135;
  const Scalar _tmp137 = _tmp83 * (_tmp72 * _tmp80 - _tmp74 * _tmp79);
  const Scalar _tmp138 = _tmp107 * _tmp97;
  const Scalar _tmp139 = _tmp110 * _tmp71;
  const Scalar _tmp140 = _tmp117 * _tmp139;
  const Scalar _tmp141 = _tmp67 * (-_tmp109 * _tmp140 + _tmp117 * _tmp138 + _tmp119 - _tmp120);
  const Scalar _tmp142 = _tmp116 * _tmp139;
  const Scalar _tmp143 = _tmp89 * (-_tmp109 * _tmp142 + _tmp113 + _tmp116 * _tmp138 - _tmp123 -
                                   _tmp141 * _tmp64 + _tmp98);
  const Scalar _tmp144 = _tmp137 * _tmp139;
  const Scalar _tmp145 = Scalar(40.024799999999999) * _tmp11;
  const Scalar _tmp146 = Scalar(333.54000000000002) * _tmp115;
  const Scalar _tmp147 = _tmp110 * (_tmp34 * _tmp39 - _tmp35 * _tmp95);
  const Scalar _tmp148 = _tmp109 * _tmp147;
  const Scalar _tmp149 = -_tmp55 * _tmp64 + _tmp61 * _tmp66;
  const Scalar _tmp150 = _tmp149 * _tmp67;
  const Scalar _tmp151 = _tmp97 * (-_tmp100 * _tmp17 + _tmp101 * _tmp34 + _tmp95);
  const Scalar _tmp152 = _tmp83 * (_tmp74 * _tmp81 - _tmp76 * _tmp80);
  const Scalar _tmp153 = _tmp139 * _tmp152;
  const Scalar _tmp154 = -_tmp125 * _tmp51 + _tmp44 * _tmp87;
  const Scalar _tmp155 = _tmp154 * _tmp89;
  const Scalar _tmp156 = Scalar(333.54000000000002) * _tmp155;
  const Scalar _tmp157 = _tmp104 * _tmp18;
  const Scalar _tmp158 = _tmp157 * _tmp34;
  const Scalar _tmp159 = _tmp97 * (_tmp103 - _tmp158);
  const Scalar _tmp160 = -_tmp38;
  const Scalar _tmp161 = _tmp19 * _tmp99;
  const Scalar _tmp162 = -_tmp101 * _tmp65 + _tmp160 + _tmp161;
  const Scalar _tmp163 = -_tmp101 * _tmp68 + _tmp157 - _tmp162 * _tmp70;
  const Scalar _tmp164 = _tmp163 * _tmp92;
  const Scalar _tmp165 = -_tmp101 * _tmp90 + _tmp129 + _tmp157 * _tmp17 - _tmp161 * _tmp27 -
                         _tmp162 * _tmp91 - _tmp164;
  const Scalar _tmp166 = _tmp118 * _tmp165;
  const Scalar _tmp167 = -_tmp114 * _tmp165 + _tmp164 * _tmp97;
  const Scalar _tmp168 = _tmp162 * _tmp97;
  const Scalar _tmp169 = -_tmp117 * _tmp167 - _tmp166 * _tmp92 + _tmp168 * _tmp92;
  const Scalar _tmp170 = Scalar(333.54000000000002) * _tmp133;
  const Scalar _tmp171 = _tmp112 * _tmp165;
  const Scalar _tmp172 = _tmp101 * _tmp97;
  const Scalar _tmp173 = _tmp163 * _tmp97;
  const Scalar _tmp174 = _tmp117 * _tmp173 - _tmp140 * _tmp165 + _tmp166 - _tmp168;
  const Scalar _tmp175 =
      _tmp116 * _tmp173 - _tmp122 * _tmp174 - _tmp142 * _tmp165 + _tmp171 - _tmp172;
  const Scalar _tmp176 = _tmp135 * _tmp165;
  const Scalar _tmp177 =
      -_tmp116 * _tmp167 - _tmp122 * _tmp169 - _tmp171 * _tmp92 + _tmp172 * _tmp92;
  const Scalar _tmp178 = Scalar(333.54000000000002) * _tmp167;
  const Scalar _tmp179 = _tmp34 * _tmp38;
  const Scalar _tmp180 = _tmp97 * (-_tmp101 * _tmp17 + _tmp161 * _tmp34 - _tmp179);
  const Scalar _tmp181 = Scalar(333.54000000000002) * _tmp150;
  const Scalar _tmp182 = _tmp147 * _tmp165;
  const Scalar _tmp183 = _tmp29 * _tmp99;
  const Scalar _tmp184 = -_tmp105 * _tmp65 + _tmp157;
  const Scalar _tmp185 = -_tmp105 * _tmp68 + _tmp160 + _tmp183 - _tmp184 * _tmp70;
  const Scalar _tmp186 = _tmp185 * _tmp97;
  const Scalar _tmp187 = _tmp185 * _tmp92;
  const Scalar _tmp188 =
      -_tmp105 * _tmp90 - _tmp157 * _tmp27 + _tmp17 * _tmp183 - _tmp184 * _tmp91 - _tmp187 - _tmp95;
  const Scalar _tmp189 = _tmp110 * _tmp188;
  const Scalar _tmp190 = _tmp111 * _tmp189;
  const Scalar _tmp191 = _tmp105 * _tmp97;
  const Scalar _tmp192 = _tmp118 * _tmp188;
  const Scalar _tmp193 = _tmp189 * _tmp71;
  const Scalar _tmp194 = _tmp184 * _tmp97;
  const Scalar _tmp195 = _tmp117 * _tmp186 - _tmp117 * _tmp193 + _tmp192 - _tmp194;
  const Scalar _tmp196 =
      _tmp116 * _tmp186 - _tmp116 * _tmp193 - _tmp122 * _tmp195 + _tmp190 - _tmp191;
  const Scalar _tmp197 = _tmp135 * _tmp188;
  const Scalar _tmp198 = _tmp97 * (_tmp105 * _tmp27 + _tmp179 - _tmp183 * _tmp34);
  const Scalar _tmp199 = _tmp187 * _tmp97 - _tmp189 * _tmp93;
  const Scalar _tmp200 = -_tmp117 * _tmp199 - _tmp192 * _tmp92 + _tmp194 * _tmp92;
  const Scalar _tmp201 = Scalar(333.54000000000002) * _tmp199;
  const Scalar _tmp202 =
      -_tmp116 * _tmp199 - _tmp122 * _tmp200 - _tmp190 * _tmp92 + _tmp191 * _tmp92;
  const Scalar _tmp203 = _tmp147 * _tmp188;
  const Scalar _tmp204 = _tmp97 * (-_tmp106 + _tmp158);

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 3> _res;

  _res(0, 0) = _tmp124 * _tmp128 - _tmp130 * _tmp131 + _tmp131 * _tmp136 + _tmp133 * _tmp134 +
               _tmp137 * _tmp146 -
               _tmp145 * (_tmp109 * _tmp144 + _tmp126 * _tmp143 + _tmp130 + _tmp132 * _tmp141 -
                          _tmp136 - _tmp137 * _tmp138);
  _res(1, 0) = _tmp124 * _tmp156 + _tmp131 * _tmp148 - _tmp131 * _tmp151 + _tmp134 * _tmp150 -
               _tmp145 * (_tmp109 * _tmp153 - _tmp138 * _tmp152 + _tmp141 * _tmp149 +
                          _tmp143 * _tmp154 - _tmp148 + _tmp151) +
               _tmp146 * _tmp152;
  _res(0, 1) = _tmp128 * _tmp177 - _tmp131 * _tmp159 + _tmp131 * _tmp176 + _tmp137 * _tmp178 -
               _tmp145 * (_tmp127 * _tmp175 + _tmp133 * _tmp174 - _tmp137 * _tmp173 +
                          _tmp144 * _tmp165 + _tmp159 - _tmp176) +
               _tmp169 * _tmp170;
  _res(1, 1) = -_tmp131 * _tmp180 + _tmp131 * _tmp182 -
               _tmp145 * (_tmp150 * _tmp174 - _tmp152 * _tmp173 + _tmp153 * _tmp165 +
                          _tmp155 * _tmp175 + _tmp180 - _tmp182) +
               _tmp152 * _tmp178 + _tmp156 * _tmp177 + _tmp169 * _tmp181;
  _res(0, 2) = _tmp128 * _tmp202 + _tmp131 * _tmp197 - _tmp131 * _tmp198 + _tmp137 * _tmp201 -
               _tmp145 * (_tmp127 * _tmp196 + _tmp133 * _tmp195 - _tmp137 * _tmp186 +
                          _tmp137 * _tmp193 - _tmp197 + _tmp198) +
               _tmp170 * _tmp200;
  _res(1, 2) = _tmp131 * _tmp203 - _tmp131 * _tmp204 -
               _tmp145 * (_tmp150 * _tmp195 - _tmp152 * _tmp186 + _tmp152 * _tmp193 +
                          _tmp155 * _tmp196 - _tmp203 + _tmp204) +
               _tmp152 * _tmp201 + _tmp156 * _tmp202 + _tmp181 * _tmp200;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
