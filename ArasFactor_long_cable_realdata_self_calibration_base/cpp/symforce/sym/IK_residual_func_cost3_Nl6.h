// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_Nl6
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost3Nl6(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 285

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (101)
  const Scalar _tmp0 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp0;
  const Scalar _tmp8 = _tmp6 * _tmp7;
  const Scalar _tmp9 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                       _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp10 = 2 * _tmp2;
  const Scalar _tmp11 = _tmp10 * _tmp9;
  const Scalar _tmp12 =
      -Scalar(0.010999999999999999) * _tmp11 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp13 = _tmp10 * _tmp6;
  const Scalar _tmp14 = _tmp7 * _tmp9;
  const Scalar _tmp15 = Scalar(0.20999999999999999) * _tmp13 - Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp16 = _tmp12 - _tmp15;
  const Scalar _tmp17 = _tmp16 + _tmp5;
  const Scalar _tmp18 = _tmp17 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp19 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp20 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp20 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp2 * _tmp7;
  const Scalar _tmp24 = 2 * _tmp6 * _tmp9;
  const Scalar _tmp25 =
      -Scalar(0.010999999999999999) * _tmp23 + Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = _tmp22 + _tmp27;
  const Scalar _tmp29 = _tmp28 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = _tmp19 * _tmp29;
  const Scalar _tmp31 =
      std::sqrt(Scalar(std::pow(_tmp18, Scalar(2)) + std::pow(_tmp29, Scalar(2))));
  const Scalar _tmp32 = Scalar(1.0) / (_tmp31);
  const Scalar _tmp33 = _tmp19 * _tmp31;
  const Scalar _tmp34 = _tmp33 * (_tmp17 * _tmp29 * _tmp32 - _tmp18 * _tmp28 * _tmp32);
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp36 =
      -Scalar(0.010999999999999999) * _tmp20 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp37 = -Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp8;
  const Scalar _tmp38 = _tmp36 - _tmp37;
  const Scalar _tmp39 = -_tmp35 + _tmp38;
  const Scalar _tmp40 = _tmp30 * _tmp39;
  const Scalar _tmp41 = _tmp25 + _tmp26;
  const Scalar _tmp42 = _tmp21 + _tmp41;
  const Scalar _tmp43 = _tmp42 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp44 = _tmp12 + _tmp15;
  const Scalar _tmp45 = _tmp4 + _tmp44;
  const Scalar _tmp46 = _tmp45 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp43, Scalar(2)) + std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp43 * _tmp47;
  const Scalar _tmp49 = _tmp46 * _tmp47;
  const Scalar _tmp50 = Scalar(1.0) / (_tmp30 * _tmp49 - _tmp48);
  const Scalar _tmp51 = _tmp35 + _tmp36 + _tmp37;
  const Scalar _tmp52 = _tmp50 * (-_tmp40 * _tmp49 + _tmp48 * _tmp51);
  const Scalar _tmp53 = Scalar(1.0) * _tmp17;
  const Scalar _tmp54 = Scalar(1.0) * _tmp28;
  const Scalar _tmp55 = (-_tmp45 + _tmp53) / (_tmp42 - _tmp54);
  const Scalar _tmp56 = _tmp50 * (_tmp39 * _tmp49 - _tmp49 * _tmp51);
  const Scalar _tmp57 = _tmp30 * _tmp56 - _tmp39 - _tmp55 * (_tmp30 * _tmp52 + _tmp40);
  const Scalar _tmp58 = _tmp44 + _tmp5;
  const Scalar _tmp59 = _tmp58 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp60 = _tmp21 + _tmp27;
  const Scalar _tmp61 = _tmp60 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp62 = std::pow(Scalar(std::pow(_tmp59, Scalar(2)) + std::pow(_tmp61, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp63 = _tmp59 * _tmp62;
  const Scalar _tmp64 = _tmp39 * _tmp63;
  const Scalar _tmp65 = _tmp35 + _tmp38;
  const Scalar _tmp66 = _tmp61 * _tmp62;
  const Scalar _tmp67 = _tmp30 * _tmp63 - _tmp66;
  const Scalar _tmp68 = -_tmp55 * (-_tmp30 * _tmp64 - _tmp52 * _tmp67 + _tmp65 * _tmp66) -
                        _tmp56 * _tmp67 - _tmp63 * _tmp65 + _tmp64;
  const Scalar _tmp69 = Scalar(1.0) / (_tmp68);
  const Scalar _tmp70 = _tmp50 * (_tmp34 * _tmp49 + _tmp42 * _tmp49 - _tmp45 * _tmp48);
  const Scalar _tmp71 = _tmp34 * _tmp63 - _tmp58 * _tmp66 + _tmp60 * _tmp63 - _tmp67 * _tmp70;
  const Scalar _tmp72 = _tmp69 * _tmp71;
  const Scalar _tmp73 = Scalar(1.0) / (_tmp71);
  const Scalar _tmp74 = _tmp68 * _tmp73;
  const Scalar _tmp75 = _tmp57 + _tmp74 * (_tmp30 * _tmp70 - _tmp34 - _tmp57 * _tmp72);
  const Scalar _tmp76 = _tmp67 * _tmp69;
  const Scalar _tmp77 = -_tmp30 - _tmp75 * _tmp76;
  const Scalar _tmp78 = _tmp49 * _tmp50;
  const Scalar _tmp79 = _tmp63 * _tmp69;
  const Scalar _tmp80 = _tmp16 + _tmp4;
  const Scalar _tmp81 = _tmp80 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp82 = _tmp22 + _tmp41;
  const Scalar _tmp83 = _tmp82 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp84 = std::pow(Scalar(std::pow(_tmp81, Scalar(2)) + std::pow(_tmp83, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp85 = _tmp81 * _tmp84;
  const Scalar _tmp86 = _tmp33 * fh1;
  const Scalar _tmp87 = Scalar(1.0) * _tmp52 * _tmp55 - Scalar(1.0) * _tmp56;
  const Scalar _tmp88 = _tmp74 * (-Scalar(1.0) * _tmp70 - _tmp72 * _tmp87) + _tmp87;
  const Scalar _tmp89 = -_tmp76 * _tmp88 + Scalar(1.0);
  const Scalar _tmp90 = _tmp83 * _tmp84;
  const Scalar _tmp91 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp92 = _tmp53 + _tmp54 * _tmp55;
  const Scalar _tmp93 = 0;
  const Scalar _tmp94 = _tmp69 * _tmp93;
  const Scalar _tmp95 = _tmp76 * _tmp93;
  const Scalar _tmp96 = Scalar(1.0) * _tmp73;
  const Scalar _tmp97 = fh1 * (_tmp80 * _tmp90 - _tmp82 * _tmp85);
  const Scalar _tmp98 = _tmp96 * _tmp97;
  const Scalar _tmp99 = _tmp50 * fh1;
  const Scalar _tmp100 = _tmp69 * fh1;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = std::exp(-fh1);
  _res(1, 0) = std::exp(_tmp33 * _tmp91 * (_tmp63 * _tmp94 - _tmp78 * _tmp95) +
                        _tmp33 * _tmp97 * (_tmp63 * _tmp96 - _tmp67 * _tmp78 * _tmp96) +
                        _tmp85 * _tmp86 * (_tmp75 * _tmp79 + _tmp77 * _tmp78 + Scalar(1.0)) +
                        _tmp86 * _tmp90 * (_tmp78 * _tmp89 + _tmp79 * _tmp88));
  _res(2, 0) = std::exp(_tmp50 * _tmp67 * _tmp98 + _tmp50 * _tmp91 * _tmp95 -
                        _tmp77 * _tmp85 * _tmp99 - _tmp89 * _tmp90 * _tmp99);
  _res(3, 0) =
      std::exp(-_tmp100 * _tmp75 * _tmp85 - _tmp100 * _tmp88 * _tmp90 - _tmp91 * _tmp94 - _tmp98);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
