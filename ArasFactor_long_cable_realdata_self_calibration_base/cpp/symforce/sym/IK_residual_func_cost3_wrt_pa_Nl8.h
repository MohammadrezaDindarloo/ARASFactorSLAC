// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pa_Nl8
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPaNl8(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 655

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (210)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp2;
  const Scalar _tmp8 = _tmp6 * _tmp7;
  const Scalar _tmp9 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp10 = _tmp0 * _tmp9;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp12 = 2 * _tmp0 * _tmp6;
  const Scalar _tmp13 = _tmp2 * _tmp9;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = _tmp16 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = _tmp0 * _tmp7;
  const Scalar _tmp21 = _tmp6 * _tmp9;
  const Scalar _tmp22 =
      -Scalar(0.010999999999999999) * _tmp20 + Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp23 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp25 = _tmp22 + _tmp24;
  const Scalar _tmp26 = _tmp19 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(Scalar(std::pow(_tmp17, Scalar(2)) + std::pow(_tmp27, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp29 = _tmp17 * _tmp28;
  const Scalar _tmp30 = _tmp15 + _tmp4;
  const Scalar _tmp31 = _tmp30 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp32 = _tmp18 + _tmp25;
  const Scalar _tmp33 = _tmp32 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp34 =
      std::sqrt(Scalar(std::pow(_tmp31, Scalar(2)) + std::pow(_tmp33, Scalar(2))));
  const Scalar _tmp35 = Scalar(1.0) / (_tmp34);
  const Scalar _tmp36 = Scalar(1.0) / (_tmp31);
  const Scalar _tmp37 = _tmp34 * _tmp36;
  const Scalar _tmp38 = _tmp37 * (_tmp30 * _tmp33 * _tmp35 - _tmp31 * _tmp32 * _tmp35);
  const Scalar _tmp39 = _tmp27 * _tmp28;
  const Scalar _tmp40 = _tmp11 - _tmp14;
  const Scalar _tmp41 = _tmp40 + _tmp5;
  const Scalar _tmp42 = _tmp41 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp43 = std::pow(_tmp42, Scalar(2));
  const Scalar _tmp44 = _tmp22 - _tmp24;
  const Scalar _tmp45 = _tmp19 + _tmp44;
  const Scalar _tmp46 = _tmp45 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp47 = std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = _tmp43 + _tmp47;
  const Scalar _tmp49 = std::pow(_tmp48, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp50 = _tmp38 * _tmp49;
  const Scalar _tmp51 = _tmp45 * _tmp49;
  const Scalar _tmp52 = _tmp41 * _tmp49;
  const Scalar _tmp53 = _tmp42 * _tmp50 + _tmp42 * _tmp51 - _tmp46 * _tmp52;
  const Scalar _tmp54 = _tmp33 * _tmp36;
  const Scalar _tmp55 = _tmp29 * _tmp54 - _tmp39;
  const Scalar _tmp56 = _tmp46 * _tmp49;
  const Scalar _tmp57 = _tmp49 * _tmp54;
  const Scalar _tmp58 = _tmp42 * _tmp57 - _tmp56;
  const Scalar _tmp59 = Scalar(1.0) / (_tmp58);
  const Scalar _tmp60 = _tmp55 * _tmp59;
  const Scalar _tmp61 = -_tmp16 * _tmp39 + _tmp26 * _tmp29 + _tmp29 * _tmp38 - _tmp53 * _tmp60;
  const Scalar _tmp62 = Scalar(1.0) / (_tmp61);
  const Scalar _tmp63 = Scalar(1.0) * _tmp62;
  const Scalar _tmp64 = _tmp42 * _tmp49;
  const Scalar _tmp65 = _tmp60 * _tmp63;
  const Scalar _tmp66 = _tmp4 + _tmp40;
  const Scalar _tmp67 = _tmp66 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp68 = _tmp18 + _tmp44;
  const Scalar _tmp69 = _tmp68 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp67, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp69 * _tmp70;
  const Scalar _tmp72 = _tmp67 * _tmp70;
  const Scalar _tmp73 = fh1 * (_tmp66 * _tmp71 - _tmp68 * _tmp72);
  const Scalar _tmp74 = _tmp37 * _tmp73;
  const Scalar _tmp75 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp8;
  const Scalar _tmp76 = -Scalar(0.010999999999999999) * _tmp1 -
                        Scalar(0.010999999999999999) * _tmp23 + Scalar(-0.010999999999999999);
  const Scalar _tmp77 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp78 = _tmp76 + _tmp77;
  const Scalar _tmp79 = _tmp75 + _tmp78;
  const Scalar _tmp80 = _tmp49 * _tmp79;
  const Scalar _tmp81 = _tmp42 * _tmp80;
  const Scalar _tmp82 = -_tmp75;
  const Scalar _tmp83 = _tmp76 - _tmp77 + _tmp82;
  const Scalar _tmp84 = -_tmp54 * _tmp81 + _tmp56 * _tmp83;
  const Scalar _tmp85 = Scalar(1.0) * _tmp30;
  const Scalar _tmp86 = Scalar(1.0) * _tmp32;
  const Scalar _tmp87 = (-_tmp41 + _tmp85) / (_tmp45 - _tmp86);
  const Scalar _tmp88 = Scalar(1.0) * _tmp59;
  const Scalar _tmp89 = _tmp87 * _tmp88;
  const Scalar _tmp90 = _tmp49 * _tmp83;
  const Scalar _tmp91 = -_tmp42 * _tmp90 + _tmp81;
  const Scalar _tmp92 = _tmp84 * _tmp89 - _tmp88 * _tmp91;
  const Scalar _tmp93 = _tmp78 + _tmp82;
  const Scalar _tmp94 = _tmp54 * _tmp79;
  const Scalar _tmp95 = _tmp29 * _tmp79 - _tmp29 * _tmp93 - _tmp60 * _tmp91 -
                        _tmp87 * (-_tmp29 * _tmp94 + _tmp39 * _tmp93 - _tmp60 * _tmp84);
  const Scalar _tmp96 = Scalar(1.0) / (_tmp95);
  const Scalar _tmp97 = _tmp61 * _tmp96;
  const Scalar _tmp98 = -_tmp53 * _tmp88 - _tmp92 * _tmp97;
  const Scalar _tmp99 = _tmp62 * _tmp95;
  const Scalar _tmp100 = _tmp92 + _tmp98 * _tmp99;
  const Scalar _tmp101 = _tmp55 * _tmp96;
  const Scalar _tmp102 = -_tmp100 * _tmp101 + Scalar(1.0);
  const Scalar _tmp103 = _tmp49 * _tmp59;
  const Scalar _tmp104 = _tmp102 * _tmp103;
  const Scalar _tmp105 = _tmp29 * _tmp96;
  const Scalar _tmp106 = _tmp71 * fh1;
  const Scalar _tmp107 = _tmp106 * _tmp37;
  const Scalar _tmp108 = _tmp103 * _tmp42;
  const Scalar _tmp109 = _tmp85 + _tmp86 * _tmp87;
  const Scalar _tmp110 = 0;
  const Scalar _tmp111 = _tmp101 * _tmp110;
  const Scalar _tmp112 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp113 = _tmp112 * _tmp37;
  const Scalar _tmp114 = _tmp54 * _tmp59;
  const Scalar _tmp115 = _tmp114 * _tmp91 - _tmp79 - _tmp87 * (_tmp114 * _tmp84 + _tmp94);
  const Scalar _tmp116 = _tmp114 * _tmp53 - _tmp115 * _tmp97 - _tmp38;
  const Scalar _tmp117 = _tmp115 + _tmp116 * _tmp99;
  const Scalar _tmp118 = -_tmp101 * _tmp117 - _tmp54;
  const Scalar _tmp119 = _tmp103 * _tmp118;
  const Scalar _tmp120 = _tmp72 * fh1;
  const Scalar _tmp121 = _tmp120 * _tmp37;
  const Scalar _tmp122 = std::exp(_tmp107 * (_tmp100 * _tmp105 + _tmp104 * _tmp42) +
                                  _tmp113 * (_tmp105 * _tmp110 - _tmp108 * _tmp111) +
                                  _tmp121 * (_tmp105 * _tmp117 + _tmp119 * _tmp42 + Scalar(1.0)) +
                                  _tmp74 * (_tmp29 * _tmp63 - _tmp64 * _tmp65));
  const Scalar _tmp123 = std::pow(_tmp48, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp124 = _tmp123 * _tmp43;
  const Scalar _tmp125 = _tmp124 * _tmp59;
  const Scalar _tmp126 = _tmp123 * _tmp42 * _tmp46;
  const Scalar _tmp127 = std::pow(_tmp58, Scalar(-2));
  const Scalar _tmp128 = _tmp127 * (_tmp124 * _tmp54 - _tmp126 - _tmp57);
  const Scalar _tmp129 = _tmp102 * _tmp64;
  const Scalar _tmp130 = _tmp128 * _tmp55;
  const Scalar _tmp131 = _tmp55 * _tmp84;
  const Scalar _tmp132 = _tmp126 * _tmp83;
  const Scalar _tmp133 = -_tmp124 * _tmp94 + _tmp132 + _tmp54 * _tmp80;
  const Scalar _tmp134 = _tmp124 * _tmp79 - _tmp124 * _tmp83 - _tmp80 + _tmp90;
  const Scalar _tmp135 =
      _tmp130 * _tmp91 - _tmp134 * _tmp60 - _tmp87 * (_tmp128 * _tmp131 - _tmp133 * _tmp60);
  const Scalar _tmp136 = std::pow(_tmp95, Scalar(-2));
  const Scalar _tmp137 = _tmp135 * _tmp136;
  const Scalar _tmp138 = _tmp137 * _tmp29;
  const Scalar _tmp139 = _tmp124 * _tmp38 + _tmp124 * _tmp45 - _tmp126 * _tmp41 - _tmp50 - _tmp51;
  const Scalar _tmp140 = _tmp130 * _tmp53 - _tmp139 * _tmp60;
  const Scalar _tmp141 = _tmp140 * _tmp96;
  const Scalar _tmp142 = _tmp137 * _tmp61;
  const Scalar _tmp143 = Scalar(1.0) * _tmp128;
  const Scalar _tmp144 = _tmp84 * _tmp87;
  const Scalar _tmp145 = _tmp133 * _tmp89 - _tmp134 * _tmp88 - _tmp143 * _tmp144 + _tmp143 * _tmp91;
  const Scalar _tmp146 = std::pow(_tmp61, Scalar(-2));
  const Scalar _tmp147 = _tmp146 * _tmp95;
  const Scalar _tmp148 = _tmp147 * _tmp98;
  const Scalar _tmp149 = _tmp62 * _tmp98;
  const Scalar _tmp150 = _tmp135 * _tmp149 - _tmp140 * _tmp148 + _tmp145 +
                         _tmp99 * (-_tmp139 * _tmp88 - _tmp141 * _tmp92 + _tmp142 * _tmp92 +
                                   _tmp143 * _tmp53 - _tmp145 * _tmp97);
  const Scalar _tmp151 = _tmp100 * _tmp55;
  const Scalar _tmp152 = -_tmp101 * _tmp150 + _tmp137 * _tmp151;
  const Scalar _tmp153 = _tmp55 * _tmp62;
  const Scalar _tmp154 = _tmp153 * _tmp64;
  const Scalar _tmp155 = Scalar(1.0) * _tmp146;
  const Scalar _tmp156 = _tmp155 * _tmp29;
  const Scalar _tmp157 = _tmp60 * _tmp64;
  const Scalar _tmp158 = _tmp155 * _tmp157;
  const Scalar _tmp159 = _tmp110 * _tmp157;
  const Scalar _tmp160 = _tmp111 * _tmp64;
  const Scalar _tmp161 = _tmp117 * _tmp55;
  const Scalar _tmp162 = _tmp116 * _tmp147;
  const Scalar _tmp163 = _tmp128 * _tmp54;
  const Scalar _tmp164 =
      _tmp114 * _tmp134 - _tmp163 * _tmp91 - _tmp87 * (_tmp114 * _tmp133 - _tmp163 * _tmp84);
  const Scalar _tmp165 = _tmp116 * _tmp62;
  const Scalar _tmp166 = _tmp135 * _tmp165 - _tmp140 * _tmp162 + _tmp164 +
                         _tmp99 * (_tmp114 * _tmp139 - _tmp115 * _tmp141 + _tmp115 * _tmp142 -
                                   _tmp163 * _tmp53 - _tmp164 * _tmp97);
  const Scalar _tmp167 = -_tmp101 * _tmp166 + _tmp137 * _tmp161;
  const Scalar _tmp168 = _tmp118 * _tmp128;
  const Scalar _tmp169 = _tmp118 * _tmp59;
  const Scalar _tmp170 = _tmp106 * _tmp59;
  const Scalar _tmp171 = _tmp63 * _tmp73;
  const Scalar _tmp172 = _tmp110 * _tmp112;
  const Scalar _tmp173 = _tmp101 * _tmp172;
  const Scalar _tmp174 =
      std::exp(-_tmp102 * _tmp170 - _tmp120 * _tmp169 + _tmp171 * _tmp60 + _tmp173 * _tmp59);
  const Scalar _tmp175 = _tmp153 * _tmp73;
  const Scalar _tmp176 = _tmp102 * _tmp106;
  const Scalar _tmp177 = _tmp155 * _tmp73;
  const Scalar _tmp178 = _tmp140 * _tmp177;
  const Scalar _tmp179 = _tmp120 * _tmp59;
  const Scalar _tmp180 = _tmp137 * _tmp172;
  const Scalar _tmp181 = _tmp106 * _tmp96;
  const Scalar _tmp182 = _tmp120 * _tmp96;
  const Scalar _tmp183 =
      std::exp(-_tmp100 * _tmp181 - _tmp117 * _tmp182 - _tmp171 - _tmp172 * _tmp96);
  const Scalar _tmp184 = _tmp100 * _tmp106;
  const Scalar _tmp185 = _tmp117 * _tmp120;
  const Scalar _tmp186 = _tmp123 * _tmp47;
  const Scalar _tmp187 = -_tmp126 * _tmp94 + _tmp186 * _tmp83 - _tmp90;
  const Scalar _tmp188 = _tmp127 * (_tmp126 * _tmp54 - _tmp186 + _tmp49);
  const Scalar _tmp189 = _tmp188 * _tmp55;
  const Scalar _tmp190 = _tmp126 * _tmp79 - _tmp132;
  const Scalar _tmp191 =
      _tmp189 * _tmp91 - _tmp190 * _tmp60 - _tmp87 * (_tmp131 * _tmp188 - _tmp187 * _tmp60);
  const Scalar _tmp192 = _tmp136 * _tmp191;
  const Scalar _tmp193 = _tmp192 * _tmp29;
  const Scalar _tmp194 = _tmp126 * _tmp59;
  const Scalar _tmp195 = _tmp126 * _tmp38 + _tmp126 * _tmp45 - _tmp186 * _tmp41 + _tmp52;
  const Scalar _tmp196 = _tmp189 * _tmp53 - _tmp195 * _tmp60;
  const Scalar _tmp197 = _tmp192 * _tmp61;
  const Scalar _tmp198 = Scalar(1.0) * _tmp188;
  const Scalar _tmp199 =
      -_tmp144 * _tmp198 + _tmp187 * _tmp89 - _tmp190 * _tmp88 + _tmp198 * _tmp91;
  const Scalar _tmp200 = _tmp196 * _tmp96;
  const Scalar _tmp201 = -_tmp148 * _tmp196 + _tmp149 * _tmp191 + _tmp199 +
                         _tmp99 * (-_tmp195 * _tmp88 + _tmp197 * _tmp92 + _tmp198 * _tmp53 -
                                   _tmp199 * _tmp97 - _tmp200 * _tmp92);
  const Scalar _tmp202 = -_tmp101 * _tmp201 + _tmp151 * _tmp192;
  const Scalar _tmp203 = _tmp188 * _tmp54;
  const Scalar _tmp204 =
      _tmp114 * _tmp190 - _tmp203 * _tmp91 - _tmp87 * (_tmp114 * _tmp187 - _tmp203 * _tmp84);
  const Scalar _tmp205 = -_tmp162 * _tmp196 + _tmp165 * _tmp191 + _tmp204 +
                         _tmp99 * (_tmp114 * _tmp195 + _tmp115 * _tmp197 - _tmp115 * _tmp200 -
                                   _tmp203 * _tmp53 - _tmp204 * _tmp97);
  const Scalar _tmp206 = -_tmp101 * _tmp205 + _tmp161 * _tmp192;
  const Scalar _tmp207 = _tmp118 * _tmp188;
  const Scalar _tmp208 = _tmp172 * _tmp192;
  const Scalar _tmp209 = _tmp177 * _tmp196;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp122 * (-_tmp107 * (-_tmp100 * _tmp138 + _tmp102 * _tmp125 - _tmp104 +
                                       _tmp105 * _tmp150 + _tmp108 * _tmp152 - _tmp128 * _tmp129) -
                           _tmp113 * (_tmp103 * _tmp111 - _tmp110 * _tmp138 - _tmp111 * _tmp125 +
                                      _tmp128 * _tmp160 + _tmp137 * _tmp159) -
                           _tmp121 * (_tmp105 * _tmp166 + _tmp108 * _tmp167 - _tmp117 * _tmp138 +
                                      _tmp118 * _tmp125 - _tmp119 - _tmp168 * _tmp64) -
                           _tmp74 * (-_tmp124 * _tmp65 - _tmp140 * _tmp156 + _tmp140 * _tmp158 +
                                     _tmp143 * _tmp154 + _tmp49 * _tmp65));
  _res(2, 0) =
      -_tmp174 * (-_tmp120 * _tmp168 + _tmp128 * _tmp173 - _tmp128 * _tmp176 + _tmp143 * _tmp175 +
                  _tmp152 * _tmp170 + _tmp167 * _tmp179 + _tmp178 * _tmp60 + _tmp180 * _tmp60);
  _res(3, 0) = -_tmp183 * (-_tmp137 * _tmp184 - _tmp137 * _tmp185 + _tmp150 * _tmp181 +
                           _tmp166 * _tmp182 - _tmp178 - _tmp180);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp122 *
      (-_tmp107 * (-_tmp100 * _tmp193 + _tmp102 * _tmp194 + _tmp105 * _tmp201 + _tmp108 * _tmp202 -
                   _tmp129 * _tmp188) -
       _tmp113 * (-_tmp110 * _tmp193 - _tmp111 * _tmp194 + _tmp159 * _tmp192 + _tmp160 * _tmp188) -
       _tmp121 * (_tmp105 * _tmp205 + _tmp108 * _tmp206 - _tmp117 * _tmp193 + _tmp126 * _tmp169 -
                  _tmp207 * _tmp64) -
       _tmp74 * (-_tmp126 * _tmp65 + _tmp154 * _tmp198 - _tmp156 * _tmp196 + _tmp158 * _tmp196));
  _res(2, 1) =
      -_tmp174 * (-_tmp120 * _tmp207 + _tmp170 * _tmp202 + _tmp173 * _tmp188 + _tmp175 * _tmp198 -
                  _tmp176 * _tmp188 + _tmp179 * _tmp206 + _tmp208 * _tmp60 + _tmp209 * _tmp60);
  _res(3, 1) = -_tmp183 * (_tmp181 * _tmp201 + _tmp182 * _tmp205 - _tmp184 * _tmp192 -
                           _tmp185 * _tmp192 - _tmp208 - _tmp209);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
