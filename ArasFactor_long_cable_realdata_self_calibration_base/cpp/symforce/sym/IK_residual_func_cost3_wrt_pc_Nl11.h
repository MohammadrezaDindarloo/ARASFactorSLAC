// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl11
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl11(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 670

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (220)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp9 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp12 = _tmp1 * _tmp5;
  const Scalar _tmp13 =
      -Scalar(0.010999999999999999) * _tmp11 - Scalar(0.010999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp10 + _tmp13;
  const Scalar _tmp15 = _tmp14 + _tmp7;
  const Scalar _tmp16 = _tmp15 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp17 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp18 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp18 + Scalar(0.20999999999999999) * _tmp8 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp21 = _tmp2 * _tmp4;
  const Scalar _tmp22 = _tmp0 * _tmp5;
  const Scalar _tmp23 =
      -Scalar(0.010999999999999999) * _tmp21 + Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp24 = _tmp20 + _tmp23;
  const Scalar _tmp25 = _tmp19 + _tmp24;
  const Scalar _tmp26 = _tmp25 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp27 = std::pow(_tmp26, Scalar(2));
  const Scalar _tmp28 = _tmp17 + _tmp27;
  const Scalar _tmp29 = std::pow(_tmp28, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp30 = -_tmp10 + _tmp13;
  const Scalar _tmp31 = _tmp30 + _tmp7;
  const Scalar _tmp32 = _tmp31 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp33 = -_tmp20 + _tmp23;
  const Scalar _tmp34 = _tmp19 + _tmp33;
  const Scalar _tmp35 = _tmp34 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp36 =
      std::sqrt(Scalar(std::pow(_tmp32, Scalar(2)) + std::pow(_tmp35, Scalar(2))));
  const Scalar _tmp37 = Scalar(1.0) / (_tmp36);
  const Scalar _tmp38 = Scalar(1.0) / (_tmp32);
  const Scalar _tmp39 = _tmp36 * _tmp38;
  const Scalar _tmp40 = _tmp39 * (_tmp31 * _tmp35 * _tmp37 - _tmp32 * _tmp34 * _tmp37);
  const Scalar _tmp41 = _tmp29 * _tmp40;
  const Scalar _tmp42 = _tmp25 * _tmp29;
  const Scalar _tmp43 = _tmp26 * _tmp29;
  const Scalar _tmp44 = -_tmp15 * _tmp43 + _tmp16 * _tmp41 + _tmp16 * _tmp42;
  const Scalar _tmp45 = _tmp35 * _tmp38;
  const Scalar _tmp46 = _tmp29 * _tmp45;
  const Scalar _tmp47 = _tmp16 * _tmp46 - _tmp43;
  const Scalar _tmp48 = Scalar(1.0) / (_tmp47);
  const Scalar _tmp49 = Scalar(1.0) * _tmp48;
  const Scalar _tmp50 = -_tmp7;
  const Scalar _tmp51 = _tmp30 + _tmp50;
  const Scalar _tmp52 = _tmp51 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp53 = -_tmp19;
  const Scalar _tmp54 = _tmp33 + _tmp53;
  const Scalar _tmp55 = _tmp54 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp56 = std::pow(Scalar(std::pow(_tmp52, Scalar(2)) + std::pow(_tmp55, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp57 = _tmp52 * _tmp56;
  const Scalar _tmp58 = _tmp55 * _tmp56;
  const Scalar _tmp59 = _tmp45 * _tmp57 - _tmp58;
  const Scalar _tmp60 = _tmp48 * _tmp59;
  const Scalar _tmp61 = _tmp40 * _tmp57 - _tmp44 * _tmp60 - _tmp51 * _tmp58 + _tmp54 * _tmp57;
  const Scalar _tmp62 =
      -Scalar(0.010999999999999999) * _tmp18 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp63 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp64 = -_tmp63;
  const Scalar _tmp65 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp66 = _tmp62 + _tmp64 - _tmp65;
  const Scalar _tmp67 = _tmp62 + _tmp65;
  const Scalar _tmp68 = _tmp64 + _tmp67;
  const Scalar _tmp69 = _tmp29 * _tmp68;
  const Scalar _tmp70 = _tmp16 * _tmp69;
  const Scalar _tmp71 = _tmp63 + _tmp67;
  const Scalar _tmp72 = _tmp43 * _tmp71 - _tmp45 * _tmp70;
  const Scalar _tmp73 = _tmp45 * _tmp68;
  const Scalar _tmp74 = Scalar(1.0) * _tmp34;
  const Scalar _tmp75 = Scalar(1.0) * _tmp31;
  const Scalar _tmp76 = (-_tmp15 + _tmp75) / (_tmp25 - _tmp74);
  const Scalar _tmp77 = _tmp29 * _tmp71;
  const Scalar _tmp78 = -_tmp16 * _tmp77 + _tmp70;
  const Scalar _tmp79 = _tmp48 * _tmp78;
  const Scalar _tmp80 = -_tmp57 * _tmp66 + _tmp57 * _tmp68 - _tmp59 * _tmp79 -
                        _tmp76 * (-_tmp57 * _tmp73 + _tmp58 * _tmp66 - _tmp60 * _tmp72);
  const Scalar _tmp81 = Scalar(1.0) / (_tmp80);
  const Scalar _tmp82 = _tmp49 * _tmp76;
  const Scalar _tmp83 = _tmp72 * _tmp82 - Scalar(1.0) * _tmp79;
  const Scalar _tmp84 = _tmp81 * _tmp83;
  const Scalar _tmp85 = -_tmp44 * _tmp49 - _tmp61 * _tmp84;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp61);
  const Scalar _tmp87 = _tmp80 * _tmp86;
  const Scalar _tmp88 = _tmp83 + _tmp85 * _tmp87;
  const Scalar _tmp89 = _tmp59 * _tmp81;
  const Scalar _tmp90 = -_tmp88 * _tmp89 + Scalar(1.0);
  const Scalar _tmp91 = _tmp29 * _tmp48;
  const Scalar _tmp92 = _tmp90 * _tmp91;
  const Scalar _tmp93 = _tmp57 * _tmp81;
  const Scalar _tmp94 = _tmp14 + _tmp50;
  const Scalar _tmp95 = _tmp94 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp96 = _tmp24 + _tmp53;
  const Scalar _tmp97 = _tmp96 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp98 = std::pow(Scalar(std::pow(_tmp95, Scalar(2)) + std::pow(_tmp97, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp99 = _tmp97 * _tmp98;
  const Scalar _tmp100 = _tmp99 * fh1;
  const Scalar _tmp101 = _tmp100 * _tmp39;
  const Scalar _tmp102 = _tmp45 * _tmp48;
  const Scalar _tmp103 = _tmp45 * _tmp79 - _tmp68 - _tmp76 * (_tmp102 * _tmp72 + _tmp73);
  const Scalar _tmp104 = _tmp61 * _tmp81;
  const Scalar _tmp105 = _tmp102 * _tmp44 - _tmp103 * _tmp104 - _tmp40;
  const Scalar _tmp106 = _tmp103 + _tmp105 * _tmp87;
  const Scalar _tmp107 = -_tmp106 * _tmp89 - _tmp45;
  const Scalar _tmp108 = _tmp107 * _tmp91;
  const Scalar _tmp109 = _tmp95 * _tmp98;
  const Scalar _tmp110 = _tmp109 * fh1;
  const Scalar _tmp111 = _tmp110 * _tmp39;
  const Scalar _tmp112 = _tmp16 * _tmp91;
  const Scalar _tmp113 = _tmp74 * _tmp76 + _tmp75;
  const Scalar _tmp114 = 0;
  const Scalar _tmp115 = _tmp114 * _tmp89;
  const Scalar _tmp116 = _tmp114 * _tmp81;
  const Scalar _tmp117 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp118 = _tmp117 * _tmp39;
  const Scalar _tmp119 = _tmp49 * _tmp59;
  const Scalar _tmp120 = _tmp119 * _tmp86;
  const Scalar _tmp121 = _tmp120 * _tmp29;
  const Scalar _tmp122 = Scalar(1.0) * _tmp86;
  const Scalar _tmp123 = fh1 * (-_tmp109 * _tmp96 + _tmp94 * _tmp99);
  const Scalar _tmp124 = _tmp123 * _tmp39;
  const Scalar _tmp125 = std::exp(_tmp101 * (_tmp16 * _tmp92 + _tmp88 * _tmp93) +
                                  _tmp111 * (_tmp106 * _tmp93 + _tmp108 * _tmp16 + Scalar(1.0)) +
                                  _tmp118 * (-_tmp112 * _tmp115 + _tmp116 * _tmp57) +
                                  _tmp124 * (-_tmp121 * _tmp16 + _tmp122 * _tmp57));
  const Scalar _tmp126 = std::pow(_tmp28, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp127 = _tmp126 * _tmp17;
  const Scalar _tmp128 = _tmp127 * _tmp68;
  const Scalar _tmp129 = -_tmp127 * _tmp71 + _tmp128 - _tmp69 + _tmp77;
  const Scalar _tmp130 = _tmp126 * _tmp16 * _tmp26;
  const Scalar _tmp131 = _tmp127 * _tmp45 - _tmp130 - _tmp46;
  const Scalar _tmp132 = std::pow(_tmp47, Scalar(-2));
  const Scalar _tmp133 = _tmp132 * _tmp78;
  const Scalar _tmp134 = _tmp131 * _tmp133;
  const Scalar _tmp135 = _tmp132 * _tmp59;
  const Scalar _tmp136 = _tmp131 * _tmp72;
  const Scalar _tmp137 = _tmp130 * _tmp71;
  const Scalar _tmp138 = -_tmp128 * _tmp45 + _tmp137 + _tmp45 * _tmp69;
  const Scalar _tmp139 =
      -_tmp129 * _tmp60 + _tmp134 * _tmp59 - _tmp76 * (_tmp135 * _tmp136 - _tmp138 * _tmp60);
  const Scalar _tmp140 = std::pow(_tmp80, Scalar(-2));
  const Scalar _tmp141 = _tmp140 * _tmp59;
  const Scalar _tmp142 = _tmp139 * _tmp141;
  const Scalar _tmp143 = _tmp112 * _tmp114;
  const Scalar _tmp144 = _tmp16 * _tmp29;
  const Scalar _tmp145 = _tmp131 * _tmp144;
  const Scalar _tmp146 = _tmp115 * _tmp132;
  const Scalar _tmp147 = _tmp127 * _tmp48;
  const Scalar _tmp148 = _tmp139 * _tmp140;
  const Scalar _tmp149 = _tmp114 * _tmp57;
  const Scalar _tmp150 = _tmp105 * _tmp86;
  const Scalar _tmp151 = _tmp131 * _tmp44;
  const Scalar _tmp152 = _tmp127 * _tmp25 + _tmp127 * _tmp40 - _tmp130 * _tmp15 - _tmp41 - _tmp42;
  const Scalar _tmp153 = _tmp135 * _tmp151 - _tmp152 * _tmp60;
  const Scalar _tmp154 = _tmp103 * _tmp81;
  const Scalar _tmp155 = _tmp140 * _tmp61;
  const Scalar _tmp156 = _tmp103 * _tmp155;
  const Scalar _tmp157 = _tmp132 * _tmp45;
  const Scalar _tmp158 =
      _tmp102 * _tmp129 - _tmp134 * _tmp45 - _tmp76 * (_tmp102 * _tmp138 - _tmp136 * _tmp157);
  const Scalar _tmp159 = std::pow(_tmp61, Scalar(-2));
  const Scalar _tmp160 = _tmp159 * _tmp80;
  const Scalar _tmp161 = _tmp105 * _tmp160;
  const Scalar _tmp162 = _tmp139 * _tmp150 - _tmp153 * _tmp161 + _tmp158 +
                         _tmp87 * (_tmp102 * _tmp152 - _tmp104 * _tmp158 + _tmp139 * _tmp156 -
                                   _tmp151 * _tmp157 - _tmp153 * _tmp154);
  const Scalar _tmp163 = _tmp106 * _tmp142 - _tmp162 * _tmp89;
  const Scalar _tmp164 = _tmp107 * _tmp132;
  const Scalar _tmp165 = _tmp106 * _tmp57;
  const Scalar _tmp166 = Scalar(1.0) * _tmp159;
  const Scalar _tmp167 = _tmp153 * _tmp166;
  const Scalar _tmp168 = _tmp119 * _tmp159;
  const Scalar _tmp169 = _tmp153 * _tmp168;
  const Scalar _tmp170 = _tmp160 * _tmp85;
  const Scalar _tmp171 = Scalar(1.0) * _tmp132;
  const Scalar _tmp172 = _tmp155 * _tmp83;
  const Scalar _tmp173 = _tmp171 * _tmp76;
  const Scalar _tmp174 =
      -_tmp129 * _tmp49 + Scalar(1.0) * _tmp134 - _tmp136 * _tmp173 + _tmp138 * _tmp82;
  const Scalar _tmp175 = _tmp85 * _tmp86;
  const Scalar _tmp176 = _tmp139 * _tmp175 - _tmp153 * _tmp170 + _tmp174 +
                         _tmp87 * (-_tmp104 * _tmp174 + _tmp139 * _tmp172 + _tmp151 * _tmp171 -
                                   _tmp152 * _tmp49 - _tmp153 * _tmp84);
  const Scalar _tmp177 = _tmp142 * _tmp88 - _tmp176 * _tmp89;
  const Scalar _tmp178 = _tmp132 * _tmp90;
  const Scalar _tmp179 = _tmp57 * _tmp88;
  const Scalar _tmp180 = _tmp48 * fh1;
  const Scalar _tmp181 = _tmp109 * _tmp180;
  const Scalar _tmp182 = _tmp180 * _tmp99;
  const Scalar _tmp183 = _tmp114 * _tmp117;
  const Scalar _tmp184 = _tmp183 * _tmp89;
  const Scalar _tmp185 =
      std::exp(-_tmp107 * _tmp181 + _tmp120 * _tmp123 - _tmp182 * _tmp90 + _tmp184 * _tmp48);
  const Scalar _tmp186 = _tmp132 * _tmp184;
  const Scalar _tmp187 = _tmp148 * _tmp183;
  const Scalar _tmp188 = _tmp122 * _tmp123;
  const Scalar _tmp189 = _tmp81 * fh1;
  const Scalar _tmp190 = _tmp189 * _tmp99;
  const Scalar _tmp191 = _tmp109 * _tmp189;
  const Scalar _tmp192 =
      std::exp(-_tmp106 * _tmp191 - _tmp116 * _tmp117 - _tmp188 - _tmp190 * _tmp88);
  const Scalar _tmp193 = _tmp106 * _tmp110;
  const Scalar _tmp194 = _tmp100 * _tmp88;
  const Scalar _tmp195 = _tmp130 * _tmp68 - _tmp137;
  const Scalar _tmp196 = _tmp126 * _tmp27;
  const Scalar _tmp197 = _tmp130 * _tmp45 - _tmp196 + _tmp29;
  const Scalar _tmp198 = _tmp135 * _tmp197;
  const Scalar _tmp199 = -_tmp130 * _tmp73 + _tmp196 * _tmp71 - _tmp77;
  const Scalar _tmp200 = _tmp133 * _tmp197;
  const Scalar _tmp201 =
      -_tmp195 * _tmp60 + _tmp200 * _tmp59 - _tmp76 * (_tmp198 * _tmp72 - _tmp199 * _tmp60);
  const Scalar _tmp202 = _tmp140 * _tmp201;
  const Scalar _tmp203 = _tmp141 * _tmp201;
  const Scalar _tmp204 = _tmp130 * _tmp48;
  const Scalar _tmp205 = _tmp130 * _tmp25 + _tmp130 * _tmp40 - _tmp15 * _tmp196 + _tmp15 * _tmp29;
  const Scalar _tmp206 = _tmp198 * _tmp44 - _tmp205 * _tmp60;
  const Scalar _tmp207 = _tmp166 * _tmp206;
  const Scalar _tmp208 = _tmp168 * _tmp206;
  const Scalar _tmp209 = _tmp197 * _tmp44;
  const Scalar _tmp210 = _tmp197 * _tmp72;
  const Scalar _tmp211 =
      -_tmp173 * _tmp210 - _tmp195 * _tmp49 + _tmp199 * _tmp82 + Scalar(1.0) * _tmp200;
  const Scalar _tmp212 = -_tmp170 * _tmp206 + _tmp175 * _tmp201 + _tmp211 +
                         _tmp87 * (-_tmp104 * _tmp211 + _tmp171 * _tmp209 + _tmp172 * _tmp201 -
                                   _tmp205 * _tmp49 - _tmp206 * _tmp84);
  const Scalar _tmp213 = _tmp203 * _tmp88 - _tmp212 * _tmp89;
  const Scalar _tmp214 = _tmp178 * _tmp197;
  const Scalar _tmp215 =
      _tmp102 * _tmp195 - _tmp200 * _tmp45 - _tmp76 * (_tmp102 * _tmp199 - _tmp157 * _tmp210);
  const Scalar _tmp216 = _tmp150 * _tmp201 - _tmp161 * _tmp206 + _tmp215 +
                         _tmp87 * (_tmp102 * _tmp205 - _tmp104 * _tmp215 - _tmp154 * _tmp206 +
                                   _tmp156 * _tmp201 - _tmp157 * _tmp209);
  const Scalar _tmp217 = _tmp106 * _tmp203 - _tmp216 * _tmp89;
  const Scalar _tmp218 = _tmp164 * _tmp197;
  const Scalar _tmp219 = _tmp183 * _tmp202;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp125 * (-_tmp101 * (_tmp112 * _tmp177 - _tmp145 * _tmp178 + _tmp147 * _tmp90 -
                                       _tmp148 * _tmp179 + _tmp176 * _tmp93 - _tmp92) -
                           _tmp111 * (_tmp107 * _tmp147 - _tmp108 + _tmp112 * _tmp163 -
                                      _tmp145 * _tmp164 - _tmp148 * _tmp165 + _tmp162 * _tmp93) -
                           _tmp118 * (-_tmp115 * _tmp147 + _tmp115 * _tmp91 + _tmp142 * _tmp143 +
                                      _tmp145 * _tmp146 - _tmp148 * _tmp149) -
                           _tmp124 * (-_tmp120 * _tmp127 + _tmp121 + _tmp122 * _tmp135 * _tmp145 +
                                      _tmp144 * _tmp169 - _tmp167 * _tmp57));
  _res(2, 0) = -_tmp185 * (-_tmp100 * _tmp131 * _tmp178 - _tmp110 * _tmp131 * _tmp164 +
                           _tmp123 * _tmp169 + _tmp131 * _tmp135 * _tmp188 + _tmp131 * _tmp186 +
                           _tmp163 * _tmp181 + _tmp177 * _tmp182 + _tmp187 * _tmp60);
  _res(3, 0) = -_tmp192 * (-_tmp123 * _tmp167 - _tmp148 * _tmp193 - _tmp148 * _tmp194 +
                           _tmp162 * _tmp191 + _tmp176 * _tmp190 - _tmp187);
  _res(0, 1) = 0;
  _res(1, 1) = -_tmp125 * (-_tmp101 * (_tmp112 * _tmp213 - _tmp144 * _tmp214 - _tmp179 * _tmp202 +
                                       _tmp204 * _tmp90 + _tmp212 * _tmp93) -
                           _tmp111 * (_tmp107 * _tmp204 + _tmp112 * _tmp217 - _tmp144 * _tmp218 -
                                      _tmp165 * _tmp202 + _tmp216 * _tmp93) -
                           _tmp118 * (-_tmp115 * _tmp204 + _tmp143 * _tmp203 +
                                      _tmp144 * _tmp146 * _tmp197 - _tmp149 * _tmp202) -
                           _tmp124 * (-_tmp120 * _tmp130 + _tmp122 * _tmp144 * _tmp198 +
                                      _tmp144 * _tmp208 - _tmp207 * _tmp57));
  _res(2, 1) =
      -_tmp185 * (-_tmp100 * _tmp214 - _tmp110 * _tmp218 + _tmp123 * _tmp208 + _tmp181 * _tmp217 +
                  _tmp182 * _tmp213 + _tmp186 * _tmp197 + _tmp188 * _tmp198 + _tmp219 * _tmp60);
  _res(3, 1) = -_tmp192 * (-_tmp123 * _tmp207 + _tmp190 * _tmp212 + _tmp191 * _tmp216 -
                           _tmp193 * _tmp202 - _tmp194 * _tmp202 - _tmp219);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
