// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl18
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl18(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 569

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (186)
  const Scalar _tmp0 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp6 = 2 * _tmp0;
  const Scalar _tmp7 = _tmp5 * _tmp6;
  const Scalar _tmp8 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                       _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = 2 * _tmp2;
  const Scalar _tmp10 = _tmp8 * _tmp9;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp7;
  const Scalar _tmp12 = _tmp5 * _tmp9;
  const Scalar _tmp13 = _tmp6 * _tmp8;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp4;
  const Scalar _tmp17 = _tmp16 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp20 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp20 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp22 = _tmp0 * _tmp9;
  const Scalar _tmp23 = 2 * _tmp5 * _tmp8;
  const Scalar _tmp24 =
      -Scalar(0.010999999999999999) * _tmp22 + Scalar(0.010999999999999999) * _tmp23;
  const Scalar _tmp25 = _tmp21 + _tmp24;
  const Scalar _tmp26 = _tmp19 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = _tmp18 + _tmp28;
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp31 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp32 = -_tmp31;
  const Scalar _tmp33 =
      -Scalar(0.010999999999999999) * _tmp20 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp34 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp7;
  const Scalar _tmp35 = _tmp33 + _tmp34;
  const Scalar _tmp36 = _tmp32 + _tmp35;
  const Scalar _tmp37 = _tmp11 - _tmp14;
  const Scalar _tmp38 = _tmp37 + _tmp4;
  const Scalar _tmp39 = _tmp38 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp40 = -_tmp21 + _tmp24;
  const Scalar _tmp41 = _tmp19 + _tmp40;
  const Scalar _tmp42 = _tmp41 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp43 = std::pow(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp42, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp44 = _tmp39 * _tmp43;
  const Scalar _tmp45 = _tmp32 + _tmp33 - _tmp34;
  const Scalar _tmp46 = _tmp44 * _tmp45;
  const Scalar _tmp47 = -_tmp36 * _tmp44 + _tmp46;
  const Scalar _tmp48 = _tmp42 * _tmp43;
  const Scalar _tmp49 = -_tmp4;
  const Scalar _tmp50 = _tmp37 + _tmp49;
  const Scalar _tmp51 = _tmp50 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp52 = Scalar(1.0) / (_tmp51);
  const Scalar _tmp53 = -_tmp19;
  const Scalar _tmp54 = _tmp40 + _tmp53;
  const Scalar _tmp55 = _tmp54 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp56 = _tmp52 * _tmp55;
  const Scalar _tmp57 = Scalar(1.0) / (_tmp44 * _tmp56 - _tmp48);
  const Scalar _tmp58 = _tmp27 * _tmp30;
  const Scalar _tmp59 = _tmp30 * _tmp56;
  const Scalar _tmp60 = _tmp17 * _tmp59 - _tmp58;
  const Scalar _tmp61 = _tmp57 * _tmp60;
  const Scalar _tmp62 = _tmp30 * _tmp45;
  const Scalar _tmp63 = _tmp17 * _tmp62;
  const Scalar _tmp64 = _tmp31 + _tmp35;
  const Scalar _tmp65 = _tmp30 * _tmp64;
  const Scalar _tmp66 = _tmp36 * _tmp48 - _tmp46 * _tmp56;
  const Scalar _tmp67 = Scalar(1.0) * _tmp54;
  const Scalar _tmp68 = Scalar(1.0) * _tmp50;
  const Scalar _tmp69 = (-_tmp38 + _tmp68) / (_tmp41 - _tmp67);
  const Scalar _tmp70 = -_tmp17 * _tmp65 - _tmp47 * _tmp61 + _tmp63 -
                        _tmp69 * (-_tmp56 * _tmp63 + _tmp58 * _tmp64 - _tmp61 * _tmp66);
  const Scalar _tmp71 = Scalar(1.0) / (_tmp70);
  const Scalar _tmp72 =
      std::sqrt(Scalar(std::pow(_tmp51, Scalar(2)) + std::pow(_tmp55, Scalar(2))));
  const Scalar _tmp73 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp74 = _tmp52 * _tmp72;
  const Scalar _tmp75 = _tmp74 * (_tmp50 * _tmp55 * _tmp73 - _tmp51 * _tmp54 * _tmp73);
  const Scalar _tmp76 = -_tmp38 * _tmp48 + _tmp41 * _tmp44 + _tmp44 * _tmp75;
  const Scalar _tmp77 = _tmp26 * _tmp30;
  const Scalar _tmp78 = _tmp16 * _tmp30;
  const Scalar _tmp79 = _tmp17 * _tmp30;
  const Scalar _tmp80 = _tmp17 * _tmp77 - _tmp27 * _tmp78 - _tmp61 * _tmp76 + _tmp75 * _tmp79;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp80);
  const Scalar _tmp82 = Scalar(1.0) * _tmp57;
  const Scalar _tmp83 = -_tmp47 * _tmp82 + _tmp66 * _tmp69 * _tmp82;
  const Scalar _tmp84 = _tmp71 * _tmp83;
  const Scalar _tmp85 = -_tmp76 * _tmp82 - _tmp80 * _tmp84;
  const Scalar _tmp86 = _tmp81 * _tmp85;
  const Scalar _tmp87 = _tmp70 * _tmp86 + _tmp83;
  const Scalar _tmp88 = _tmp71 * _tmp87;
  const Scalar _tmp89 = _tmp30 * _tmp88;
  const Scalar _tmp90 = -_tmp60 * _tmp88 + Scalar(1.0);
  const Scalar _tmp91 = _tmp44 * _tmp57;
  const Scalar _tmp92 = _tmp15 + _tmp49;
  const Scalar _tmp93 = _tmp92 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp94 = _tmp25 + _tmp53;
  const Scalar _tmp95 = _tmp94 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp96 = std::pow(Scalar(std::pow(_tmp93, Scalar(2)) + std::pow(_tmp95, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp97 = _tmp95 * _tmp96;
  const Scalar _tmp98 = _tmp97 * fh1;
  const Scalar _tmp99 = _tmp74 * _tmp98;
  const Scalar _tmp100 = _tmp81 * _tmp82;
  const Scalar _tmp101 = _tmp100 * _tmp44;
  const Scalar _tmp102 = Scalar(1.0) * _tmp81;
  const Scalar _tmp103 = _tmp102 * _tmp30;
  const Scalar _tmp104 = _tmp93 * _tmp96;
  const Scalar _tmp105 = fh1 * (-_tmp104 * _tmp94 + _tmp92 * _tmp97);
  const Scalar _tmp106 = _tmp105 * _tmp74;
  const Scalar _tmp107 = _tmp56 * _tmp57;
  const Scalar _tmp108 = _tmp45 * _tmp56;
  const Scalar _tmp109 = _tmp107 * _tmp47 - _tmp45 - _tmp69 * (_tmp107 * _tmp66 + _tmp108);
  const Scalar _tmp110 = _tmp109 * _tmp71;
  const Scalar _tmp111 = _tmp107 * _tmp76 - _tmp110 * _tmp80 - _tmp75;
  const Scalar _tmp112 = _tmp111 * _tmp81;
  const Scalar _tmp113 = _tmp109 + _tmp112 * _tmp70;
  const Scalar _tmp114 = _tmp113 * _tmp71;
  const Scalar _tmp115 = -_tmp114 * _tmp60 - _tmp56;
  const Scalar _tmp116 = _tmp114 * _tmp30;
  const Scalar _tmp117 = _tmp104 * fh1;
  const Scalar _tmp118 = _tmp117 * _tmp74;
  const Scalar _tmp119 = _tmp67 * _tmp69 + _tmp68;
  const Scalar _tmp120 = 0;
  const Scalar _tmp121 = _tmp60 * _tmp71;
  const Scalar _tmp122 = _tmp120 * _tmp71;
  const Scalar _tmp123 = _tmp122 * _tmp30;
  const Scalar _tmp124 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp125 = _tmp124 * _tmp74;
  const Scalar _tmp126 = std::exp(_tmp106 * (-_tmp101 * _tmp60 + _tmp103 * _tmp17) +
                                  _tmp118 * (_tmp115 * _tmp91 + _tmp116 * _tmp17 + Scalar(1.0)) +
                                  _tmp125 * (-_tmp120 * _tmp121 * _tmp91 + _tmp123 * _tmp17) +
                                  _tmp99 * (_tmp17 * _tmp89 + _tmp90 * _tmp91));
  const Scalar _tmp127 = std::pow(_tmp29, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp128 = _tmp127 * _tmp17 * _tmp27;
  const Scalar _tmp129 = _tmp127 * _tmp18;
  const Scalar _tmp130 = -_tmp128 + _tmp129 * _tmp56 - _tmp59;
  const Scalar _tmp131 = _tmp130 * _tmp57;
  const Scalar _tmp132 = _tmp129 * _tmp45;
  const Scalar _tmp133 = _tmp128 * _tmp64;
  const Scalar _tmp134 =
      -_tmp129 * _tmp64 - _tmp131 * _tmp47 + _tmp132 - _tmp62 + _tmp65 -
      _tmp69 * (-_tmp131 * _tmp66 - _tmp132 * _tmp56 + _tmp133 + _tmp56 * _tmp62);
  const Scalar _tmp135 = std::pow(_tmp70, Scalar(-2));
  const Scalar _tmp136 = _tmp134 * _tmp135;
  const Scalar _tmp137 = _tmp136 * _tmp79;
  const Scalar _tmp138 = _tmp136 * _tmp80;
  const Scalar _tmp139 = -_tmp128 * _tmp16 + _tmp129 * _tmp26 + _tmp129 * _tmp75 -
                         _tmp131 * _tmp76 - _tmp30 * _tmp75 - _tmp77;
  const Scalar _tmp140 = _tmp70 * _tmp81;
  const Scalar _tmp141 = std::pow(_tmp80, Scalar(-2));
  const Scalar _tmp142 = _tmp141 * _tmp70;
  const Scalar _tmp143 = _tmp139 * _tmp142;
  const Scalar _tmp144 =
      -_tmp111 * _tmp143 + _tmp112 * _tmp134 + _tmp140 * (_tmp109 * _tmp138 - _tmp110 * _tmp139);
  const Scalar _tmp145 = _tmp71 * _tmp79;
  const Scalar _tmp146 = _tmp113 * _tmp60;
  const Scalar _tmp147 = -_tmp114 * _tmp130 - _tmp121 * _tmp144 + _tmp136 * _tmp146;
  const Scalar _tmp148 = _tmp120 * _tmp44 * _tmp61;
  const Scalar _tmp149 = _tmp131 * _tmp44;
  const Scalar _tmp150 =
      _tmp134 * _tmp86 + _tmp140 * (_tmp138 * _tmp83 - _tmp139 * _tmp84) - _tmp143 * _tmp85;
  const Scalar _tmp151 = _tmp60 * _tmp87;
  const Scalar _tmp152 = -_tmp121 * _tmp150 - _tmp130 * _tmp88 + _tmp136 * _tmp151;
  const Scalar _tmp153 = Scalar(1.0) * _tmp141;
  const Scalar _tmp154 = _tmp139 * _tmp153;
  const Scalar _tmp155 = _tmp141 * _tmp60 * _tmp82;
  const Scalar _tmp156 = _tmp155 * _tmp44;
  const Scalar _tmp157 = _tmp117 * _tmp57;
  const Scalar _tmp158 = _tmp57 * _tmp98;
  const Scalar _tmp159 = _tmp100 * _tmp105;
  const Scalar _tmp160 = _tmp120 * _tmp124;
  const Scalar _tmp161 = std::exp(-_tmp115 * _tmp157 + _tmp121 * _tmp160 * _tmp57 -
                                  _tmp158 * _tmp90 + _tmp159 * _tmp60);
  const Scalar _tmp162 = _tmp122 * _tmp124;
  const Scalar _tmp163 = _tmp136 * _tmp160;
  const Scalar _tmp164 = _tmp102 * _tmp105;
  const Scalar _tmp165 = _tmp105 * _tmp155;
  const Scalar _tmp166 = std::exp(-_tmp114 * _tmp117 - _tmp162 - _tmp164 - _tmp88 * _tmp98);
  const Scalar _tmp167 = _tmp117 * _tmp71;
  const Scalar _tmp168 = _tmp113 * _tmp117;
  const Scalar _tmp169 = _tmp87 * _tmp98;
  const Scalar _tmp170 = _tmp127 * _tmp28;
  const Scalar _tmp171 = _tmp128 * _tmp56 - _tmp170 + _tmp30;
  const Scalar _tmp172 = _tmp171 * _tmp57;
  const Scalar _tmp173 =
      _tmp128 * _tmp45 - _tmp133 - _tmp172 * _tmp47 -
      _tmp69 * (-_tmp108 * _tmp128 + _tmp170 * _tmp64 - _tmp172 * _tmp66 - _tmp65);
  const Scalar _tmp174 = _tmp135 * _tmp173;
  const Scalar _tmp175 = _tmp174 * _tmp79;
  const Scalar _tmp176 =
      _tmp128 * _tmp26 + _tmp128 * _tmp75 - _tmp16 * _tmp170 - _tmp172 * _tmp76 + _tmp78;
  const Scalar _tmp177 = _tmp153 * _tmp176;
  const Scalar _tmp178 = _tmp142 * _tmp176;
  const Scalar _tmp179 = _tmp174 * _tmp80;
  const Scalar _tmp180 =
      -_tmp111 * _tmp178 + _tmp112 * _tmp173 + _tmp140 * (_tmp109 * _tmp179 - _tmp110 * _tmp176);
  const Scalar _tmp181 = -_tmp114 * _tmp171 - _tmp121 * _tmp180 + _tmp146 * _tmp174;
  const Scalar _tmp182 =
      _tmp140 * (-_tmp176 * _tmp84 + _tmp179 * _tmp83) + _tmp173 * _tmp86 - _tmp178 * _tmp85;
  const Scalar _tmp183 = -_tmp121 * _tmp182 + _tmp151 * _tmp174 - _tmp171 * _tmp88;
  const Scalar _tmp184 = _tmp182 * _tmp71;
  const Scalar _tmp185 = _tmp160 * _tmp174;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp126 * (-_tmp106 * (_tmp102 * _tmp129 - _tmp102 * _tmp149 - _tmp103 +
                                       _tmp139 * _tmp156 - _tmp154 * _tmp79) -
                           _tmp118 * (-_tmp113 * _tmp137 + _tmp114 * _tmp129 - _tmp116 +
                                      _tmp144 * _tmp145 + _tmp147 * _tmp91) -
                           _tmp125 * (-_tmp120 * _tmp137 + _tmp122 * _tmp129 - _tmp122 * _tmp149 -
                                      _tmp123 + _tmp136 * _tmp148) -
                           _tmp99 * (_tmp129 * _tmp88 - _tmp137 * _tmp87 + _tmp145 * _tmp150 +
                                     _tmp152 * _tmp91 - _tmp89));
  _res(2, 0) = -_tmp161 * (-_tmp131 * _tmp162 - _tmp131 * _tmp164 + _tmp139 * _tmp165 +
                           _tmp147 * _tmp157 + _tmp152 * _tmp158 + _tmp163 * _tmp61);
  _res(3, 0) = -_tmp166 * (-_tmp105 * _tmp154 - _tmp136 * _tmp168 - _tmp136 * _tmp169 +
                           _tmp144 * _tmp167 + _tmp150 * _tmp71 * _tmp98 - _tmp163);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp126 *
      (-_tmp106 * (-_tmp101 * _tmp171 + _tmp102 * _tmp128 + _tmp156 * _tmp176 - _tmp177 * _tmp79) -
       _tmp118 * (-_tmp113 * _tmp175 + _tmp114 * _tmp128 + _tmp145 * _tmp180 + _tmp181 * _tmp91) -
       _tmp125 * (-_tmp120 * _tmp175 + _tmp122 * _tmp128 - _tmp122 * _tmp172 * _tmp44 +
                  _tmp148 * _tmp174) -
       _tmp99 * (_tmp128 * _tmp88 - _tmp175 * _tmp87 + _tmp183 * _tmp91 + _tmp184 * _tmp79));
  _res(2, 1) = -_tmp161 * (_tmp157 * _tmp181 + _tmp158 * _tmp183 - _tmp159 * _tmp171 -
                           _tmp162 * _tmp172 + _tmp165 * _tmp176 + _tmp185 * _tmp61);
  _res(3, 1) = -_tmp166 * (-_tmp105 * _tmp177 + _tmp167 * _tmp180 - _tmp168 * _tmp174 -
                           _tmp169 * _tmp174 + _tmp184 * _tmp98 - _tmp185);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
