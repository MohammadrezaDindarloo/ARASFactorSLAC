// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pd_Nl19
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPdNl19(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 351

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (133)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp2 * _tmp6;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp0 * _tmp8;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp7 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp0;
  const Scalar _tmp12 = _tmp11 * _tmp6;
  const Scalar _tmp13 = _tmp2 * _tmp8;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp10 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = _tmp16 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = _tmp10 - _tmp14;
  const Scalar _tmp19 = _tmp18 + _tmp4;
  const Scalar _tmp20 = _tmp19 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp22 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp24 = _tmp11 * _tmp2;
  const Scalar _tmp25 = _tmp6 * _tmp8;
  const Scalar _tmp26 =
      -Scalar(0.010999999999999999) * _tmp24 + Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -_tmp23 + _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp27;
  const Scalar _tmp29 = _tmp28 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = std::pow(Scalar(std::pow(_tmp20, Scalar(2)) + std::pow(_tmp29, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp31 = _tmp20 * _tmp30;
  const Scalar _tmp32 = Scalar(0.20999999999999999) * _tmp7 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp33 = -Scalar(0.010999999999999999) * _tmp1 -
                        Scalar(0.010999999999999999) * _tmp22 + Scalar(-0.010999999999999999);
  const Scalar _tmp34 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp35 = _tmp33 - _tmp34;
  const Scalar _tmp36 = _tmp32 + _tmp35;
  const Scalar _tmp37 = _tmp29 * _tmp30;
  const Scalar _tmp38 = _tmp32 + _tmp33 + _tmp34;
  const Scalar _tmp39 = _tmp23 + _tmp26;
  const Scalar _tmp40 = _tmp21 + _tmp39;
  const Scalar _tmp41 = _tmp40 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp42 = _tmp15 + _tmp4;
  const Scalar _tmp43 = _tmp42 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp44 = std::pow(Scalar(std::pow(_tmp41, Scalar(2)) + std::pow(_tmp43, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp45 = _tmp41 * _tmp44;
  const Scalar _tmp46 = _tmp18 + _tmp5;
  const Scalar _tmp47 = _tmp46 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp48 = Scalar(1.0) / (_tmp47);
  const Scalar _tmp49 = -_tmp21;
  const Scalar _tmp50 = _tmp27 + _tmp49;
  const Scalar _tmp51 = _tmp50 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp52 = _tmp48 * _tmp51;
  const Scalar _tmp53 = -_tmp32 + _tmp35;
  const Scalar _tmp54 = _tmp43 * _tmp44;
  const Scalar _tmp55 = _tmp53 * _tmp54;
  const Scalar _tmp56 = _tmp38 * _tmp45 - _tmp52 * _tmp55;
  const Scalar _tmp57 = _tmp31 * _tmp52 - _tmp37;
  const Scalar _tmp58 = Scalar(1.0) / (-_tmp45 + _tmp52 * _tmp54);
  const Scalar _tmp59 = _tmp57 * _tmp58;
  const Scalar _tmp60 = _tmp31 * _tmp53;
  const Scalar _tmp61 = Scalar(1.0) * _tmp46;
  const Scalar _tmp62 = Scalar(1.0) * _tmp50;
  const Scalar _tmp63 = (-_tmp42 + _tmp61) / (_tmp40 - _tmp62);
  const Scalar _tmp64 = -_tmp38 * _tmp54 + _tmp55;
  const Scalar _tmp65 = -_tmp31 * _tmp36 - _tmp59 * _tmp64 + _tmp60 -
                        _tmp63 * (_tmp36 * _tmp37 - _tmp52 * _tmp60 - _tmp56 * _tmp59);
  const Scalar _tmp66 = Scalar(1.0) / (_tmp65);
  const Scalar _tmp67 =
      std::sqrt(Scalar(std::pow(_tmp47, Scalar(2)) + std::pow(_tmp51, Scalar(2))));
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp48 * _tmp67;
  const Scalar _tmp70 = _tmp69 * (_tmp46 * _tmp51 * _tmp68 - _tmp47 * _tmp50 * _tmp68);
  const Scalar _tmp71 = _tmp40 * _tmp54 - _tmp42 * _tmp45 + _tmp54 * _tmp70;
  const Scalar _tmp72 = _tmp52 * _tmp58;
  const Scalar _tmp73 = -_tmp53 - _tmp63 * (_tmp52 * _tmp53 + _tmp56 * _tmp72) + _tmp64 * _tmp72;
  const Scalar _tmp74 = -_tmp19 * _tmp37 + _tmp28 * _tmp31 + _tmp31 * _tmp70 - _tmp59 * _tmp71;
  const Scalar _tmp75 = _tmp66 * _tmp74;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp74);
  const Scalar _tmp77 = _tmp65 * _tmp76;
  const Scalar _tmp78 = _tmp73 + _tmp77 * (-_tmp70 + _tmp71 * _tmp72 - _tmp73 * _tmp75);
  const Scalar _tmp79 = _tmp66 * _tmp78;
  const Scalar _tmp80 = _tmp57 * _tmp66;
  const Scalar _tmp81 = _tmp58 * (-_tmp52 - _tmp78 * _tmp80);
  const Scalar _tmp82 = _tmp31 * _tmp79 + _tmp54 * _tmp81 + Scalar(1.0);
  const Scalar _tmp83 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp84 = _tmp39 + _tmp49;
  const Scalar _tmp85 = _tmp84 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp86 = std::pow(_tmp85, Scalar(2));
  const Scalar _tmp87 = _tmp83 + _tmp86;
  const Scalar _tmp88 = std::pow(_tmp87, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp89 = _tmp88 * fh1;
  const Scalar _tmp90 = _tmp69 * _tmp89;
  const Scalar _tmp91 = _tmp82 * _tmp90;
  const Scalar _tmp92 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp93 = _tmp61 + _tmp62 * _tmp63;
  const Scalar _tmp94 = 0;
  const Scalar _tmp95 = _tmp54 * _tmp59;
  const Scalar _tmp96 = _tmp16 * _tmp88;
  const Scalar _tmp97 = _tmp84 * _tmp88;
  const Scalar _tmp98 = -_tmp17 * _tmp97 + _tmp85 * _tmp96;
  const Scalar _tmp99 = Scalar(1.0) * _tmp76;
  const Scalar _tmp100 = _tmp69 * (_tmp31 * _tmp99 - _tmp95 * _tmp99);
  const Scalar _tmp101 = _tmp100 * fh1;
  const Scalar _tmp102 = Scalar(1.0) * _tmp58;
  const Scalar _tmp103 = _tmp102 * _tmp56 * _tmp63 - _tmp102 * _tmp64;
  const Scalar _tmp104 = _tmp103 + _tmp77 * (-_tmp102 * _tmp71 - _tmp103 * _tmp75);
  const Scalar _tmp105 = _tmp58 * (-_tmp104 * _tmp80 + Scalar(1.0));
  const Scalar _tmp106 = _tmp104 * _tmp66;
  const Scalar _tmp107 = _tmp105 * _tmp54 + _tmp106 * _tmp31;
  const Scalar _tmp108 = _tmp107 * _tmp90;
  const Scalar _tmp109 = std::exp(_tmp101 * _tmp98 + _tmp108 * _tmp85 + _tmp17 * _tmp91 +
                                  _tmp69 * _tmp92 * (_tmp31 * _tmp94 - _tmp94 * _tmp95));
  const Scalar _tmp110 = std::pow(_tmp87, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp111 = _tmp110 * fh1;
  const Scalar _tmp112 = _tmp111 * _tmp83;
  const Scalar _tmp113 = _tmp69 * _tmp82;
  const Scalar _tmp114 = _tmp17 * _tmp85;
  const Scalar _tmp115 = _tmp111 * _tmp114;
  const Scalar _tmp116 = _tmp107 * _tmp69;
  const Scalar _tmp117 = _tmp110 * _tmp84;
  const Scalar _tmp118 = _tmp110 * _tmp16;
  const Scalar _tmp119 = fh1 * (_tmp114 * _tmp118 - _tmp117 * _tmp83 + _tmp97);
  const Scalar _tmp120 = _tmp105 * _tmp89;
  const Scalar _tmp121 = _tmp99 * fh1;
  const Scalar _tmp122 = _tmp121 * _tmp98;
  const Scalar _tmp123 = _tmp81 * _tmp89;
  const Scalar _tmp124 = _tmp92 * _tmp94;
  const Scalar _tmp125 =
      std::exp(-_tmp120 * _tmp85 + _tmp122 * _tmp59 - _tmp123 * _tmp17 + _tmp124 * _tmp59);
  const Scalar _tmp126 = _tmp119 * _tmp99;
  const Scalar _tmp127 = _tmp106 * _tmp89;
  const Scalar _tmp128 = _tmp79 * _tmp89;
  const Scalar _tmp129 = std::exp(-_tmp122 - _tmp124 - _tmp127 * _tmp85 - _tmp128 * _tmp17);
  const Scalar _tmp130 = -_tmp114 * _tmp117 + _tmp118 * _tmp86 - _tmp96;
  const Scalar _tmp131 = _tmp111 * _tmp86;
  const Scalar _tmp132 = _tmp121 * _tmp130;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp109 * (-_tmp100 * _tmp119 - _tmp112 * _tmp113 - _tmp115 * _tmp116 + _tmp91);
  _res(2, 0) = -_tmp125 * (_tmp105 * _tmp115 + _tmp112 * _tmp81 - _tmp123 - _tmp126 * _tmp59);
  _res(3, 0) = -_tmp129 * (_tmp106 * _tmp115 + _tmp112 * _tmp79 + _tmp126 - _tmp128);
  _res(0, 1) = 0;
  _res(1, 1) = -_tmp109 * (-_tmp101 * _tmp130 + _tmp108 - _tmp113 * _tmp115 - _tmp116 * _tmp131);
  _res(2, 1) = -_tmp125 * (_tmp105 * _tmp131 + _tmp115 * _tmp81 - _tmp120 - _tmp132 * _tmp59);
  _res(3, 1) = -_tmp129 * (_tmp106 * _tmp131 + _tmp115 * _tmp79 - _tmp127 + _tmp132);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
