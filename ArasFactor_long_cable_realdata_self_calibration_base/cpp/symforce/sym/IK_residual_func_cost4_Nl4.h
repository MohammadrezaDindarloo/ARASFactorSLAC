// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost4_Nl4
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost4Nl4(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 473

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (156)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp3 = 2 * _tmp1 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 2 * _tmp4;
  const Scalar _tmp10 = _tmp1 * _tmp9;
  const Scalar _tmp11 = _tmp2 * _tmp5;
  const Scalar _tmp12 = _tmp10 - _tmp11;
  const Scalar _tmp13 = -Scalar(0.010999999999999999) * _tmp12;
  const Scalar _tmp14 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp15 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp16 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp17 = _tmp13 - _tmp16;
  const Scalar _tmp18 = _tmp17 + _tmp8;
  const Scalar _tmp19 = _tmp18 + position_vector(1, 0);
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = _tmp2 * _tmp9;
  const Scalar _tmp23 = _tmp1 * _tmp5;
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = -Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp27 = Scalar(0.20999999999999999) * _tmp15 + Scalar(0.20999999999999999) * _tmp26;
  const Scalar _tmp28 = _tmp25 - _tmp27;
  const Scalar _tmp29 = _tmp21 + _tmp28;
  const Scalar _tmp30 = _tmp29 + position_vector(0, 0);
  const Scalar _tmp31 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp32 = Scalar(1.4083112389913199) * fh1;
  const Scalar _tmp33 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp34 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp11;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = -Scalar(0.010999999999999999) * _tmp14 -
                        Scalar(0.010999999999999999) * _tmp26 + Scalar(-0.010999999999999999);
  const Scalar _tmp37 = Scalar(0.20999999999999999) * _tmp22 - Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp35 + _tmp38;
  const Scalar _tmp40 = _tmp25 + _tmp27;
  const Scalar _tmp41 = _tmp21 + _tmp40;
  const Scalar _tmp42 = _tmp41 + position_vector(0, 0);
  const Scalar _tmp43 = _tmp42 - p_b(0, 0);
  const Scalar _tmp44 = _tmp17 + _tmp7;
  const Scalar _tmp45 = _tmp44 + position_vector(1, 0);
  const Scalar _tmp46 = _tmp45 - p_b(1, 0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp43, Scalar(2)) + std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp46 * _tmp47;
  const Scalar _tmp49 = _tmp36 - _tmp37;
  const Scalar _tmp50 = _tmp34 + _tmp49;
  const Scalar _tmp51 = _tmp20 + _tmp28;
  const Scalar _tmp52 = _tmp51 + position_vector(0, 0);
  const Scalar _tmp53 = _tmp52 - p_d(0, 0);
  const Scalar _tmp54 = Scalar(1.0) / (_tmp53);
  const Scalar _tmp55 = _tmp13 + _tmp16;
  const Scalar _tmp56 = _tmp55 + _tmp8;
  const Scalar _tmp57 = _tmp56 + position_vector(1, 0);
  const Scalar _tmp58 = _tmp57 - p_d(1, 0);
  const Scalar _tmp59 = _tmp54 * _tmp58;
  const Scalar _tmp60 = _tmp50 * _tmp59;
  const Scalar _tmp61 = _tmp43 * _tmp47;
  const Scalar _tmp62 = _tmp39 * _tmp48 - _tmp60 * _tmp61;
  const Scalar _tmp63 = Scalar(1.0) / (-_tmp48 + _tmp59 * _tmp61);
  const Scalar _tmp64 = _tmp20 + _tmp40;
  const Scalar _tmp65 = _tmp64 + position_vector(0, 0);
  const Scalar _tmp66 = _tmp65 - p_c(0, 0);
  const Scalar _tmp67 = _tmp55 + _tmp7;
  const Scalar _tmp68 = _tmp67 + position_vector(1, 0);
  const Scalar _tmp69 = _tmp68 - p_c(1, 0);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp66, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp66 * _tmp70;
  const Scalar _tmp72 = _tmp69 * _tmp70;
  const Scalar _tmp73 = _tmp59 * _tmp71 - _tmp72;
  const Scalar _tmp74 = _tmp63 * _tmp73;
  const Scalar _tmp75 = _tmp50 * _tmp71;
  const Scalar _tmp76 = _tmp34 + _tmp38;
  const Scalar _tmp77 = -_tmp59 * _tmp75 - _tmp62 * _tmp74 + _tmp72 * _tmp76;
  const Scalar _tmp78 = Scalar(1.0) * _tmp51;
  const Scalar _tmp79 = Scalar(1.0) * _tmp56;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp44 + _tmp80);
  const Scalar _tmp82 = _tmp81 * (-_tmp41 + _tmp78);
  const Scalar _tmp83 = -_tmp39 * _tmp61 + _tmp50 * _tmp61;
  const Scalar _tmp84 = -_tmp71 * _tmp76 - _tmp74 * _tmp83 + _tmp75 - _tmp77 * _tmp82;
  const Scalar _tmp85 = Scalar(1.0) / (_tmp84);
  const Scalar _tmp86 = _tmp78 + _tmp79 * _tmp82;
  const Scalar _tmp87 = 0;
  const Scalar _tmp88 = _tmp61 * _tmp74;
  const Scalar _tmp89 =
      std::sqrt(Scalar(std::pow(_tmp53, Scalar(2)) + std::pow(_tmp58, Scalar(2))));
  const Scalar _tmp90 = _tmp54 * _tmp89;
  const Scalar _tmp91 = Scalar(1.0) * _tmp63;
  const Scalar _tmp92 = _tmp62 * _tmp91;
  const Scalar _tmp93 = _tmp82 * _tmp92 - _tmp83 * _tmp91;
  const Scalar _tmp94 = Scalar(1.0) / (_tmp89);
  const Scalar _tmp95 = _tmp90 * (_tmp51 * _tmp58 * _tmp94 - _tmp53 * _tmp56 * _tmp94);
  const Scalar _tmp96 = -_tmp41 * _tmp48 + _tmp44 * _tmp61 + _tmp61 * _tmp95;
  const Scalar _tmp97 = -_tmp64 * _tmp72 + _tmp67 * _tmp71 + _tmp71 * _tmp95 - _tmp74 * _tmp96;
  const Scalar _tmp98 = _tmp85 * _tmp97;
  const Scalar _tmp99 = Scalar(1.0) / (_tmp97);
  const Scalar _tmp100 = _tmp84 * _tmp99;
  const Scalar _tmp101 = _tmp100 * (-_tmp91 * _tmp96 - _tmp93 * _tmp98);
  const Scalar _tmp102 = _tmp101 + _tmp93;
  const Scalar _tmp103 = _tmp73 * _tmp85;
  const Scalar _tmp104 = -_tmp102 * _tmp103 + Scalar(1.0);
  const Scalar _tmp105 = _tmp61 * _tmp63;
  const Scalar _tmp106 = _tmp71 * _tmp85;
  const Scalar _tmp107 = _tmp30 - p_a(0, 0);
  const Scalar _tmp108 = _tmp19 - p_a(1, 0);
  const Scalar _tmp109 =
      std::pow(Scalar(std::pow(_tmp107, Scalar(2)) + std::pow(_tmp108, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp110 = _tmp108 * _tmp109;
  const Scalar _tmp111 = _tmp110 * fh1;
  const Scalar _tmp112 = _tmp59 * _tmp63;
  const Scalar _tmp113 = _tmp112 * _tmp62 + _tmp60;
  const Scalar _tmp114 = _tmp112 * _tmp83 - _tmp113 * _tmp82 - _tmp50;
  const Scalar _tmp115 = _tmp100 * (_tmp112 * _tmp96 - _tmp114 * _tmp98 - _tmp95);
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = -_tmp103 * _tmp116 - _tmp59;
  const Scalar _tmp118 = _tmp107 * _tmp109;
  const Scalar _tmp119 = _tmp118 * fh1;
  const Scalar _tmp120 = Scalar(1.0) * _tmp99;
  const Scalar _tmp121 = fh1 * (_tmp110 * _tmp29 - _tmp118 * _tmp18);
  const Scalar _tmp122 = -_tmp111 * _tmp90 * (_tmp102 * _tmp106 + _tmp104 * _tmp105) -
                         _tmp119 * _tmp90 * (_tmp105 * _tmp117 + _tmp106 * _tmp116 + Scalar(1.0)) -
                         _tmp121 * _tmp90 * (_tmp120 * _tmp71 - _tmp120 * _tmp88) -
                         _tmp33 * _tmp90 * (_tmp71 * _tmp87 - _tmp87 * _tmp88);
  const Scalar _tmp123 = Scalar(1.0) / (_tmp122);
  const Scalar _tmp124 = fh1 * (_tmp35 + _tmp49);
  const Scalar _tmp125 = -_tmp110 * _tmp124 - Scalar(40.024799999999999) * _tmp12 - _tmp18 * fv1;
  const Scalar _tmp126 = _tmp67 + _tmp80;
  const Scalar _tmp127 = _tmp126 * _tmp82;
  const Scalar _tmp128 = Scalar(1.0) / (-_tmp127 - _tmp64 + _tmp78);
  const Scalar _tmp129 = Scalar(1.0) * _tmp128;
  const Scalar _tmp130 = _tmp127 * _tmp129 + Scalar(1.0);
  const Scalar _tmp131 = Scalar(1.0) * _tmp81;
  const Scalar _tmp132 = _tmp129 * _tmp82;
  const Scalar _tmp133 = _tmp77 * _tmp85;
  const Scalar _tmp134 = _tmp126 * _tmp128;
  const Scalar _tmp135 = _tmp101 * _tmp134 - _tmp102 * _tmp133 - _tmp92;
  const Scalar _tmp136 = _tmp118 * _tmp124 + Scalar(40.024799999999999) * _tmp24 + _tmp29 * fv1;
  const Scalar _tmp137 = _tmp126 * _tmp81;
  const Scalar _tmp138 = _tmp113 + _tmp115 * _tmp134 - _tmp116 * _tmp133;
  const Scalar _tmp139 = _tmp100 * _tmp129;
  const Scalar _tmp140 = -_tmp120 * _tmp77 + _tmp126 * _tmp139;
  const Scalar _tmp141 = _tmp128 * _tmp86;
  const Scalar _tmp142 = -_tmp126 * _tmp141 - _tmp77 * _tmp87 + _tmp80;
  const Scalar _tmp143 = std::asinh(
      _tmp123 * (Scalar(1.0) * _tmp111 * (_tmp101 * _tmp129 - _tmp131 * _tmp135) +
                 Scalar(1.0) * _tmp119 * (_tmp115 * _tmp129 - _tmp131 * _tmp138) +
                 Scalar(1.0) * _tmp121 * (-_tmp131 * _tmp140 + _tmp139) +
                 Scalar(1.0) * _tmp125 * (-_tmp130 * _tmp131 + _tmp132) +
                 Scalar(1.0) * _tmp136 * (_tmp129 * _tmp137 - _tmp129) +
                 Scalar(1.0) * _tmp33 * (-_tmp129 * _tmp86 - _tmp131 * _tmp142 + Scalar(1.0))));
  const Scalar _tmp144 = Scalar(1.4083112389913199) * _tmp122;
  const Scalar _tmp145 = _tmp33 * _tmp87;
  const Scalar _tmp146 = _tmp120 * _tmp121;
  const Scalar _tmp147 =
      _tmp104 * _tmp111 * _tmp63 + _tmp117 * _tmp119 * _tmp63 - _tmp145 * _tmp74 - _tmp146 * _tmp74;
  const Scalar _tmp148 = Scalar(1.0) / (_tmp147);
  const Scalar _tmp149 = _tmp129 * _tmp136;
  const Scalar _tmp150 =
      std::asinh(_tmp148 * (_tmp111 * _tmp135 * _tmp81 + _tmp119 * _tmp138 * _tmp81 +
                            _tmp121 * _tmp140 * _tmp81 + _tmp125 * _tmp130 * _tmp81 -
                            _tmp137 * _tmp149 + _tmp142 * _tmp33 * _tmp81));
  const Scalar _tmp151 = Scalar(1.4083112389913199) * _tmp147;
  const Scalar _tmp152 =
      _tmp102 * _tmp111 * _tmp85 + _tmp116 * _tmp119 * _tmp85 + _tmp145 + _tmp146;
  const Scalar _tmp153 = Scalar(1.0) / (_tmp152);
  const Scalar _tmp154 =
      std::asinh(_tmp153 * (-_tmp101 * _tmp111 * _tmp128 - _tmp115 * _tmp119 * _tmp128 -
                            _tmp121 * _tmp139 - _tmp125 * _tmp132 + _tmp141 * _tmp33 + _tmp149));
  const Scalar _tmp155 = Scalar(1.4083112389913199) * _tmp152;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp32 * (-std::sinh(Scalar(1.0) * _tmp31) -
                std::sinh(Scalar(0.71007031138673404) * _tmp0 *
                          (-_tmp31 * _tmp32 -
                           std::sqrt(Scalar(std::pow(Scalar(-_tmp19 + p_a(1, 0)), Scalar(2)) +
                                            std::pow(Scalar(-_tmp30 + p_a(0, 0)), Scalar(2))))))) -
      encoder(0, 0);
  _res(1, 0) =
      _tmp144 * (-std::sinh(Scalar(1.0) * _tmp143) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp123 *
                           (-_tmp143 * _tmp144 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp52 + p_d(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp57 + p_d(1, 0)), Scalar(2))))))) -
      encoder(1, 0);
  _res(2, 0) =
      _tmp151 * (-std::sinh(Scalar(1.0) * _tmp150) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp148 *
                           (-_tmp150 * _tmp151 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp42 + p_b(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp45 + p_b(1, 0)), Scalar(2))))))) -
      encoder(2, 0);
  _res(3, 0) =
      _tmp155 * (-std::sinh(Scalar(1.0) * _tmp154) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp153 *
                           (-_tmp154 * _tmp155 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp65 + p_c(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp68 + p_c(1, 0)), Scalar(2))))))) -
      encoder(3, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
