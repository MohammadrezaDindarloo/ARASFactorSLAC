// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pa_Nl13
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPaNl13(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 716

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (238)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp10 = _tmp1 * _tmp5;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp12 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp13 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 - _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp8;
  const Scalar _tmp17 = _tmp16 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp19 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp24 = _tmp2 * _tmp4;
  const Scalar _tmp25 = _tmp0 * _tmp5;
  const Scalar _tmp26 =
      -Scalar(0.010999999999999999) * _tmp24 + Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -_tmp23 + _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp27;
  const Scalar _tmp29 = _tmp28 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = _tmp19 + _tmp30;
  const Scalar _tmp32 = std::sqrt(_tmp31);
  const Scalar _tmp33 = _tmp18 * _tmp32;
  const Scalar _tmp34 = _tmp15 + _tmp7;
  const Scalar _tmp35 = _tmp34 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp36 = std::pow(_tmp35, Scalar(2));
  const Scalar _tmp37 = _tmp23 + _tmp26;
  const Scalar _tmp38 = _tmp21 + _tmp37;
  const Scalar _tmp39 = _tmp38 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp40 = _tmp36 + std::pow(_tmp39, Scalar(2));
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp42 = _tmp39 * _tmp41;
  const Scalar _tmp43 = _tmp18 * _tmp29;
  const Scalar _tmp44 = _tmp35 * _tmp41;
  const Scalar _tmp45 = -_tmp42 + _tmp43 * _tmp44;
  const Scalar _tmp46 = Scalar(1.0) / (_tmp45);
  const Scalar _tmp47 = Scalar(1.0) * _tmp46;
  const Scalar _tmp48 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp49 = -Scalar(0.010999999999999999) * _tmp12 -
                        Scalar(0.010999999999999999) * _tmp22 + Scalar(-0.010999999999999999);
  const Scalar _tmp50 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp51 = _tmp49 - _tmp50;
  const Scalar _tmp52 = _tmp48 + _tmp51;
  const Scalar _tmp53 = -_tmp48;
  const Scalar _tmp54 = _tmp51 + _tmp53;
  const Scalar _tmp55 = _tmp43 * _tmp54;
  const Scalar _tmp56 = _tmp42 * _tmp52 - _tmp44 * _tmp55;
  const Scalar _tmp57 = Scalar(1.0) * _tmp28;
  const Scalar _tmp58 = Scalar(1.0) * _tmp16;
  const Scalar _tmp59 = (-_tmp34 + _tmp58) / (_tmp38 - _tmp57);
  const Scalar _tmp60 = _tmp56 * _tmp59;
  const Scalar _tmp61 = _tmp44 * _tmp54;
  const Scalar _tmp62 = -_tmp44 * _tmp52 + _tmp61;
  const Scalar _tmp63 = _tmp47 * _tmp60 - _tmp47 * _tmp62;
  const Scalar _tmp64 = _tmp49 + _tmp50 + _tmp53;
  const Scalar _tmp65 = _tmp11 + _tmp14;
  const Scalar _tmp66 = _tmp65 + _tmp8;
  const Scalar _tmp67 = _tmp66 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp68 = _tmp20 + _tmp27;
  const Scalar _tmp69 = _tmp68 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp67, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp69 * _tmp70;
  const Scalar _tmp72 = _tmp67 * _tmp70;
  const Scalar _tmp73 = _tmp43 * _tmp72 - _tmp71;
  const Scalar _tmp74 = _tmp46 * _tmp73;
  const Scalar _tmp75 = _tmp54 * _tmp72 -
                        _tmp59 * (-_tmp55 * _tmp72 - _tmp56 * _tmp74 + _tmp64 * _tmp71) -
                        _tmp62 * _tmp74 - _tmp64 * _tmp72;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp75);
  const Scalar _tmp77 = Scalar(1.0) / (_tmp32);
  const Scalar _tmp78 = _tmp28 * _tmp77;
  const Scalar _tmp79 = _tmp16 * _tmp77;
  const Scalar _tmp80 = -_tmp17 * _tmp78 + _tmp29 * _tmp79;
  const Scalar _tmp81 = _tmp33 * _tmp80;
  const Scalar _tmp82 = -_tmp34 * _tmp42 + _tmp38 * _tmp44 + _tmp44 * _tmp81;
  const Scalar _tmp83 = -_tmp66 * _tmp71 + _tmp68 * _tmp72 + _tmp72 * _tmp81 - _tmp74 * _tmp82;
  const Scalar _tmp84 = _tmp76 * _tmp83;
  const Scalar _tmp85 = -_tmp47 * _tmp82 - _tmp63 * _tmp84;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp83);
  const Scalar _tmp87 = _tmp75 * _tmp86;
  const Scalar _tmp88 = _tmp63 + _tmp85 * _tmp87;
  const Scalar _tmp89 = _tmp72 * _tmp76;
  const Scalar _tmp90 = _tmp88 * _tmp89;
  const Scalar _tmp91 = _tmp73 * _tmp76;
  const Scalar _tmp92 = -_tmp88 * _tmp91 + Scalar(1.0);
  const Scalar _tmp93 = _tmp44 * _tmp46;
  const Scalar _tmp94 = _tmp20 + _tmp37;
  const Scalar _tmp95 = _tmp94 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp96 = _tmp65 + _tmp7;
  const Scalar _tmp97 = _tmp96 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp98 = std::pow(Scalar(std::pow(_tmp95, Scalar(2)) + std::pow(_tmp97, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp99 = _tmp95 * _tmp98;
  const Scalar _tmp100 = _tmp99 * fh1;
  const Scalar _tmp101 = _tmp100 * (_tmp90 + _tmp92 * _tmp93);
  const Scalar _tmp102 = _tmp46 * _tmp82;
  const Scalar _tmp103 = _tmp43 * _tmp46;
  const Scalar _tmp104 = _tmp103 * _tmp62 - _tmp54 - _tmp59 * (_tmp103 * _tmp56 + _tmp55);
  const Scalar _tmp105 = _tmp102 * _tmp43 - _tmp104 * _tmp84 - _tmp81;
  const Scalar _tmp106 = _tmp104 + _tmp105 * _tmp87;
  const Scalar _tmp107 = -_tmp106 * _tmp91 - _tmp43;
  const Scalar _tmp108 = _tmp106 * _tmp89;
  const Scalar _tmp109 = _tmp97 * _tmp98;
  const Scalar _tmp110 = _tmp109 * fh1;
  const Scalar _tmp111 = _tmp110 * (_tmp107 * _tmp93 + _tmp108 + Scalar(1.0));
  const Scalar _tmp112 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp113 = _tmp57 * _tmp59 + _tmp58;
  const Scalar _tmp114 = 0;
  const Scalar _tmp115 = _tmp114 * _tmp91;
  const Scalar _tmp116 = _tmp114 * _tmp89;
  const Scalar _tmp117 = _tmp112 * (-_tmp115 * _tmp93 + _tmp116);
  const Scalar _tmp118 = _tmp47 * _tmp73;
  const Scalar _tmp119 = _tmp118 * _tmp86;
  const Scalar _tmp120 = Scalar(1.0) * _tmp86;
  const Scalar _tmp121 = fh1 * (-_tmp109 * _tmp94 + _tmp96 * _tmp99);
  const Scalar _tmp122 = _tmp121 * (-_tmp119 * _tmp44 + _tmp120 * _tmp72);
  const Scalar _tmp123 =
      std::exp(_tmp101 * _tmp33 + _tmp111 * _tmp33 + _tmp117 * _tmp33 + _tmp122 * _tmp33);
  const Scalar _tmp124 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp125 = _tmp124 * _tmp29;
  const Scalar _tmp126 = _tmp125 * _tmp46;
  const Scalar _tmp127 = _tmp126 * _tmp56;
  const Scalar _tmp128 = std::pow(_tmp45, Scalar(-2));
  const Scalar _tmp129 = _tmp128 * _tmp44;
  const Scalar _tmp130 = _tmp125 * _tmp129;
  const Scalar _tmp131 = _tmp130 * _tmp56;
  const Scalar _tmp132 = _tmp125 * _tmp54;
  const Scalar _tmp133 = _tmp44 * _tmp74;
  const Scalar _tmp134 = _tmp130 * _tmp62;
  const Scalar _tmp135 = _tmp126 * _tmp62;
  const Scalar _tmp136 =
      _tmp134 * _tmp73 - _tmp135 * _tmp72 -
      _tmp59 * (-_tmp127 * _tmp72 + _tmp131 * _tmp73 + _tmp132 * _tmp133 - _tmp132 * _tmp72);
  const Scalar _tmp137 = std::pow(_tmp75, Scalar(-2));
  const Scalar _tmp138 = _tmp136 * _tmp137;
  const Scalar _tmp139 = _tmp138 * _tmp72;
  const Scalar _tmp140 = _tmp102 * _tmp125;
  const Scalar _tmp141 = _tmp77 * _tmp80;
  const Scalar _tmp142 = _tmp141 * _tmp72;
  const Scalar _tmp143 = std::pow(_tmp31, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp144 = _tmp143 * _tmp28;
  const Scalar _tmp145 = _tmp143 * _tmp16;
  const Scalar _tmp146 = _tmp17 * _tmp29;
  const Scalar _tmp147 = _tmp33 * (-_tmp144 * _tmp19 + _tmp145 * _tmp146 + _tmp78);
  const Scalar _tmp148 = _tmp124 * _tmp32;
  const Scalar _tmp149 = _tmp148 * _tmp80;
  const Scalar _tmp150 = _tmp141 * _tmp44;
  const Scalar _tmp151 = _tmp147 * _tmp44 + _tmp149 * _tmp44 - _tmp150;
  const Scalar _tmp152 = _tmp73 * _tmp82;
  const Scalar _tmp153 = _tmp130 * _tmp152 - _tmp140 * _tmp72 - _tmp142 + _tmp147 * _tmp72 +
                         _tmp149 * _tmp72 - _tmp151 * _tmp74;
  const Scalar _tmp154 = std::pow(_tmp83, Scalar(-2));
  const Scalar _tmp155 = _tmp154 * _tmp75;
  const Scalar _tmp156 = _tmp155 * _tmp85;
  const Scalar _tmp157 = _tmp130 * _tmp82;
  const Scalar _tmp158 = _tmp44 * _tmp47 * _tmp59;
  const Scalar _tmp159 =
      -Scalar(1.0) * _tmp130 * _tmp60 - _tmp132 * _tmp158 + Scalar(1.0) * _tmp134;
  const Scalar _tmp160 = _tmp153 * _tmp76;
  const Scalar _tmp161 = _tmp138 * _tmp83;
  const Scalar _tmp162 = _tmp136 * _tmp86;
  const Scalar _tmp163 = -_tmp153 * _tmp156 + _tmp159 + _tmp162 * _tmp85 +
                         _tmp87 * (-_tmp151 * _tmp47 + Scalar(1.0) * _tmp157 - _tmp159 * _tmp84 -
                                   _tmp160 * _tmp63 + _tmp161 * _tmp63);
  const Scalar _tmp164 = _tmp73 * _tmp88;
  const Scalar _tmp165 = -_tmp125 * _tmp90 + _tmp138 * _tmp164 - _tmp163 * _tmp91;
  const Scalar _tmp166 = _tmp36 / _tmp40;
  const Scalar _tmp167 = _tmp125 * _tmp128;
  const Scalar _tmp168 = _tmp166 * _tmp167;
  const Scalar _tmp169 = _tmp100 * _tmp33;
  const Scalar _tmp170 = _tmp122 * _tmp77;
  const Scalar _tmp171 = _tmp111 * _tmp77;
  const Scalar _tmp172 = _tmp117 * _tmp77;
  const Scalar _tmp173 = _tmp47 * _tmp72 * _tmp86;
  const Scalar _tmp174 = _tmp125 * _tmp173;
  const Scalar _tmp175 = _tmp120 * _tmp73;
  const Scalar _tmp176 = Scalar(1.0) * _tmp154;
  const Scalar _tmp177 = _tmp176 * _tmp72;
  const Scalar _tmp178 = _tmp118 * _tmp154;
  const Scalar _tmp179 = _tmp153 * _tmp178;
  const Scalar _tmp180 = _tmp121 * _tmp33;
  const Scalar _tmp181 = _tmp101 * _tmp77;
  const Scalar _tmp182 = _tmp107 * _tmp166;
  const Scalar _tmp183 = _tmp105 * _tmp155;
  const Scalar _tmp184 = _tmp30 / [&]() {
    const Scalar base = _tmp17;
    return base * base * base;
  }();
  const Scalar _tmp185 = _tmp129 * _tmp184;
  const Scalar _tmp186 =
      _tmp135 - _tmp185 * _tmp62 -
      _tmp59 * (_tmp127 + _tmp132 - _tmp184 * _tmp46 * _tmp61 - _tmp185 * _tmp56);
  const Scalar _tmp187 =
      _tmp105 * _tmp162 - _tmp153 * _tmp183 + _tmp186 +
      _tmp87 * (_tmp103 * _tmp151 - _tmp104 * _tmp160 + _tmp104 * _tmp161 + _tmp140 + _tmp141 -
                _tmp147 - _tmp149 - _tmp185 * _tmp82 - _tmp186 * _tmp84);
  const Scalar _tmp188 = _tmp106 * _tmp73;
  const Scalar _tmp189 = -_tmp108 * _tmp125 - _tmp125 + _tmp138 * _tmp188 - _tmp187 * _tmp91;
  const Scalar _tmp190 = _tmp110 * _tmp33;
  const Scalar _tmp191 = _tmp114 * _tmp133;
  const Scalar _tmp192 = _tmp112 * _tmp33;
  const Scalar _tmp193 = _tmp110 * _tmp46;
  const Scalar _tmp194 = _tmp112 * _tmp114;
  const Scalar _tmp195 = _tmp194 * _tmp91;
  const Scalar _tmp196 = _tmp100 * _tmp46;
  const Scalar _tmp197 =
      std::exp(-_tmp107 * _tmp193 + _tmp119 * _tmp121 + _tmp195 * _tmp46 - _tmp196 * _tmp92);
  const Scalar _tmp198 = _tmp138 * _tmp194;
  const Scalar _tmp199 = _tmp107 * _tmp110;
  const Scalar _tmp200 = _tmp120 * _tmp121;
  const Scalar _tmp201 = _tmp194 * _tmp76;
  const Scalar _tmp202 = _tmp201 * _tmp72;
  const Scalar _tmp203 = _tmp100 * _tmp76;
  const Scalar _tmp204 = _tmp110 * _tmp76;
  const Scalar _tmp205 = std::exp(-_tmp106 * _tmp204 - _tmp200 - _tmp201 - _tmp203 * _tmp88);
  const Scalar _tmp206 = _tmp121 * _tmp176;
  const Scalar _tmp207 = _tmp100 * _tmp88;
  const Scalar _tmp208 = _tmp106 * _tmp110;
  const Scalar _tmp209 = _tmp33 * (-_tmp144 * _tmp146 + _tmp145 * _tmp30 - _tmp79);
  const Scalar _tmp210 = _tmp128 * _tmp18;
  const Scalar _tmp211 = _tmp210 * _tmp44;
  const Scalar _tmp212 = _tmp18 * _tmp46;
  const Scalar _tmp213 = _tmp212 * _tmp82;
  const Scalar _tmp214 = -_tmp150 * _tmp43 + _tmp209 * _tmp44;
  const Scalar _tmp215 = -_tmp142 * _tmp43 - _tmp152 * _tmp211 + _tmp209 * _tmp72 +
                         _tmp213 * _tmp72 - _tmp214 * _tmp74;
  const Scalar _tmp216 = _tmp173 * _tmp18;
  const Scalar _tmp217 = _tmp178 * _tmp215;
  const Scalar _tmp218 = _tmp166 * _tmp210;
  const Scalar _tmp219 = _tmp210 * _tmp92;
  const Scalar _tmp220 = _tmp212 * _tmp62;
  const Scalar _tmp221 = _tmp211 * _tmp73;
  const Scalar _tmp222 = _tmp212 * _tmp56;
  const Scalar _tmp223 = _tmp18 * _tmp54;
  const Scalar _tmp224 =
      _tmp220 * _tmp72 - _tmp221 * _tmp62 -
      _tmp59 * (-_tmp133 * _tmp223 - _tmp221 * _tmp56 + _tmp222 * _tmp72 + _tmp223 * _tmp72);
  const Scalar _tmp225 = _tmp137 * _tmp224;
  const Scalar _tmp226 = _tmp225 * _tmp83;
  const Scalar _tmp227 = _tmp215 * _tmp76;
  const Scalar _tmp228 = Scalar(1.0) * _tmp211;
  const Scalar _tmp229 = _tmp158 * _tmp223 + _tmp228 * _tmp60 - _tmp228 * _tmp62;
  const Scalar _tmp230 = _tmp224 * _tmp86;
  const Scalar _tmp231 = -_tmp156 * _tmp215 + _tmp229 + _tmp230 * _tmp85 +
                         _tmp87 * (-_tmp214 * _tmp47 + _tmp226 * _tmp63 - _tmp227 * _tmp63 -
                                   _tmp228 * _tmp82 - _tmp229 * _tmp84);
  const Scalar _tmp232 = _tmp164 * _tmp225 + _tmp18 * _tmp90 - _tmp231 * _tmp91;
  const Scalar _tmp233 = _tmp225 * _tmp72;
  const Scalar _tmp234 =
      _tmp134 - _tmp220 - _tmp59 * (_tmp131 + _tmp132 * _tmp93 - _tmp222 - _tmp223);
  const Scalar _tmp235 =
      _tmp105 * _tmp230 - _tmp183 * _tmp215 + _tmp234 +
      _tmp87 * (_tmp103 * _tmp214 + _tmp104 * _tmp226 - _tmp104 * _tmp227 + _tmp141 * _tmp43 +
                _tmp157 - _tmp209 - _tmp213 - _tmp234 * _tmp84);
  const Scalar _tmp236 = _tmp108 * _tmp18 + _tmp18 + _tmp188 * _tmp225 - _tmp235 * _tmp91;
  const Scalar _tmp237 = _tmp194 * _tmp225;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp123 *
      (-_tmp101 * _tmp148 - _tmp111 * _tmp148 - _tmp117 * _tmp148 - _tmp122 * _tmp148 -
       _tmp169 * (-_tmp139 * _tmp88 + _tmp163 * _tmp89 + _tmp165 * _tmp93 - _tmp168 * _tmp92) +
       _tmp170 + _tmp171 + _tmp172 -
       _tmp180 * (-_tmp153 * _tmp177 + _tmp168 * _tmp175 - _tmp174 * _tmp44 + _tmp179 * _tmp44) +
       _tmp181 -
       _tmp190 * (-_tmp106 * _tmp139 - _tmp167 * _tmp182 + _tmp187 * _tmp89 + _tmp189 * _tmp93) -
       _tmp192 * (-_tmp114 * _tmp139 + _tmp115 * _tmp168 - _tmp116 * _tmp125 * _tmp93 +
                  _tmp138 * _tmp191));
  _res(2, 0) = -_tmp197 * (-_tmp100 * _tmp130 * _tmp92 - _tmp121 * _tmp174 + _tmp121 * _tmp179 -
                           _tmp126 * _tmp202 + _tmp130 * _tmp195 - _tmp130 * _tmp199 +
                           _tmp130 * _tmp200 * _tmp73 + _tmp165 * _tmp196 + _tmp189 * _tmp193 +
                           _tmp198 * _tmp74);
  _res(3, 0) = -_tmp205 * (-_tmp138 * _tmp207 - _tmp138 * _tmp208 - _tmp153 * _tmp206 +
                           _tmp163 * _tmp203 + _tmp187 * _tmp204 - _tmp198);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp123 *
      (-_tmp169 * (_tmp166 * _tmp219 + _tmp231 * _tmp89 + _tmp232 * _tmp93 - _tmp233 * _tmp88) +
       _tmp170 * _tmp43 + _tmp171 * _tmp43 + _tmp172 * _tmp43 -
       _tmp180 * (-_tmp175 * _tmp218 - _tmp177 * _tmp215 + _tmp216 * _tmp44 + _tmp217 * _tmp44) +
       _tmp181 * _tmp43 -
       _tmp190 * (-_tmp106 * _tmp233 + _tmp182 * _tmp210 + _tmp235 * _tmp89 + _tmp236 * _tmp93) -
       _tmp192 * (-_tmp114 * _tmp233 - _tmp115 * _tmp218 + _tmp116 * _tmp212 * _tmp44 +
                  _tmp191 * _tmp225));
  _res(2, 1) =
      -_tmp197 * (_tmp100 * _tmp219 * _tmp44 + _tmp121 * _tmp216 + _tmp121 * _tmp217 +
                  _tmp193 * _tmp236 - _tmp195 * _tmp211 + _tmp196 * _tmp232 + _tmp199 * _tmp211 -
                  _tmp200 * _tmp221 + _tmp202 * _tmp212 + _tmp237 * _tmp74);
  _res(3, 1) = -_tmp205 * (_tmp203 * _tmp231 + _tmp204 * _tmp235 - _tmp206 * _tmp215 -
                           _tmp207 * _tmp225 - _tmp208 * _tmp225 - _tmp237);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
