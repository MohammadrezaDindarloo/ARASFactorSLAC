// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pa_Nl7
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPaNl7(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 716

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (235)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = _tmp2 * _tmp7;
  const Scalar _tmp9 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp10 = _tmp0 * _tmp9;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp12 = _tmp0 * _tmp7;
  const Scalar _tmp13 = _tmp2 * _tmp9;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 - _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = _tmp16 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp19 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp24 = 2 * _tmp0 * _tmp2;
  const Scalar _tmp25 = _tmp6 * _tmp9;
  const Scalar _tmp26 =
      -Scalar(0.010999999999999999) * _tmp24 + Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -_tmp23 + _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp27;
  const Scalar _tmp29 = _tmp28 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = _tmp19 + _tmp30;
  const Scalar _tmp32 = std::sqrt(_tmp31);
  const Scalar _tmp33 = _tmp18 * _tmp32;
  const Scalar _tmp34 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp8;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 = -Scalar(0.010999999999999999) * _tmp1 -
                        Scalar(0.010999999999999999) * _tmp22 + Scalar(-0.010999999999999999);
  const Scalar _tmp37 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp35 + _tmp38;
  const Scalar _tmp40 = _tmp11 + _tmp14;
  const Scalar _tmp41 = _tmp40 + _tmp5;
  const Scalar _tmp42 = _tmp41 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp43 = std::pow(_tmp42, Scalar(2));
  const Scalar _tmp44 = _tmp23 + _tmp26;
  const Scalar _tmp45 = _tmp21 + _tmp44;
  const Scalar _tmp46 = _tmp45 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp47 = _tmp43 + std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = std::pow(_tmp47, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp49 = _tmp46 * _tmp48;
  const Scalar _tmp50 = _tmp18 * _tmp29;
  const Scalar _tmp51 = _tmp35 + _tmp36 - _tmp37;
  const Scalar _tmp52 = _tmp42 * _tmp48;
  const Scalar _tmp53 = _tmp51 * _tmp52;
  const Scalar _tmp54 = _tmp39 * _tmp49 - _tmp50 * _tmp53;
  const Scalar _tmp55 = Scalar(1.0) * _tmp28;
  const Scalar _tmp56 = Scalar(1.0) * _tmp16;
  const Scalar _tmp57 = (-_tmp41 + _tmp56) / (_tmp45 - _tmp55);
  const Scalar _tmp58 = _tmp50 * _tmp52;
  const Scalar _tmp59 = -_tmp49 + _tmp58;
  const Scalar _tmp60 = Scalar(1.0) / (_tmp59);
  const Scalar _tmp61 = Scalar(1.0) * _tmp60;
  const Scalar _tmp62 = _tmp57 * _tmp61;
  const Scalar _tmp63 = -_tmp39 * _tmp52 + _tmp53;
  const Scalar _tmp64 = _tmp54 * _tmp62 - _tmp61 * _tmp63;
  const Scalar _tmp65 = _tmp4 + _tmp40;
  const Scalar _tmp66 = _tmp65 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp67 = _tmp20 + _tmp44;
  const Scalar _tmp68 = _tmp67 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp69 = std::pow(Scalar(std::pow(_tmp66, Scalar(2)) + std::pow(_tmp68, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp70 = _tmp66 * _tmp69;
  const Scalar _tmp71 = _tmp51 * _tmp70;
  const Scalar _tmp72 = _tmp34 + _tmp38;
  const Scalar _tmp73 = _tmp68 * _tmp69;
  const Scalar _tmp74 = _tmp50 * _tmp70;
  const Scalar _tmp75 = -_tmp73 + _tmp74;
  const Scalar _tmp76 = _tmp60 * _tmp75;
  const Scalar _tmp77 = -_tmp57 * (-_tmp50 * _tmp71 - _tmp54 * _tmp76 + _tmp72 * _tmp73) -
                        _tmp63 * _tmp76 - _tmp70 * _tmp72 + _tmp71;
  const Scalar _tmp78 = Scalar(1.0) / (_tmp77);
  const Scalar _tmp79 = Scalar(1.0) / (_tmp32);
  const Scalar _tmp80 = _tmp28 * _tmp79;
  const Scalar _tmp81 = _tmp16 * _tmp79;
  const Scalar _tmp82 = -_tmp17 * _tmp80 + _tmp29 * _tmp81;
  const Scalar _tmp83 = _tmp33 * _tmp82;
  const Scalar _tmp84 = -_tmp41 * _tmp49 + _tmp45 * _tmp52 + _tmp52 * _tmp83;
  const Scalar _tmp85 = -_tmp65 * _tmp73 + _tmp67 * _tmp70 + _tmp70 * _tmp83 - _tmp76 * _tmp84;
  const Scalar _tmp86 = _tmp78 * _tmp85;
  const Scalar _tmp87 = -_tmp61 * _tmp84 - _tmp64 * _tmp86;
  const Scalar _tmp88 = Scalar(1.0) / (_tmp85);
  const Scalar _tmp89 = _tmp77 * _tmp88;
  const Scalar _tmp90 = _tmp64 + _tmp87 * _tmp89;
  const Scalar _tmp91 = _tmp75 * _tmp78;
  const Scalar _tmp92 = -_tmp90 * _tmp91 + Scalar(1.0);
  const Scalar _tmp93 = _tmp52 * _tmp60;
  const Scalar _tmp94 = _tmp70 * _tmp78;
  const Scalar _tmp95 = _tmp90 * _tmp94;
  const Scalar _tmp96 = _tmp15 + _tmp4;
  const Scalar _tmp97 = _tmp96 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp98 = _tmp20 + _tmp27;
  const Scalar _tmp99 = _tmp98 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp100 = std::pow(Scalar(std::pow(_tmp97, Scalar(2)) + std::pow(_tmp99, Scalar(2))),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp101 = _tmp100 * _tmp99;
  const Scalar _tmp102 = _tmp101 * fh1;
  const Scalar _tmp103 = _tmp102 * (_tmp92 * _tmp93 + _tmp95);
  const Scalar _tmp104 = Scalar(1.0) * _tmp88;
  const Scalar _tmp105 = _tmp52 * _tmp76;
  const Scalar _tmp106 = _tmp104 * _tmp70;
  const Scalar _tmp107 = _tmp100 * _tmp97;
  const Scalar _tmp108 = fh1 * (_tmp101 * _tmp96 - _tmp107 * _tmp98);
  const Scalar _tmp109 = _tmp108 * (-_tmp104 * _tmp105 + _tmp106);
  const Scalar _tmp110 = _tmp50 * _tmp60;
  const Scalar _tmp111 = _tmp110 * _tmp63 - _tmp51 - _tmp57 * (_tmp110 * _tmp54 + _tmp50 * _tmp51);
  const Scalar _tmp112 = _tmp110 * _tmp84 - _tmp111 * _tmp86 - _tmp83;
  const Scalar _tmp113 = _tmp111 + _tmp112 * _tmp89;
  const Scalar _tmp114 = -_tmp113 * _tmp91 - _tmp50;
  const Scalar _tmp115 = _tmp113 * _tmp94;
  const Scalar _tmp116 = _tmp107 * fh1;
  const Scalar _tmp117 = _tmp116 * (_tmp114 * _tmp93 + _tmp115 + Scalar(1.0));
  const Scalar _tmp118 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp119 = _tmp55 * _tmp57 + _tmp56;
  const Scalar _tmp120 = 0;
  const Scalar _tmp121 = _tmp120 * _tmp78;
  const Scalar _tmp122 = _tmp121 * _tmp70;
  const Scalar _tmp123 = _tmp118 * (-_tmp105 * _tmp121 + _tmp122);
  const Scalar _tmp124 =
      std::exp(_tmp103 * _tmp33 + _tmp109 * _tmp33 + _tmp117 * _tmp33 + _tmp123 * _tmp33);
  const Scalar _tmp125 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp126 = _tmp125 * _tmp32;
  const Scalar _tmp127 = _tmp79 * _tmp82;
  const Scalar _tmp128 = std::pow(_tmp31, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp129 = _tmp128 * _tmp28;
  const Scalar _tmp130 = _tmp128 * _tmp16;
  const Scalar _tmp131 = _tmp17 * _tmp29;
  const Scalar _tmp132 = _tmp33 * (-_tmp129 * _tmp19 + _tmp130 * _tmp131 + _tmp80);
  const Scalar _tmp133 = _tmp126 * _tmp82;
  const Scalar _tmp134 = -_tmp127 * _tmp52 + _tmp132 * _tmp52 + _tmp133 * _tmp52;
  const Scalar _tmp135 = _tmp125 * _tmp29;
  const Scalar _tmp136 = _tmp135 * _tmp60;
  const Scalar _tmp137 = _tmp136 * _tmp84;
  const Scalar _tmp138 = std::pow(_tmp59, Scalar(-2));
  const Scalar _tmp139 = _tmp135 * _tmp138;
  const Scalar _tmp140 = _tmp52 * _tmp84;
  const Scalar _tmp141 = _tmp139 * _tmp140;
  const Scalar _tmp142 = -_tmp127 * _tmp70 + _tmp132 * _tmp70 + _tmp133 * _tmp70 -
                         _tmp134 * _tmp76 - _tmp137 * _tmp70 + _tmp141 * _tmp75;
  const Scalar _tmp143 = std::pow(_tmp85, Scalar(-2));
  const Scalar _tmp144 = Scalar(1.0) * _tmp143;
  const Scalar _tmp145 = _tmp144 * _tmp70;
  const Scalar _tmp146 = _tmp135 * _tmp61 * _tmp70 * _tmp88;
  const Scalar _tmp147 = _tmp43 / _tmp47;
  const Scalar _tmp148 = _tmp139 * _tmp147;
  const Scalar _tmp149 = _tmp105 * _tmp144;
  const Scalar _tmp150 = _tmp108 * _tmp33;
  const Scalar _tmp151 = _tmp103 * _tmp79;
  const Scalar _tmp152 = _tmp136 * _tmp63;
  const Scalar _tmp153 = _tmp52 * _tmp63;
  const Scalar _tmp154 = _tmp139 * _tmp153;
  const Scalar _tmp155 = _tmp135 * _tmp53;
  const Scalar _tmp156 = _tmp52 * _tmp54;
  const Scalar _tmp157 = _tmp139 * _tmp156;
  const Scalar _tmp158 = _tmp136 * _tmp54;
  const Scalar _tmp159 =
      -_tmp152 * _tmp70 + _tmp154 * _tmp75 -
      _tmp57 * (-_tmp135 * _tmp71 + _tmp155 * _tmp76 + _tmp157 * _tmp75 - _tmp158 * _tmp70);
  const Scalar _tmp160 = std::pow(_tmp77, Scalar(-2));
  const Scalar _tmp161 = _tmp159 * _tmp160;
  const Scalar _tmp162 = _tmp113 * _tmp75;
  const Scalar _tmp163 = _tmp143 * _tmp77;
  const Scalar _tmp164 = _tmp112 * _tmp163;
  const Scalar _tmp165 = _tmp112 * _tmp88;
  const Scalar _tmp166 = _tmp30 / [&]() {
    const Scalar base = _tmp17;
    return base * base * base;
  }();
  const Scalar _tmp167 = _tmp138 * _tmp166;
  const Scalar _tmp168 = _tmp111 * _tmp85;
  const Scalar _tmp169 =
      _tmp152 - _tmp153 * _tmp167 -
      _tmp57 * (_tmp135 * _tmp51 - _tmp156 * _tmp167 + _tmp158 - _tmp166 * _tmp53 * _tmp60);
  const Scalar _tmp170 = _tmp142 * _tmp78;
  const Scalar _tmp171 =
      -_tmp142 * _tmp164 + _tmp159 * _tmp165 + _tmp169 +
      _tmp89 * (_tmp110 * _tmp134 - _tmp111 * _tmp170 + _tmp127 - _tmp132 - _tmp133 + _tmp137 -
                _tmp140 * _tmp167 + _tmp161 * _tmp168 - _tmp169 * _tmp86);
  const Scalar _tmp172 = -_tmp115 * _tmp135 - _tmp135 + _tmp161 * _tmp162 - _tmp171 * _tmp91;
  const Scalar _tmp173 = _tmp161 * _tmp70;
  const Scalar _tmp174 = _tmp114 * _tmp147;
  const Scalar _tmp175 = _tmp116 * _tmp33;
  const Scalar _tmp176 = _tmp123 * _tmp79;
  const Scalar _tmp177 = _tmp105 * _tmp120;
  const Scalar _tmp178 = _tmp120 * _tmp91;
  const Scalar _tmp179 = _tmp118 * _tmp33;
  const Scalar _tmp180 = _tmp64 * _tmp85;
  const Scalar _tmp181 = Scalar(1.0) * _tmp154 - _tmp155 * _tmp62 - Scalar(1.0) * _tmp157 * _tmp57;
  const Scalar _tmp182 = _tmp163 * _tmp87;
  const Scalar _tmp183 = _tmp87 * _tmp88;
  const Scalar _tmp184 = -_tmp142 * _tmp182 + _tmp159 * _tmp183 + _tmp181 +
                         _tmp89 * (-_tmp134 * _tmp61 + Scalar(1.0) * _tmp141 + _tmp161 * _tmp180 -
                                   _tmp170 * _tmp64 - _tmp181 * _tmp86);
  const Scalar _tmp185 = _tmp75 * _tmp90;
  const Scalar _tmp186 = -_tmp135 * _tmp95 + _tmp161 * _tmp185 - _tmp184 * _tmp91;
  const Scalar _tmp187 = _tmp102 * _tmp33;
  const Scalar _tmp188 = _tmp109 * _tmp79;
  const Scalar _tmp189 = _tmp117 * _tmp79;
  const Scalar _tmp190 = _tmp118 * _tmp121;
  const Scalar _tmp191 = _tmp104 * _tmp108;
  const Scalar _tmp192 = _tmp116 * _tmp60;
  const Scalar _tmp193 = _tmp102 * _tmp60;
  const Scalar _tmp194 =
      std::exp(-_tmp114 * _tmp192 + _tmp190 * _tmp76 + _tmp191 * _tmp76 - _tmp193 * _tmp92);
  const Scalar _tmp195 = _tmp102 * _tmp52;
  const Scalar _tmp196 = _tmp118 * _tmp120;
  const Scalar _tmp197 = _tmp196 * _tmp91;
  const Scalar _tmp198 = _tmp139 * _tmp52;
  const Scalar _tmp199 = _tmp108 * _tmp144;
  const Scalar _tmp200 = _tmp142 * _tmp199;
  const Scalar _tmp201 = _tmp190 * _tmp70;
  const Scalar _tmp202 = _tmp114 * _tmp116;
  const Scalar _tmp203 = _tmp161 * _tmp196;
  const Scalar _tmp204 = _tmp102 * _tmp78;
  const Scalar _tmp205 = _tmp116 * _tmp78;
  const Scalar _tmp206 = std::exp(-_tmp113 * _tmp205 - _tmp190 - _tmp191 - _tmp204 * _tmp90);
  const Scalar _tmp207 = _tmp102 * _tmp90;
  const Scalar _tmp208 = _tmp113 * _tmp116;
  const Scalar _tmp209 = _tmp18 * _tmp60;
  const Scalar _tmp210 = _tmp209 * _tmp52;
  const Scalar _tmp211 = _tmp138 * _tmp18;
  const Scalar _tmp212 = _tmp211 * _tmp75;
  const Scalar _tmp213 = _tmp209 * _tmp63;
  const Scalar _tmp214 = _tmp18 * _tmp51;
  const Scalar _tmp215 = _tmp209 * _tmp54;
  const Scalar _tmp216 =
      -_tmp153 * _tmp212 + _tmp213 * _tmp70 -
      _tmp57 * (-_tmp105 * _tmp214 - _tmp156 * _tmp212 + _tmp214 * _tmp70 + _tmp215 * _tmp70);
  const Scalar _tmp217 = _tmp160 * _tmp216;
  const Scalar _tmp218 = _tmp217 * _tmp70;
  const Scalar _tmp219 = _tmp33 * (-_tmp129 * _tmp131 + _tmp130 * _tmp30 - _tmp81);
  const Scalar _tmp220 = -_tmp127 * _tmp58 + _tmp219 * _tmp52;
  const Scalar _tmp221 = _tmp209 * _tmp84;
  const Scalar _tmp222 = -_tmp127 * _tmp74 - _tmp140 * _tmp212 + _tmp219 * _tmp70 -
                         _tmp220 * _tmp76 + _tmp221 * _tmp70;
  const Scalar _tmp223 = _tmp222 * _tmp78;
  const Scalar _tmp224 = Scalar(1.0) * _tmp211;
  const Scalar _tmp225 =
      -_tmp153 * _tmp224 + _tmp156 * _tmp224 * _tmp57 + _tmp214 * _tmp52 * _tmp62;
  const Scalar _tmp226 = -_tmp182 * _tmp222 + _tmp183 * _tmp216 + _tmp225 +
                         _tmp89 * (-_tmp140 * _tmp224 + _tmp180 * _tmp217 - _tmp220 * _tmp61 -
                                   _tmp223 * _tmp64 - _tmp225 * _tmp86);
  const Scalar _tmp227 = _tmp18 * _tmp95 + _tmp185 * _tmp217 - _tmp226 * _tmp91;
  const Scalar _tmp228 = _tmp211 * _tmp92;
  const Scalar _tmp229 =
      _tmp154 - _tmp213 - _tmp57 * (_tmp136 * _tmp53 + _tmp157 - _tmp214 - _tmp215);
  const Scalar _tmp230 =
      -_tmp164 * _tmp222 + _tmp165 * _tmp216 + _tmp229 +
      _tmp89 * (_tmp110 * _tmp220 - _tmp111 * _tmp223 + _tmp127 * _tmp50 + _tmp141 +
                _tmp168 * _tmp217 - _tmp219 - _tmp221 - _tmp229 * _tmp86);
  const Scalar _tmp231 = _tmp115 * _tmp18 + _tmp162 * _tmp217 + _tmp18 - _tmp230 * _tmp91;
  const Scalar _tmp232 = _tmp196 * _tmp217;
  const Scalar _tmp233 = _tmp211 * _tmp52;
  const Scalar _tmp234 = _tmp199 * _tmp222;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp124 *
      (-_tmp103 * _tmp126 - _tmp109 * _tmp126 - _tmp117 * _tmp126 - _tmp123 * _tmp126 -
       _tmp150 *
           (_tmp104 * _tmp148 * _tmp75 - _tmp142 * _tmp145 + _tmp142 * _tmp149 - _tmp146 * _tmp52) +
       _tmp151 -
       _tmp175 * (-_tmp113 * _tmp173 - _tmp139 * _tmp174 + _tmp171 * _tmp94 + _tmp172 * _tmp93) +
       _tmp176 -
       _tmp179 * (-_tmp120 * _tmp173 - _tmp122 * _tmp136 * _tmp52 + _tmp148 * _tmp178 +
                  _tmp161 * _tmp177) -
       _tmp187 * (-_tmp148 * _tmp92 - _tmp173 * _tmp90 + _tmp184 * _tmp94 + _tmp186 * _tmp93) +
       _tmp188 + _tmp189);
  _res(2, 0) =
      -_tmp194 * (-_tmp108 * _tmp146 - _tmp136 * _tmp201 - _tmp139 * _tmp195 * _tmp92 +
                  _tmp172 * _tmp192 + _tmp186 * _tmp193 + _tmp191 * _tmp198 * _tmp75 +
                  _tmp197 * _tmp198 - _tmp198 * _tmp202 + _tmp200 * _tmp76 + _tmp203 * _tmp76);
  _res(3, 0) = -_tmp206 * (-_tmp161 * _tmp207 - _tmp161 * _tmp208 + _tmp171 * _tmp205 +
                           _tmp184 * _tmp204 - _tmp200 - _tmp203);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp124 *
      (-_tmp150 * (-_tmp104 * _tmp147 * _tmp212 + _tmp106 * _tmp210 - _tmp145 * _tmp222 +
                   _tmp149 * _tmp222) +
       _tmp151 * _tmp50 -
       _tmp175 * (-_tmp113 * _tmp218 + _tmp174 * _tmp211 + _tmp230 * _tmp94 + _tmp231 * _tmp93) +
       _tmp176 * _tmp50 -
       _tmp179 * (-_tmp120 * _tmp218 + _tmp122 * _tmp210 - _tmp147 * _tmp178 * _tmp211 +
                  _tmp177 * _tmp217) -
       _tmp187 * (_tmp147 * _tmp228 - _tmp218 * _tmp90 + _tmp226 * _tmp94 + _tmp227 * _tmp93) +
       _tmp188 * _tmp50 + _tmp189 * _tmp50);
  _res(2, 1) =
      -_tmp194 * (_tmp106 * _tmp108 * _tmp209 - _tmp191 * _tmp212 * _tmp52 + _tmp192 * _tmp231 +
                  _tmp193 * _tmp227 + _tmp195 * _tmp228 - _tmp197 * _tmp233 + _tmp201 * _tmp209 +
                  _tmp202 * _tmp233 + _tmp232 * _tmp76 + _tmp234 * _tmp76);
  _res(3, 1) = -_tmp206 * (_tmp204 * _tmp226 + _tmp205 * _tmp230 - _tmp207 * _tmp217 -
                           _tmp208 * _tmp217 - _tmp232 - _tmp234);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
