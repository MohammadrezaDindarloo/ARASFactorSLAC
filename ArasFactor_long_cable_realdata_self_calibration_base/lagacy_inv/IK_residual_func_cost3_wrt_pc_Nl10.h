// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl10
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl10(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 568

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (184)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp2 * _tmp6;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp0 * _tmp8;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp7 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp0;
  const Scalar _tmp12 = _tmp11 * _tmp6;
  const Scalar _tmp13 = _tmp2 * _tmp8;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp10 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = Scalar(1.0) * _tmp16;
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = _tmp11 * _tmp2;
  const Scalar _tmp21 = _tmp6 * _tmp8;
  const Scalar _tmp22 =
      -Scalar(0.010999999999999999) * _tmp20 + Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp23 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp25 = _tmp22 + _tmp24;
  const Scalar _tmp26 = _tmp19 + _tmp25;
  const Scalar _tmp27 = Scalar(1.0) * _tmp26;
  const Scalar _tmp28 = _tmp22 - _tmp24;
  const Scalar _tmp29 = _tmp19 + _tmp28;
  const Scalar _tmp30 = _tmp10 - _tmp14;
  const Scalar _tmp31 = _tmp30 + _tmp5;
  const Scalar _tmp32 = (_tmp17 - _tmp31) / (-_tmp27 + _tmp29);
  const Scalar _tmp33 = _tmp17 + _tmp27 * _tmp32;
  const Scalar _tmp34 = 0;
  const Scalar _tmp35 = _tmp15 + _tmp4;
  const Scalar _tmp36 = _tmp35 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp37 = std::pow(_tmp36, Scalar(2));
  const Scalar _tmp38 = _tmp18 + _tmp25;
  const Scalar _tmp39 = _tmp38 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp40 = std::pow(_tmp39, Scalar(2));
  const Scalar _tmp41 = _tmp37 + _tmp40;
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp43 = _tmp16 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp44 = Scalar(1.0) / (_tmp43);
  const Scalar _tmp45 = _tmp26 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp46 = _tmp44 * _tmp45;
  const Scalar _tmp47 = _tmp42 * _tmp46;
  const Scalar _tmp48 = _tmp39 * _tmp42;
  const Scalar _tmp49 = _tmp36 * _tmp47 - _tmp48;
  const Scalar _tmp50 = Scalar(0.20999999999999999) * _tmp7 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp51 = -Scalar(0.010999999999999999) * _tmp1 -
                        Scalar(0.010999999999999999) * _tmp23 + Scalar(-0.010999999999999999);
  const Scalar _tmp52 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp53 = _tmp51 + _tmp52;
  const Scalar _tmp54 = _tmp50 + _tmp53;
  const Scalar _tmp55 = _tmp42 * _tmp54;
  const Scalar _tmp56 = _tmp31 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp57 = _tmp29 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp58 = std::pow(Scalar(std::pow(_tmp56, Scalar(2)) + std::pow(_tmp57, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp59 = _tmp56 * _tmp58;
  const Scalar _tmp60 = _tmp57 * _tmp58;
  const Scalar _tmp61 = Scalar(1.0) / (_tmp46 * _tmp59 - _tmp60);
  const Scalar _tmp62 = -_tmp50;
  const Scalar _tmp63 = _tmp51 - _tmp52 + _tmp62;
  const Scalar _tmp64 = _tmp53 + _tmp62;
  const Scalar _tmp65 = -_tmp59 * _tmp63 + _tmp59 * _tmp64;
  const Scalar _tmp66 = _tmp61 * _tmp65;
  const Scalar _tmp67 = _tmp42 * _tmp64;
  const Scalar _tmp68 = _tmp36 * _tmp67;
  const Scalar _tmp69 = _tmp46 * _tmp64;
  const Scalar _tmp70 = -_tmp59 * _tmp69 + _tmp60 * _tmp63;
  const Scalar _tmp71 = _tmp49 * _tmp61;
  const Scalar _tmp72 = -_tmp32 * (-_tmp46 * _tmp68 + _tmp48 * _tmp54 - _tmp70 * _tmp71) -
                        _tmp36 * _tmp55 - _tmp49 * _tmp66 + _tmp68;
  const Scalar _tmp73 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp74 = _tmp49 * _tmp73;
  const Scalar _tmp75 = _tmp59 * _tmp61;
  const Scalar _tmp76 = _tmp34 * _tmp73;
  const Scalar _tmp77 = _tmp42 * _tmp76;
  const Scalar _tmp78 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp79 =
      std::sqrt(Scalar(std::pow(_tmp43, Scalar(2)) + std::pow(_tmp45, Scalar(2))));
  const Scalar _tmp80 = _tmp44 * _tmp79;
  const Scalar _tmp81 = _tmp78 * _tmp80;
  const Scalar _tmp82 = Scalar(1.0) / (_tmp79);
  const Scalar _tmp83 = _tmp80 * (_tmp16 * _tmp45 * _tmp82 - _tmp26 * _tmp43 * _tmp82);
  const Scalar _tmp84 = _tmp29 * _tmp59 - _tmp31 * _tmp60 + _tmp59 * _tmp83;
  const Scalar _tmp85 = _tmp36 * _tmp42;
  const Scalar _tmp86 = _tmp38 * _tmp42;
  const Scalar _tmp87 = -_tmp35 * _tmp48 + _tmp36 * _tmp86 - _tmp71 * _tmp84 + _tmp83 * _tmp85;
  const Scalar _tmp88 = Scalar(1.0) / (_tmp87);
  const Scalar _tmp89 = _tmp61 * _tmp70;
  const Scalar _tmp90 = Scalar(1.0) * _tmp32 * _tmp89 - Scalar(1.0) * _tmp66;
  const Scalar _tmp91 = _tmp73 * _tmp90;
  const Scalar _tmp92 = _tmp61 * _tmp84;
  const Scalar _tmp93 = -_tmp87 * _tmp91 - Scalar(1.0) * _tmp92;
  const Scalar _tmp94 = _tmp88 * _tmp93;
  const Scalar _tmp95 = _tmp72 * _tmp94 + _tmp90;
  const Scalar _tmp96 = _tmp73 * _tmp95;
  const Scalar _tmp97 = _tmp42 * _tmp96;
  const Scalar _tmp98 = -_tmp49 * _tmp96 + Scalar(1.0);
  const Scalar _tmp99 = _tmp30 + _tmp4;
  const Scalar _tmp100 = _tmp99 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp101 = _tmp18 + _tmp28;
  const Scalar _tmp102 = _tmp101 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp103 =
      std::pow(Scalar(std::pow(_tmp100, Scalar(2)) + std::pow(_tmp102, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp104 = _tmp102 * _tmp103;
  const Scalar _tmp105 = _tmp104 * fh1;
  const Scalar _tmp106 = _tmp105 * _tmp80;
  const Scalar _tmp107 = -_tmp32 * (_tmp46 * _tmp89 + _tmp69) + _tmp46 * _tmp66 - _tmp64;
  const Scalar _tmp108 = _tmp107 * _tmp73;
  const Scalar _tmp109 = -_tmp108 * _tmp87 + _tmp46 * _tmp92 - _tmp83;
  const Scalar _tmp110 = _tmp72 * _tmp88;
  const Scalar _tmp111 = _tmp107 + _tmp109 * _tmp110;
  const Scalar _tmp112 = _tmp111 * _tmp73;
  const Scalar _tmp113 = _tmp112 * _tmp42;
  const Scalar _tmp114 = -_tmp111 * _tmp74 - _tmp46;
  const Scalar _tmp115 = _tmp100 * _tmp103;
  const Scalar _tmp116 = _tmp115 * fh1;
  const Scalar _tmp117 = _tmp116 * _tmp80;
  const Scalar _tmp118 = Scalar(1.0) * _tmp88;
  const Scalar _tmp119 = _tmp59 * _tmp71;
  const Scalar _tmp120 = _tmp118 * _tmp42;
  const Scalar _tmp121 = fh1 * (-_tmp101 * _tmp115 + _tmp104 * _tmp99);
  const Scalar _tmp122 = _tmp121 * _tmp80;
  const Scalar _tmp123 = std::exp(_tmp106 * (_tmp36 * _tmp97 + _tmp75 * _tmp98) +
                                  _tmp117 * (_tmp113 * _tmp36 + _tmp114 * _tmp75 + Scalar(1.0)) +
                                  _tmp122 * (-_tmp118 * _tmp119 + _tmp120 * _tmp36) +
                                  _tmp81 * (-_tmp34 * _tmp74 * _tmp75 + _tmp36 * _tmp77));
  const Scalar _tmp124 = std::pow(_tmp41, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp125 = _tmp124 * _tmp37;
  const Scalar _tmp126 = _tmp124 * _tmp36 * _tmp39;
  const Scalar _tmp127 = _tmp126 * _tmp54;
  const Scalar _tmp128 = _tmp125 * _tmp46 - _tmp126 - _tmp47;
  const Scalar _tmp129 = _tmp128 * _tmp61;
  const Scalar _tmp130 = _tmp125 * _tmp64;
  const Scalar _tmp131 =
      -_tmp125 * _tmp54 - _tmp129 * _tmp65 + _tmp130 -
      _tmp32 * (_tmp127 - _tmp129 * _tmp70 - _tmp130 * _tmp46 + _tmp46 * _tmp67) + _tmp55 - _tmp67;
  const Scalar _tmp132 = _tmp109 * _tmp88;
  const Scalar _tmp133 = _tmp125 * _tmp38 + _tmp125 * _tmp83 - _tmp126 * _tmp35 - _tmp129 * _tmp84 -
                         _tmp42 * _tmp83 - _tmp86;
  const Scalar _tmp134 = std::pow(_tmp87, Scalar(-2));
  const Scalar _tmp135 = _tmp134 * _tmp72;
  const Scalar _tmp136 = _tmp133 * _tmp135;
  const Scalar _tmp137 = std::pow(_tmp72, Scalar(-2));
  const Scalar _tmp138 = _tmp131 * _tmp137;
  const Scalar _tmp139 = _tmp107 * _tmp87;
  const Scalar _tmp140 =
      -_tmp109 * _tmp136 + _tmp110 * (-_tmp108 * _tmp133 + _tmp138 * _tmp139) + _tmp131 * _tmp132;
  const Scalar _tmp141 = _tmp73 * _tmp85;
  const Scalar _tmp142 = _tmp111 * _tmp49;
  const Scalar _tmp143 = -_tmp112 * _tmp128 + _tmp138 * _tmp142 - _tmp140 * _tmp74;
  const Scalar _tmp144 = _tmp138 * _tmp85;
  const Scalar _tmp145 = _tmp49 * _tmp95;
  const Scalar _tmp146 = _tmp87 * _tmp90;
  const Scalar _tmp147 =
      _tmp110 * (-_tmp133 * _tmp91 + _tmp138 * _tmp146) + _tmp131 * _tmp94 - _tmp136 * _tmp93;
  const Scalar _tmp148 = -_tmp128 * _tmp96 + _tmp138 * _tmp145 - _tmp147 * _tmp74;
  const Scalar _tmp149 = _tmp147 * _tmp73;
  const Scalar _tmp150 = _tmp129 * _tmp59;
  const Scalar _tmp151 = _tmp119 * _tmp34;
  const Scalar _tmp152 = Scalar(1.0) * _tmp134;
  const Scalar _tmp153 = _tmp152 * _tmp85;
  const Scalar _tmp154 = _tmp119 * _tmp152;
  const Scalar _tmp155 = _tmp61 * fh1;
  const Scalar _tmp156 = _tmp115 * _tmp155;
  const Scalar _tmp157 = _tmp118 * _tmp121;
  const Scalar _tmp158 = _tmp34 * _tmp78;
  const Scalar _tmp159 = _tmp104 * _tmp155;
  const Scalar _tmp160 = std::exp(-_tmp114 * _tmp156 + _tmp157 * _tmp71 +
                                  _tmp158 * _tmp61 * _tmp74 - _tmp159 * _tmp98);
  const Scalar _tmp161 = _tmp76 * _tmp78;
  const Scalar _tmp162 = _tmp121 * _tmp152;
  const Scalar _tmp163 = _tmp133 * _tmp162;
  const Scalar _tmp164 = _tmp138 * _tmp158;
  const Scalar _tmp165 = std::exp(-_tmp105 * _tmp96 - _tmp112 * _tmp116 - _tmp157 - _tmp161);
  const Scalar _tmp166 = _tmp111 * _tmp116;
  const Scalar _tmp167 = _tmp105 * _tmp95;
  const Scalar _tmp168 = _tmp116 * _tmp73;
  const Scalar _tmp169 = _tmp124 * _tmp40;
  const Scalar _tmp170 = _tmp126 * _tmp46 - _tmp169 + _tmp42;
  const Scalar _tmp171 = _tmp170 * _tmp61;
  const Scalar _tmp172 =
      _tmp126 * _tmp64 - _tmp127 - _tmp170 * _tmp66 -
      _tmp32 * (-_tmp126 * _tmp69 + _tmp169 * _tmp54 - _tmp171 * _tmp70 - _tmp55);
  const Scalar _tmp173 = _tmp137 * _tmp172;
  const Scalar _tmp174 =
      _tmp126 * _tmp38 + _tmp126 * _tmp83 - _tmp169 * _tmp35 - _tmp171 * _tmp84 + _tmp35 * _tmp42;
  const Scalar _tmp175 = _tmp135 * _tmp174;
  const Scalar _tmp176 =
      -_tmp109 * _tmp175 + _tmp110 * (-_tmp108 * _tmp174 + _tmp139 * _tmp173) + _tmp132 * _tmp172;
  const Scalar _tmp177 = -_tmp112 * _tmp170 + _tmp142 * _tmp173 - _tmp176 * _tmp74;
  const Scalar _tmp178 = _tmp173 * _tmp85;
  const Scalar _tmp179 = _tmp171 * _tmp59;
  const Scalar _tmp180 =
      _tmp110 * (_tmp146 * _tmp173 - _tmp174 * _tmp91) + _tmp172 * _tmp94 - _tmp175 * _tmp93;
  const Scalar _tmp181 = _tmp145 * _tmp173 - _tmp170 * _tmp96 - _tmp180 * _tmp74;
  const Scalar _tmp182 = _tmp158 * _tmp173;
  const Scalar _tmp183 = _tmp162 * _tmp174;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp123 * (-_tmp106 * (_tmp125 * _tmp96 - _tmp144 * _tmp95 + _tmp148 * _tmp75 +
                                       _tmp149 * _tmp85 - _tmp97) -
                           _tmp117 * (-_tmp111 * _tmp144 + _tmp112 * _tmp125 - _tmp113 +
                                      _tmp140 * _tmp141 + _tmp143 * _tmp75) -
                           _tmp122 * (_tmp118 * _tmp125 - _tmp118 * _tmp150 - _tmp120 -
                                      _tmp133 * _tmp153 + _tmp133 * _tmp154) -
                           _tmp81 * (_tmp125 * _tmp76 + _tmp138 * _tmp151 - _tmp144 * _tmp34 -
                                     _tmp150 * _tmp76 - _tmp77));
  _res(2, 0) = -_tmp160 * (-_tmp129 * _tmp157 - _tmp129 * _tmp161 + _tmp143 * _tmp156 +
                           _tmp148 * _tmp159 + _tmp163 * _tmp71 + _tmp164 * _tmp71);
  _res(3, 0) = -_tmp165 * (_tmp105 * _tmp149 - _tmp138 * _tmp166 - _tmp138 * _tmp167 +
                           _tmp140 * _tmp168 - _tmp163 - _tmp164);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp123 *
      (-_tmp106 * (_tmp126 * _tmp96 + _tmp141 * _tmp180 - _tmp178 * _tmp95 + _tmp181 * _tmp75) -
       _tmp117 * (-_tmp111 * _tmp178 + _tmp112 * _tmp126 + _tmp141 * _tmp176 + _tmp177 * _tmp75) -
       _tmp122 * (_tmp118 * _tmp126 - _tmp118 * _tmp179 - _tmp153 * _tmp174 + _tmp154 * _tmp174) -
       _tmp81 * (_tmp126 * _tmp76 + _tmp151 * _tmp173 - _tmp178 * _tmp34 - _tmp179 * _tmp76));
  _res(2, 1) = -_tmp160 * (_tmp156 * _tmp177 - _tmp157 * _tmp171 + _tmp159 * _tmp181 -
                           _tmp161 * _tmp171 + _tmp182 * _tmp71 + _tmp183 * _tmp71);
  _res(3, 1) = -_tmp165 * (_tmp105 * _tmp180 * _tmp73 - _tmp166 * _tmp173 - _tmp167 * _tmp173 +
                           _tmp168 * _tmp176 - _tmp182 - _tmp183);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
