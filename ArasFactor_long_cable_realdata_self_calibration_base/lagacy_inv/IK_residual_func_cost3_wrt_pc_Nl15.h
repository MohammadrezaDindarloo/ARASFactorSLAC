// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl15
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl15(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 358

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (135)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = 2 * _tmp0 * _tmp1;
  const Scalar _tmp3 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp4 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp5 = _tmp3 * _tmp4;
  const Scalar _tmp6 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp7 = 2 * _tmp3;
  const Scalar _tmp8 = _tmp0 * _tmp7;
  const Scalar _tmp9 = _tmp1 * _tmp4;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp8 + Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp12 = 1 - 2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp13 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp10 + _tmp13;
  const Scalar _tmp15 = _tmp14 + _tmp6;
  const Scalar _tmp16 = _tmp15 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp17 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp17;
  const Scalar _tmp19 = _tmp1 * _tmp7;
  const Scalar _tmp20 = _tmp0 * _tmp4;
  const Scalar _tmp21 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp2 - Scalar(0.20999999999999999) * _tmp5;
  const Scalar _tmp23 = _tmp21 - _tmp22;
  const Scalar _tmp24 = _tmp18 + _tmp23;
  const Scalar _tmp25 = _tmp24 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp26 = Scalar(1.0) / (_tmp25);
  const Scalar _tmp27 = _tmp10 - _tmp13;
  const Scalar _tmp28 = _tmp27 + _tmp6;
  const Scalar _tmp29 = _tmp28 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = _tmp26 * _tmp29;
  const Scalar _tmp31 = -_tmp18;
  const Scalar _tmp32 = _tmp21 + _tmp22;
  const Scalar _tmp33 = _tmp31 + _tmp32;
  const Scalar _tmp34 = _tmp33 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp35 = -_tmp6;
  const Scalar _tmp36 = _tmp14 + _tmp35;
  const Scalar _tmp37 = _tmp36 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp38 = std::pow(Scalar(std::pow(_tmp34, Scalar(2)) + std::pow(_tmp37, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp39 = _tmp34 * _tmp38;
  const Scalar _tmp40 = _tmp37 * _tmp38;
  const Scalar _tmp41 = Scalar(1.0) / (_tmp30 * _tmp39 - _tmp40);
  const Scalar _tmp42 = Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp43 = -Scalar(0.010999999999999999) * _tmp11 -
                        Scalar(0.010999999999999999) * _tmp17 + Scalar(-0.010999999999999999);
  const Scalar _tmp44 = Scalar(0.20999999999999999) * _tmp19 - Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp45 = _tmp43 - _tmp44;
  const Scalar _tmp46 = _tmp42 + _tmp45;
  const Scalar _tmp47 = -_tmp42;
  const Scalar _tmp48 = _tmp43 + _tmp44 + _tmp47;
  const Scalar _tmp49 = _tmp41 * (-_tmp39 * _tmp46 + _tmp39 * _tmp48);
  const Scalar _tmp50 = Scalar(1.0) * _tmp24;
  const Scalar _tmp51 = Scalar(1.0) * _tmp28;
  const Scalar _tmp52 = (-_tmp33 + _tmp50) / (_tmp36 - _tmp51);
  const Scalar _tmp53 = _tmp30 * _tmp48;
  const Scalar _tmp54 = _tmp41 * (-_tmp39 * _tmp53 + _tmp40 * _tmp46);
  const Scalar _tmp55 = -Scalar(1.0) * _tmp49 + Scalar(1.0) * _tmp52 * _tmp54;
  const Scalar _tmp56 = _tmp23 + _tmp31;
  const Scalar _tmp57 = _tmp56 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp58 = _tmp27 + _tmp35;
  const Scalar _tmp59 = _tmp58 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp60 = std::pow(Scalar(std::pow(_tmp57, Scalar(2)) + std::pow(_tmp59, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp61 = _tmp57 * _tmp60;
  const Scalar _tmp62 = _tmp59 * _tmp60;
  const Scalar _tmp63 = _tmp30 * _tmp61 - _tmp62;
  const Scalar _tmp64 = _tmp45 + _tmp47;
  const Scalar _tmp65 = _tmp48 * _tmp61 - _tmp49 * _tmp63 -
                        _tmp52 * (-_tmp53 * _tmp61 - _tmp54 * _tmp63 + _tmp62 * _tmp64) -
                        _tmp61 * _tmp64;
  const Scalar _tmp66 = Scalar(1.0) / (_tmp65);
  const Scalar _tmp67 =
      std::sqrt(Scalar(std::pow(_tmp25, Scalar(2)) + std::pow(_tmp29, Scalar(2))));
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp26 * _tmp67;
  const Scalar _tmp70 = _tmp69 * (_tmp24 * _tmp29 * _tmp68 - _tmp25 * _tmp28 * _tmp68);
  const Scalar _tmp71 = _tmp41 * (-_tmp33 * _tmp40 + _tmp36 * _tmp39 + _tmp39 * _tmp70);
  const Scalar _tmp72 = -_tmp56 * _tmp62 + _tmp58 * _tmp61 + _tmp61 * _tmp70 - _tmp63 * _tmp71;
  const Scalar _tmp73 = _tmp66 * _tmp72;
  const Scalar _tmp74 = Scalar(1.0) / (_tmp72);
  const Scalar _tmp75 = _tmp65 * _tmp74;
  const Scalar _tmp76 = _tmp55 + _tmp75 * (-_tmp55 * _tmp73 - Scalar(1.0) * _tmp71);
  const Scalar _tmp77 = _tmp63 * _tmp66;
  const Scalar _tmp78 = -_tmp76 * _tmp77 + Scalar(1.0);
  const Scalar _tmp79 = _tmp39 * _tmp41;
  const Scalar _tmp80 = _tmp66 * _tmp76;
  const Scalar _tmp81 = _tmp61 * _tmp80 + _tmp78 * _tmp79;
  const Scalar _tmp82 = _tmp18 + _tmp32;
  const Scalar _tmp83 = _tmp82 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp84 = std::pow(_tmp83, Scalar(2));
  const Scalar _tmp85 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp86 = _tmp84 + _tmp85;
  const Scalar _tmp87 = std::pow(_tmp86, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp88 = _tmp87 * fh1;
  const Scalar _tmp89 = _tmp69 * _tmp88;
  const Scalar _tmp90 = _tmp81 * _tmp89;
  const Scalar _tmp91 = _tmp30 * _tmp49 - _tmp48 - _tmp52 * (_tmp30 * _tmp54 + _tmp53);
  const Scalar _tmp92 = _tmp75 * (_tmp30 * _tmp71 - _tmp70 - _tmp73 * _tmp91) + _tmp91;
  const Scalar _tmp93 = _tmp66 * _tmp92;
  const Scalar _tmp94 = -_tmp30 - _tmp77 * _tmp92;
  const Scalar _tmp95 = _tmp61 * _tmp93 + _tmp79 * _tmp94 + Scalar(1.0);
  const Scalar _tmp96 = _tmp89 * _tmp95;
  const Scalar _tmp97 = _tmp15 * _tmp87;
  const Scalar _tmp98 = _tmp82 * _tmp87;
  const Scalar _tmp99 = _tmp16 * _tmp98 - _tmp83 * _tmp97;
  const Scalar _tmp100 = Scalar(1.0) * _tmp74;
  const Scalar _tmp101 = _tmp69 * (_tmp100 * _tmp61 - _tmp100 * _tmp63 * _tmp79);
  const Scalar _tmp102 = _tmp101 * fh1;
  const Scalar _tmp103 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp104 = _tmp50 + _tmp51 * _tmp52;
  const Scalar _tmp105 = 0;
  const Scalar _tmp106 = _tmp105 * _tmp66;
  const Scalar _tmp107 = _tmp105 * _tmp77;
  const Scalar _tmp108 =
      std::exp(_tmp102 * _tmp99 + _tmp103 * _tmp69 * (_tmp106 * _tmp61 - _tmp107 * _tmp79) +
               _tmp16 * _tmp90 + _tmp83 * _tmp96);
  const Scalar _tmp109 = std::pow(_tmp86, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp110 = _tmp109 * _tmp15;
  const Scalar _tmp111 = _tmp109 * _tmp82;
  const Scalar _tmp112 = _tmp16 * _tmp83;
  const Scalar _tmp113 = -_tmp110 * _tmp84 + _tmp111 * _tmp112 + _tmp97;
  const Scalar _tmp114 = _tmp109 * fh1;
  const Scalar _tmp115 = _tmp112 * _tmp114;
  const Scalar _tmp116 = _tmp69 * _tmp81;
  const Scalar _tmp117 = _tmp114 * _tmp84;
  const Scalar _tmp118 = _tmp69 * _tmp95;
  const Scalar _tmp119 = _tmp100 * fh1;
  const Scalar _tmp120 = _tmp119 * _tmp99;
  const Scalar _tmp121 = _tmp41 * _tmp63;
  const Scalar _tmp122 = _tmp41 * _tmp88;
  const Scalar _tmp123 = _tmp122 * _tmp78;
  const Scalar _tmp124 = _tmp122 * _tmp94;
  const Scalar _tmp125 = std::exp(_tmp103 * _tmp107 * _tmp41 + _tmp120 * _tmp121 -
                                  _tmp123 * _tmp16 - _tmp124 * _tmp83);
  const Scalar _tmp126 = _tmp41 * _tmp78;
  const Scalar _tmp127 = _tmp113 * _tmp119;
  const Scalar _tmp128 = _tmp41 * _tmp94;
  const Scalar _tmp129 = _tmp80 * _tmp88;
  const Scalar _tmp130 = _tmp88 * _tmp93;
  const Scalar _tmp131 =
      std::exp(-_tmp103 * _tmp106 - _tmp120 - _tmp129 * _tmp16 - _tmp130 * _tmp83);
  const Scalar _tmp132 = fh1 * (-_tmp110 * _tmp112 + _tmp111 * _tmp85 - _tmp98);
  const Scalar _tmp133 = _tmp114 * _tmp85;
  const Scalar _tmp134 = _tmp100 * _tmp132;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp108 * (-_tmp102 * _tmp113 - _tmp115 * _tmp116 - _tmp117 * _tmp118 + _tmp96);
  _res(2, 0) = -_tmp125 * (_tmp115 * _tmp126 + _tmp117 * _tmp128 - _tmp121 * _tmp127 - _tmp124);
  _res(3, 0) = -_tmp131 * (_tmp115 * _tmp80 + _tmp117 * _tmp93 + _tmp127 - _tmp130);
  _res(0, 1) = 0;
  _res(1, 1) = -_tmp108 * (-_tmp101 * _tmp132 - _tmp115 * _tmp118 - _tmp116 * _tmp133 + _tmp90);
  _res(2, 1) = -_tmp125 * (_tmp115 * _tmp128 - _tmp121 * _tmp134 - _tmp123 + _tmp126 * _tmp133);
  _res(3, 1) = -_tmp131 * (_tmp115 * _tmp93 - _tmp129 + _tmp133 * _tmp80 + _tmp134);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
