// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl2
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl2(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 717

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (240)
  const Scalar _tmp0 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp6 = 2 * _tmp0 * _tmp5;
  const Scalar _tmp7 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp8 = _tmp2 * _tmp7;
  const Scalar _tmp9 = -Scalar(0.010999999999999999) * _tmp6 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp10 = 2 * _tmp2;
  const Scalar _tmp11 = _tmp10 * _tmp5;
  const Scalar _tmp12 = _tmp0 * _tmp7;
  const Scalar _tmp13 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp13 + _tmp9;
  const Scalar _tmp15 = _tmp14 + _tmp4;
  const Scalar _tmp16 = _tmp15 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp17 = Scalar(1.0) / (_tmp16);
  const Scalar _tmp18 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp19 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp19 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp21 = _tmp0 * _tmp10;
  const Scalar _tmp22 = _tmp5 * _tmp7;
  const Scalar _tmp23 =
      -Scalar(0.010999999999999999) * _tmp21 + Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = _tmp20 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = _tmp18 + _tmp28;
  const Scalar _tmp30 = std::sqrt(_tmp29);
  const Scalar _tmp31 = _tmp17 * _tmp30;
  const Scalar _tmp32 = -_tmp4;
  const Scalar _tmp33 = _tmp14 + _tmp32;
  const Scalar _tmp34 = _tmp33 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp35 = _tmp23 - _tmp24;
  const Scalar _tmp36 = _tmp20 + _tmp35;
  const Scalar _tmp37 = _tmp36 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp38 = std::pow(Scalar(std::pow(_tmp34, Scalar(2)) + std::pow(_tmp37, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp39 = _tmp34 * _tmp38;
  const Scalar _tmp40 = Scalar(1.0) / (_tmp30);
  const Scalar _tmp41 = _tmp26 * _tmp40;
  const Scalar _tmp42 = _tmp15 * _tmp40;
  const Scalar _tmp43 = -_tmp16 * _tmp41 + _tmp27 * _tmp42;
  const Scalar _tmp44 = _tmp31 * _tmp43;
  const Scalar _tmp45 = -_tmp13 + _tmp9;
  const Scalar _tmp46 = _tmp4 + _tmp45;
  const Scalar _tmp47 = _tmp46 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp48 = std::pow(_tmp47, Scalar(2));
  const Scalar _tmp49 = -_tmp20;
  const Scalar _tmp50 = _tmp25 + _tmp49;
  const Scalar _tmp51 = _tmp50 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp52 = _tmp48 + std::pow(_tmp51, Scalar(2));
  const Scalar _tmp53 = std::pow(_tmp52, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp54 = _tmp51 * _tmp53;
  const Scalar _tmp55 = _tmp47 * _tmp53;
  const Scalar _tmp56 = _tmp44 * _tmp55 - _tmp46 * _tmp54 + _tmp50 * _tmp55;
  const Scalar _tmp57 = _tmp37 * _tmp38;
  const Scalar _tmp58 = _tmp17 * _tmp27;
  const Scalar _tmp59 = _tmp39 * _tmp58 - _tmp57;
  const Scalar _tmp60 = -_tmp54 + _tmp55 * _tmp58;
  const Scalar _tmp61 = Scalar(1.0) / (_tmp60);
  const Scalar _tmp62 = _tmp59 * _tmp61;
  const Scalar _tmp63 = -_tmp33 * _tmp57 + _tmp36 * _tmp39 + _tmp39 * _tmp44 - _tmp56 * _tmp62;
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = Scalar(1.0) * _tmp64;
  const Scalar _tmp66 = _tmp39 * _tmp65;
  const Scalar _tmp67 = _tmp55 * _tmp62;
  const Scalar _tmp68 = _tmp35 + _tmp49;
  const Scalar _tmp69 = _tmp32 + _tmp45;
  const Scalar _tmp70 = _tmp69 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp71 = _tmp68 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp72 = std::pow(Scalar(std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp73 = _tmp70 * _tmp72;
  const Scalar _tmp74 = _tmp71 * _tmp72;
  const Scalar _tmp75 = fh1 * (-_tmp68 * _tmp73 + _tmp69 * _tmp74);
  const Scalar _tmp76 = _tmp75 * (-_tmp65 * _tmp67 + _tmp66);
  const Scalar _tmp77 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp78 = Scalar(1.0) * _tmp26;
  const Scalar _tmp79 = Scalar(1.0) * _tmp15;
  const Scalar _tmp80 = (-_tmp46 + _tmp79) / (_tmp50 - _tmp78);
  const Scalar _tmp81 = _tmp78 * _tmp80 + _tmp79;
  const Scalar _tmp82 = 0;
  const Scalar _tmp83 = Scalar(0.20999999999999999) * _tmp6 - Scalar(0.20999999999999999) * _tmp8;
  const Scalar _tmp84 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp85 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp86 = _tmp84 + _tmp85;
  const Scalar _tmp87 = _tmp83 + _tmp86;
  const Scalar _tmp88 = _tmp39 * _tmp87;
  const Scalar _tmp89 = -_tmp83 + _tmp86;
  const Scalar _tmp90 = _tmp83 + _tmp84 - _tmp85;
  const Scalar _tmp91 = _tmp55 * _tmp87;
  const Scalar _tmp92 = -_tmp55 * _tmp90 + _tmp91;
  const Scalar _tmp93 = _tmp54 * _tmp90 - _tmp58 * _tmp91;
  const Scalar _tmp94 = -_tmp39 * _tmp89 - _tmp62 * _tmp92 -
                        _tmp80 * (_tmp57 * _tmp89 - _tmp58 * _tmp88 - _tmp62 * _tmp93) + _tmp88;
  const Scalar _tmp95 = Scalar(1.0) / (_tmp94);
  const Scalar _tmp96 = _tmp39 * _tmp95;
  const Scalar _tmp97 = _tmp82 * _tmp96;
  const Scalar _tmp98 = _tmp55 * _tmp61;
  const Scalar _tmp99 = _tmp59 * _tmp95;
  const Scalar _tmp100 = _tmp82 * _tmp99;
  const Scalar _tmp101 = _tmp77 * (-_tmp100 * _tmp98 + _tmp97);
  const Scalar _tmp102 = _tmp61 * _tmp93;
  const Scalar _tmp103 = _tmp58 * _tmp61;
  const Scalar _tmp104 = _tmp103 * _tmp92 - _tmp80 * (_tmp102 * _tmp58 + _tmp58 * _tmp87) - _tmp87;
  const Scalar _tmp105 = _tmp104 * _tmp95;
  const Scalar _tmp106 = _tmp56 * _tmp61;
  const Scalar _tmp107 = -_tmp105 * _tmp63 + _tmp106 * _tmp58 - _tmp44;
  const Scalar _tmp108 = _tmp64 * _tmp94;
  const Scalar _tmp109 = _tmp104 + _tmp107 * _tmp108;
  const Scalar _tmp110 = -_tmp109 * _tmp99 - _tmp58;
  const Scalar _tmp111 = _tmp109 * _tmp96;
  const Scalar _tmp112 = _tmp73 * fh1;
  const Scalar _tmp113 = _tmp112 * (_tmp110 * _tmp98 + _tmp111 + Scalar(1.0));
  const Scalar _tmp114 = Scalar(1.0) * _tmp61;
  const Scalar _tmp115 = _tmp80 * _tmp93;
  const Scalar _tmp116 = _tmp114 * _tmp115 - _tmp114 * _tmp92;
  const Scalar _tmp117 = _tmp116 * _tmp95;
  const Scalar _tmp118 = -_tmp114 * _tmp56 - _tmp117 * _tmp63;
  const Scalar _tmp119 = _tmp108 * _tmp118 + _tmp116;
  const Scalar _tmp120 = -_tmp119 * _tmp99 + Scalar(1.0);
  const Scalar _tmp121 = _tmp119 * _tmp96;
  const Scalar _tmp122 = _tmp74 * fh1;
  const Scalar _tmp123 = _tmp122 * (_tmp120 * _tmp98 + _tmp121);
  const Scalar _tmp124 =
      std::exp(_tmp101 * _tmp31 + _tmp113 * _tmp31 + _tmp123 * _tmp31 + _tmp31 * _tmp76);
  const Scalar _tmp125 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp126 = _tmp125 * _tmp30;
  const Scalar _tmp127 = _tmp113 * _tmp40;
  const Scalar _tmp128 = _tmp123 * _tmp40;
  const Scalar _tmp129 = _tmp40 * _tmp76;
  const Scalar _tmp130 = _tmp126 * _tmp43;
  const Scalar _tmp131 = _tmp125 * _tmp27;
  const Scalar _tmp132 = std::pow(_tmp60, Scalar(-2));
  const Scalar _tmp133 = _tmp132 * _tmp55;
  const Scalar _tmp134 = _tmp133 * _tmp56;
  const Scalar _tmp135 = _tmp131 * _tmp134;
  const Scalar _tmp136 = std::pow(_tmp29, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp137 = _tmp136 * _tmp26;
  const Scalar _tmp138 = _tmp136 * _tmp15;
  const Scalar _tmp139 = _tmp16 * _tmp27;
  const Scalar _tmp140 = _tmp31 * (-_tmp137 * _tmp18 + _tmp138 * _tmp139 + _tmp41);
  const Scalar _tmp141 = _tmp40 * _tmp43;
  const Scalar _tmp142 = _tmp141 * _tmp55;
  const Scalar _tmp143 = _tmp130 * _tmp55 + _tmp140 * _tmp55 - _tmp142;
  const Scalar _tmp144 = _tmp106 * _tmp131;
  const Scalar _tmp145 = _tmp141 * _tmp39;
  const Scalar _tmp146 = _tmp130 * _tmp39 + _tmp135 * _tmp59 + _tmp140 * _tmp39 - _tmp143 * _tmp62 -
                         _tmp144 * _tmp39 - _tmp145;
  const Scalar _tmp147 = std::pow(_tmp63, Scalar(-2));
  const Scalar _tmp148 = _tmp147 * _tmp94;
  const Scalar _tmp149 = _tmp118 * _tmp148;
  const Scalar _tmp150 = _tmp131 * _tmp92;
  const Scalar _tmp151 = _tmp150 * _tmp61;
  const Scalar _tmp152 = _tmp133 * _tmp150;
  const Scalar _tmp153 = _tmp59 * _tmp93;
  const Scalar _tmp154 = _tmp131 * _tmp133;
  const Scalar _tmp155 = _tmp131 * _tmp91;
  const Scalar _tmp156 = _tmp102 * _tmp131;
  const Scalar _tmp157 =
      -_tmp151 * _tmp39 + _tmp152 * _tmp59 -
      _tmp80 * (-_tmp131 * _tmp88 + _tmp153 * _tmp154 + _tmp155 * _tmp62 - _tmp156 * _tmp39);
  const Scalar _tmp158 = std::pow(_tmp94, Scalar(-2));
  const Scalar _tmp159 = _tmp157 * _tmp158;
  const Scalar _tmp160 = _tmp116 * _tmp63;
  const Scalar _tmp161 = Scalar(1.0) * _tmp115;
  const Scalar _tmp162 = _tmp114 * _tmp80;
  const Scalar _tmp163 = Scalar(1.0) * _tmp152 - _tmp154 * _tmp161 - _tmp155 * _tmp162;
  const Scalar _tmp164 = _tmp63 * _tmp95;
  const Scalar _tmp165 = _tmp157 * _tmp64;
  const Scalar _tmp166 = _tmp108 * (-_tmp114 * _tmp143 - _tmp117 * _tmp146 + Scalar(1.0) * _tmp135 +
                                    _tmp159 * _tmp160 - _tmp163 * _tmp164) +
                         _tmp118 * _tmp165 - _tmp146 * _tmp149 + _tmp163;
  const Scalar _tmp167 = _tmp48 / _tmp52;
  const Scalar _tmp168 = _tmp120 * _tmp167;
  const Scalar _tmp169 = _tmp131 * _tmp132;
  const Scalar _tmp170 = _tmp159 * _tmp59;
  const Scalar _tmp171 = _tmp119 * _tmp170 - _tmp121 * _tmp131 - _tmp166 * _tmp99;
  const Scalar _tmp172 = _tmp159 * _tmp39;
  const Scalar _tmp173 = _tmp122 * _tmp31;
  const Scalar _tmp174 = Scalar(1.0) * _tmp147;
  const Scalar _tmp175 = _tmp146 * _tmp174;
  const Scalar _tmp176 = _tmp167 * _tmp169;
  const Scalar _tmp177 = _tmp59 * _tmp65;
  const Scalar _tmp178 = _tmp114 * _tmp131 * _tmp39 * _tmp64;
  const Scalar _tmp179 = _tmp31 * _tmp75;
  const Scalar _tmp180 = _tmp104 * _tmp63;
  const Scalar _tmp181 = _tmp28 / [&]() {
    const Scalar base = _tmp16;
    return base * base * base;
  }();
  const Scalar _tmp182 = _tmp61 * _tmp91;
  const Scalar _tmp183 = _tmp133 * _tmp93;
  const Scalar _tmp184 =
      -_tmp133 * _tmp181 * _tmp92 + _tmp151 -
      _tmp80 * (_tmp131 * _tmp87 + _tmp156 - _tmp181 * _tmp182 - _tmp181 * _tmp183);
  const Scalar _tmp185 = _tmp107 * _tmp148;
  const Scalar _tmp186 =
      _tmp107 * _tmp165 +
      _tmp108 * (_tmp103 * _tmp143 - _tmp105 * _tmp146 - _tmp130 - _tmp134 * _tmp181 - _tmp140 +
                 _tmp141 + _tmp144 + _tmp159 * _tmp180 - _tmp164 * _tmp184) -
      _tmp146 * _tmp185 + _tmp184;
  const Scalar _tmp187 = _tmp109 * _tmp170 - _tmp111 * _tmp131 - _tmp131 - _tmp186 * _tmp99;
  const Scalar _tmp188 = _tmp109 * _tmp39;
  const Scalar _tmp189 = _tmp112 * _tmp31;
  const Scalar _tmp190 = _tmp101 * _tmp40;
  const Scalar _tmp191 = _tmp67 * _tmp82;
  const Scalar _tmp192 = _tmp31 * _tmp77;
  const Scalar _tmp193 = _tmp65 * _tmp75;
  const Scalar _tmp194 = _tmp61 * fh1;
  const Scalar _tmp195 = _tmp194 * _tmp73;
  const Scalar _tmp196 = _tmp194 * _tmp74;
  const Scalar _tmp197 = _tmp77 * _tmp82;
  const Scalar _tmp198 = _tmp197 * _tmp99;
  const Scalar _tmp199 =
      std::exp(-_tmp110 * _tmp195 - _tmp120 * _tmp196 + _tmp193 * _tmp62 + _tmp198 * _tmp61);
  const Scalar _tmp200 = _tmp120 * _tmp122;
  const Scalar _tmp201 = _tmp197 * _tmp95;
  const Scalar _tmp202 = _tmp201 * _tmp39;
  const Scalar _tmp203 = _tmp193 * _tmp59;
  const Scalar _tmp204 = _tmp175 * _tmp75;
  const Scalar _tmp205 = _tmp159 * _tmp197;
  const Scalar _tmp206 = _tmp112 * _tmp95;
  const Scalar _tmp207 = _tmp122 * _tmp95;
  const Scalar _tmp208 = std::exp(-_tmp109 * _tmp206 - _tmp119 * _tmp207 - _tmp193 - _tmp201);
  const Scalar _tmp209 = _tmp119 * _tmp122;
  const Scalar _tmp210 = _tmp109 * _tmp112;
  const Scalar _tmp211 = _tmp17 * _tmp61;
  const Scalar _tmp212 = _tmp211 * _tmp92;
  const Scalar _tmp213 = _tmp132 * _tmp17;
  const Scalar _tmp214 = _tmp213 * _tmp55;
  const Scalar _tmp215 = _tmp214 * _tmp92;
  const Scalar _tmp216 = _tmp17 * _tmp87;
  const Scalar _tmp217 = _tmp211 * _tmp93;
  const Scalar _tmp218 =
      _tmp212 * _tmp39 - _tmp215 * _tmp59 -
      _tmp80 * (-_tmp153 * _tmp214 + _tmp216 * _tmp39 - _tmp216 * _tmp67 + _tmp217 * _tmp39);
  const Scalar _tmp219 = _tmp158 * _tmp218;
  const Scalar _tmp220 = _tmp167 * _tmp213;
  const Scalar _tmp221 = _tmp219 * _tmp39;
  const Scalar _tmp222 = _tmp211 * _tmp55;
  const Scalar _tmp223 = _tmp110 * _tmp213;
  const Scalar _tmp224 = _tmp218 * _tmp64;
  const Scalar _tmp225 = _tmp31 * (-_tmp137 * _tmp139 + _tmp138 * _tmp28 - _tmp42);
  const Scalar _tmp226 = -_tmp142 * _tmp58 + _tmp225 * _tmp55;
  const Scalar _tmp227 = _tmp214 * _tmp56;
  const Scalar _tmp228 = _tmp211 * _tmp56;
  const Scalar _tmp229 =
      -_tmp145 * _tmp58 + _tmp225 * _tmp39 - _tmp226 * _tmp62 - _tmp227 * _tmp59 + _tmp228 * _tmp39;
  const Scalar _tmp230 =
      _tmp152 - _tmp212 - _tmp80 * (_tmp131 * _tmp182 + _tmp131 * _tmp183 - _tmp216 - _tmp217);
  const Scalar _tmp231 =
      _tmp107 * _tmp224 +
      _tmp108 * (_tmp103 * _tmp226 - _tmp105 * _tmp229 + _tmp135 + _tmp141 * _tmp58 -
                 _tmp164 * _tmp230 + _tmp180 * _tmp219 - _tmp225 - _tmp228) -
      _tmp185 * _tmp229 + _tmp230;
  const Scalar _tmp232 = _tmp219 * _tmp59;
  const Scalar _tmp233 = _tmp109 * _tmp232 + _tmp111 * _tmp17 + _tmp17 - _tmp231 * _tmp99;
  const Scalar _tmp234 = _tmp161 * _tmp214 + _tmp162 * _tmp216 * _tmp55 - Scalar(1.0) * _tmp215;
  const Scalar _tmp235 = _tmp108 * (-_tmp114 * _tmp226 - _tmp117 * _tmp229 + _tmp160 * _tmp219 -
                                    _tmp164 * _tmp234 - Scalar(1.0) * _tmp227) +
                         _tmp118 * _tmp224 - _tmp149 * _tmp229 + _tmp234;
  const Scalar _tmp236 = _tmp119 * _tmp232 + _tmp121 * _tmp17 - _tmp235 * _tmp99;
  const Scalar _tmp237 = _tmp174 * _tmp229;
  const Scalar _tmp238 = _tmp237 * _tmp75;
  const Scalar _tmp239 = _tmp197 * _tmp219;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp124 *
      (-_tmp101 * _tmp126 - _tmp113 * _tmp126 - _tmp123 * _tmp126 - _tmp126 * _tmp76 + _tmp127 +
       _tmp128 + _tmp129 -
       _tmp173 * (-_tmp119 * _tmp172 + _tmp166 * _tmp96 - _tmp168 * _tmp169 + _tmp171 * _tmp98) -
       _tmp179 * (-_tmp175 * _tmp39 + _tmp175 * _tmp67 + _tmp176 * _tmp177 - _tmp178 * _tmp55) -
       _tmp189 * (-_tmp110 * _tmp176 - _tmp159 * _tmp188 + _tmp186 * _tmp96 + _tmp187 * _tmp98) +
       _tmp190 -
       _tmp192 *
           (_tmp100 * _tmp176 - _tmp131 * _tmp97 * _tmp98 + _tmp159 * _tmp191 - _tmp172 * _tmp82));
  _res(2, 0) =
      -_tmp199 * (-_tmp110 * _tmp112 * _tmp154 - _tmp131 * _tmp202 * _tmp61 + _tmp154 * _tmp198 -
                  _tmp154 * _tmp200 + _tmp154 * _tmp203 + _tmp171 * _tmp196 - _tmp178 * _tmp75 +
                  _tmp187 * _tmp195 + _tmp204 * _tmp62 + _tmp205 * _tmp62);
  _res(3, 0) = -_tmp208 * (-_tmp159 * _tmp209 - _tmp159 * _tmp210 + _tmp166 * _tmp207 +
                           _tmp186 * _tmp206 - _tmp204 - _tmp205);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp124 *
      (_tmp127 * _tmp58 + _tmp128 * _tmp58 + _tmp129 * _tmp58 -
       _tmp173 * (-_tmp119 * _tmp221 + _tmp168 * _tmp213 + _tmp235 * _tmp96 + _tmp236 * _tmp98) -
       _tmp179 * (-_tmp177 * _tmp220 + _tmp222 * _tmp66 - _tmp237 * _tmp39 + _tmp237 * _tmp67) -
       _tmp189 * (_tmp167 * _tmp223 - _tmp188 * _tmp219 + _tmp231 * _tmp96 + _tmp233 * _tmp98) +
       _tmp190 * _tmp58 -
       _tmp192 * (-_tmp100 * _tmp220 + _tmp191 * _tmp219 - _tmp221 * _tmp82 + _tmp222 * _tmp97));
  _res(2, 1) =
      -_tmp199 * (_tmp112 * _tmp223 * _tmp55 + _tmp193 * _tmp211 * _tmp39 + _tmp195 * _tmp233 +
                  _tmp196 * _tmp236 - _tmp198 * _tmp214 + _tmp200 * _tmp214 + _tmp202 * _tmp211 -
                  _tmp203 * _tmp214 + _tmp238 * _tmp62 + _tmp239 * _tmp62);
  _res(3, 1) = -_tmp208 * (_tmp206 * _tmp231 + _tmp207 * _tmp235 - _tmp209 * _tmp219 -
                           _tmp210 * _tmp219 - _tmp238 - _tmp239);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
