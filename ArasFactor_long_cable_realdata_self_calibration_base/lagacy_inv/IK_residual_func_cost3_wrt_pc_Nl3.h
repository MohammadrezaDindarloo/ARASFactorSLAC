// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pc_Nl3
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPcNl3(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 718

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (239)
  const Scalar _tmp0 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp6 = 2 * _tmp0;
  const Scalar _tmp7 = _tmp5 * _tmp6;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp2 * _tmp8;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp7 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp2 * _tmp5;
  const Scalar _tmp12 = _tmp0 * _tmp8;
  const Scalar _tmp13 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp10 + _tmp13;
  const Scalar _tmp15 = _tmp14 + _tmp4;
  const Scalar _tmp16 = _tmp15 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp17 = Scalar(1.0) / (_tmp16);
  const Scalar _tmp18 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp19 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp19 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp22 = _tmp2 * _tmp6;
  const Scalar _tmp23 = _tmp5 * _tmp8;
  const Scalar _tmp24 =
      -Scalar(0.010999999999999999) * _tmp22 + Scalar(0.010999999999999999) * _tmp23;
  const Scalar _tmp25 = _tmp21 + _tmp24;
  const Scalar _tmp26 = _tmp20 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = _tmp18 + _tmp28;
  const Scalar _tmp30 = std::sqrt(_tmp29);
  const Scalar _tmp31 = _tmp17 * _tmp30;
  const Scalar _tmp32 = -_tmp4;
  const Scalar _tmp33 = _tmp14 + _tmp32;
  const Scalar _tmp34 = _tmp33 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp35 = std::pow(_tmp34, Scalar(2));
  const Scalar _tmp36 = -_tmp21 + _tmp24;
  const Scalar _tmp37 = _tmp20 + _tmp36;
  const Scalar _tmp38 = _tmp37 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp39 = _tmp35 + std::pow(_tmp38, Scalar(2));
  const Scalar _tmp40 = std::pow(_tmp39, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp41 = _tmp38 * _tmp40;
  const Scalar _tmp42 = _tmp17 * _tmp27;
  const Scalar _tmp43 = _tmp34 * _tmp40;
  const Scalar _tmp44 = -_tmp41 + _tmp42 * _tmp43;
  const Scalar _tmp45 = Scalar(1.0) / (_tmp44);
  const Scalar _tmp46 = Scalar(1.0) * _tmp45;
  const Scalar _tmp47 = Scalar(0.20999999999999999) * _tmp7 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp48 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp49 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp50 = _tmp48 + _tmp49;
  const Scalar _tmp51 = -_tmp47 + _tmp50;
  const Scalar _tmp52 = _tmp47 + _tmp50;
  const Scalar _tmp53 = _tmp17 * _tmp52;
  const Scalar _tmp54 = _tmp27 * _tmp53;
  const Scalar _tmp55 = _tmp41 * _tmp51 - _tmp43 * _tmp54;
  const Scalar _tmp56 = Scalar(1.0) * _tmp26;
  const Scalar _tmp57 = Scalar(1.0) * _tmp15;
  const Scalar _tmp58 = (-_tmp33 + _tmp57) / (_tmp37 - _tmp56);
  const Scalar _tmp59 = _tmp55 * _tmp58;
  const Scalar _tmp60 = _tmp43 * _tmp52;
  const Scalar _tmp61 = -_tmp43 * _tmp51 + _tmp60;
  const Scalar _tmp62 = _tmp46 * _tmp59 - _tmp46 * _tmp61;
  const Scalar _tmp63 = _tmp47 + _tmp48 - _tmp49;
  const Scalar _tmp64 = _tmp10 - _tmp13;
  const Scalar _tmp65 = _tmp4 + _tmp64;
  const Scalar _tmp66 = _tmp65 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp67 = -_tmp20;
  const Scalar _tmp68 = _tmp25 + _tmp67;
  const Scalar _tmp69 = _tmp68 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp70 = std::pow(Scalar(std::pow(_tmp66, Scalar(2)) + std::pow(_tmp69, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp71 = _tmp66 * _tmp70;
  const Scalar _tmp72 = _tmp69 * _tmp70;
  const Scalar _tmp73 = _tmp42 * _tmp71 - _tmp72;
  const Scalar _tmp74 = _tmp45 * _tmp73;
  const Scalar _tmp75 = _tmp52 * _tmp71 -
                        _tmp58 * (-_tmp54 * _tmp71 - _tmp55 * _tmp74 + _tmp63 * _tmp72) -
                        _tmp61 * _tmp74 - _tmp63 * _tmp71;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp75);
  const Scalar _tmp77 = Scalar(1.0) / (_tmp30);
  const Scalar _tmp78 = _tmp26 * _tmp77;
  const Scalar _tmp79 = _tmp15 * _tmp77;
  const Scalar _tmp80 = -_tmp16 * _tmp78 + _tmp27 * _tmp79;
  const Scalar _tmp81 = _tmp31 * _tmp80;
  const Scalar _tmp82 = -_tmp33 * _tmp41 + _tmp37 * _tmp43 + _tmp43 * _tmp81;
  const Scalar _tmp83 = -_tmp65 * _tmp72 + _tmp68 * _tmp71 + _tmp71 * _tmp81 - _tmp74 * _tmp82;
  const Scalar _tmp84 = _tmp76 * _tmp83;
  const Scalar _tmp85 = -_tmp46 * _tmp82 - _tmp62 * _tmp84;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp83);
  const Scalar _tmp87 = _tmp75 * _tmp86;
  const Scalar _tmp88 = _tmp62 + _tmp85 * _tmp87;
  const Scalar _tmp89 = _tmp71 * _tmp76;
  const Scalar _tmp90 = _tmp88 * _tmp89;
  const Scalar _tmp91 = _tmp73 * _tmp76;
  const Scalar _tmp92 = -_tmp88 * _tmp91 + Scalar(1.0);
  const Scalar _tmp93 = _tmp43 * _tmp45;
  const Scalar _tmp94 = _tmp36 + _tmp67;
  const Scalar _tmp95 = _tmp94 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp96 = _tmp32 + _tmp64;
  const Scalar _tmp97 = _tmp96 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp98 = std::pow(Scalar(std::pow(_tmp95, Scalar(2)) + std::pow(_tmp97, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp99 = _tmp95 * _tmp98;
  const Scalar _tmp100 = _tmp99 * fh1;
  const Scalar _tmp101 = _tmp100 * (_tmp90 + _tmp92 * _tmp93);
  const Scalar _tmp102 = Scalar(1.0) * _tmp86;
  const Scalar _tmp103 = _tmp102 * _tmp71;
  const Scalar _tmp104 = _tmp43 * _tmp74;
  const Scalar _tmp105 = _tmp97 * _tmp98;
  const Scalar _tmp106 = fh1 * (-_tmp105 * _tmp94 + _tmp96 * _tmp99);
  const Scalar _tmp107 = _tmp106 * (-_tmp102 * _tmp104 + _tmp103);
  const Scalar _tmp108 = _tmp56 * _tmp58 + _tmp57;
  const Scalar _tmp109 = 0;
  const Scalar _tmp110 = _tmp109 * _tmp76;
  const Scalar _tmp111 = _tmp110 * _tmp71;
  const Scalar _tmp112 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp113 = _tmp112 * (-_tmp104 * _tmp110 + _tmp111);
  const Scalar _tmp114 = _tmp42 * _tmp45;
  const Scalar _tmp115 = _tmp114 * _tmp61 - _tmp52 - _tmp58 * (_tmp114 * _tmp55 + _tmp54);
  const Scalar _tmp116 = _tmp114 * _tmp82 - _tmp115 * _tmp84 - _tmp81;
  const Scalar _tmp117 = _tmp116 * _tmp86;
  const Scalar _tmp118 = _tmp115 + _tmp117 * _tmp75;
  const Scalar _tmp119 = _tmp118 * _tmp89;
  const Scalar _tmp120 = -_tmp118 * _tmp91 - _tmp42;
  const Scalar _tmp121 = _tmp105 * fh1;
  const Scalar _tmp122 = _tmp121 * (_tmp119 + _tmp120 * _tmp93 + Scalar(1.0));
  const Scalar _tmp123 =
      std::exp(_tmp101 * _tmp31 + _tmp107 * _tmp31 + _tmp113 * _tmp31 + _tmp122 * _tmp31);
  const Scalar _tmp124 = _tmp101 * _tmp77;
  const Scalar _tmp125 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp126 = _tmp125 * _tmp30;
  const Scalar _tmp127 = _tmp113 * _tmp77;
  const Scalar _tmp128 = _tmp125 * _tmp27;
  const Scalar _tmp129 = _tmp128 * _tmp45;
  const Scalar _tmp130 = _tmp129 * _tmp61;
  const Scalar _tmp131 = _tmp43 * _tmp61;
  const Scalar _tmp132 = std::pow(_tmp44, Scalar(-2));
  const Scalar _tmp133 = _tmp128 * _tmp132;
  const Scalar _tmp134 = _tmp131 * _tmp133;
  const Scalar _tmp135 = _tmp128 * _tmp52;
  const Scalar _tmp136 = _tmp43 * _tmp55;
  const Scalar _tmp137 = _tmp133 * _tmp136;
  const Scalar _tmp138 = _tmp129 * _tmp55;
  const Scalar _tmp139 =
      -_tmp130 * _tmp71 + _tmp134 * _tmp73 -
      _tmp58 * (_tmp104 * _tmp135 - _tmp135 * _tmp71 + _tmp137 * _tmp73 - _tmp138 * _tmp71);
  const Scalar _tmp140 = std::pow(_tmp75, Scalar(-2));
  const Scalar _tmp141 = _tmp139 * _tmp140;
  const Scalar _tmp142 = _tmp118 * _tmp71;
  const Scalar _tmp143 = _tmp141 * _tmp73;
  const Scalar _tmp144 = _tmp129 * _tmp82;
  const Scalar _tmp145 = std::pow(_tmp29, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp146 = _tmp145 * _tmp26;
  const Scalar _tmp147 = _tmp145 * _tmp15;
  const Scalar _tmp148 = _tmp16 * _tmp27;
  const Scalar _tmp149 = _tmp31 * (-_tmp146 * _tmp18 + _tmp147 * _tmp148 + _tmp78);
  const Scalar _tmp150 = _tmp126 * _tmp80;
  const Scalar _tmp151 = _tmp77 * _tmp80;
  const Scalar _tmp152 = _tmp151 * _tmp71;
  const Scalar _tmp153 = _tmp151 * _tmp43;
  const Scalar _tmp154 = _tmp149 * _tmp43 + _tmp150 * _tmp43 - _tmp153;
  const Scalar _tmp155 = _tmp43 * _tmp82;
  const Scalar _tmp156 = _tmp133 * _tmp155;
  const Scalar _tmp157 = -_tmp144 * _tmp71 + _tmp149 * _tmp71 + _tmp150 * _tmp71 - _tmp152 -
                         _tmp154 * _tmp74 + _tmp156 * _tmp73;
  const Scalar _tmp158 = std::pow(_tmp83, Scalar(-2));
  const Scalar _tmp159 = _tmp158 * _tmp75;
  const Scalar _tmp160 = _tmp157 * _tmp159;
  const Scalar _tmp161 = _tmp28 / [&]() {
    const Scalar base = _tmp16;
    return base * base * base;
  }();
  const Scalar _tmp162 = _tmp132 * _tmp161;
  const Scalar _tmp163 = _tmp115 * _tmp76;
  const Scalar _tmp164 =
      _tmp130 - _tmp131 * _tmp162 -
      _tmp58 * (_tmp135 - _tmp136 * _tmp162 + _tmp138 - _tmp161 * _tmp45 * _tmp60);
  const Scalar _tmp165 = _tmp115 * _tmp83;
  const Scalar _tmp166 =
      -_tmp116 * _tmp160 + _tmp117 * _tmp139 + _tmp164 +
      _tmp87 * (_tmp114 * _tmp154 + _tmp141 * _tmp165 + _tmp144 - _tmp149 - _tmp150 + _tmp151 -
                _tmp155 * _tmp162 - _tmp157 * _tmp163 - _tmp164 * _tmp84);
  const Scalar _tmp167 = _tmp118 * _tmp143 - _tmp119 * _tmp128 - _tmp128 - _tmp166 * _tmp91;
  const Scalar _tmp168 = _tmp35 / _tmp39;
  const Scalar _tmp169 = _tmp120 * _tmp168;
  const Scalar _tmp170 = _tmp121 * _tmp31;
  const Scalar _tmp171 = _tmp122 * _tmp77;
  const Scalar _tmp172 = _tmp71 * _tmp88;
  const Scalar _tmp173 = _tmp85 * _tmp86;
  const Scalar _tmp174 = _tmp62 * _tmp83;
  const Scalar _tmp175 = _tmp62 * _tmp76;
  const Scalar _tmp176 = _tmp43 * _tmp46;
  const Scalar _tmp177 = _tmp176 * _tmp58;
  const Scalar _tmp178 = Scalar(1.0) * _tmp59;
  const Scalar _tmp179 = _tmp133 * _tmp43;
  const Scalar _tmp180 = Scalar(1.0) * _tmp134 - _tmp135 * _tmp177 - _tmp178 * _tmp179;
  const Scalar _tmp181 = _tmp139 * _tmp173 - _tmp160 * _tmp85 + _tmp180 +
                         _tmp87 * (_tmp141 * _tmp174 - _tmp154 * _tmp46 + Scalar(1.0) * _tmp156 -
                                   _tmp157 * _tmp175 - _tmp180 * _tmp84);
  const Scalar _tmp182 = -_tmp128 * _tmp90 + _tmp143 * _tmp88 - _tmp181 * _tmp91;
  const Scalar _tmp183 = _tmp133 * _tmp168;
  const Scalar _tmp184 = _tmp100 * _tmp31;
  const Scalar _tmp185 = Scalar(1.0) * _tmp158;
  const Scalar _tmp186 = _tmp104 * _tmp185;
  const Scalar _tmp187 = _tmp185 * _tmp71;
  const Scalar _tmp188 = _tmp128 * _tmp71 * _tmp86;
  const Scalar _tmp189 = _tmp106 * _tmp31;
  const Scalar _tmp190 = _tmp107 * _tmp77;
  const Scalar _tmp191 = _tmp104 * _tmp109;
  const Scalar _tmp192 = _tmp109 * _tmp71;
  const Scalar _tmp193 = _tmp112 * _tmp31;
  const Scalar _tmp194 = _tmp102 * _tmp106;
  const Scalar _tmp195 = _tmp110 * _tmp112;
  const Scalar _tmp196 = _tmp121 * _tmp45;
  const Scalar _tmp197 = _tmp100 * _tmp45;
  const Scalar _tmp198 =
      std::exp(-_tmp120 * _tmp196 + _tmp194 * _tmp74 + _tmp195 * _tmp74 - _tmp197 * _tmp92);
  const Scalar _tmp199 = _tmp106 * _tmp185;
  const Scalar _tmp200 = _tmp157 * _tmp199;
  const Scalar _tmp201 = _tmp109 * _tmp112;
  const Scalar _tmp202 = _tmp201 * _tmp43;
  const Scalar _tmp203 = _tmp100 * _tmp43;
  const Scalar _tmp204 = _tmp120 * _tmp121;
  const Scalar _tmp205 = _tmp141 * _tmp201;
  const Scalar _tmp206 = _tmp121 * _tmp76;
  const Scalar _tmp207 = _tmp100 * _tmp76;
  const Scalar _tmp208 = std::exp(-_tmp118 * _tmp206 - _tmp194 - _tmp195 - _tmp207 * _tmp88);
  const Scalar _tmp209 = _tmp100 * _tmp88;
  const Scalar _tmp210 = _tmp118 * _tmp121;
  const Scalar _tmp211 = _tmp132 * _tmp17;
  const Scalar _tmp212 = _tmp211 * _tmp73;
  const Scalar _tmp213 = _tmp17 * _tmp45;
  const Scalar _tmp214 = _tmp213 * _tmp43;
  const Scalar _tmp215 = _tmp213 * _tmp82;
  const Scalar _tmp216 = _tmp31 * (-_tmp146 * _tmp148 + _tmp147 * _tmp28 - _tmp79);
  const Scalar _tmp217 = -_tmp153 * _tmp42 + _tmp216 * _tmp43;
  const Scalar _tmp218 = _tmp155 * _tmp211;
  const Scalar _tmp219 =
      -_tmp152 * _tmp42 + _tmp215 * _tmp71 + _tmp216 * _tmp71 - _tmp217 * _tmp74 - _tmp218 * _tmp73;
  const Scalar _tmp220 = _tmp211 * _tmp91;
  const Scalar _tmp221 = _tmp213 * _tmp61;
  const Scalar _tmp222 = _tmp131 * _tmp211;
  const Scalar _tmp223 = _tmp213 * _tmp55;
  const Scalar _tmp224 =
      _tmp221 * _tmp71 - _tmp222 * _tmp73 -
      _tmp58 * (-_tmp104 * _tmp53 - _tmp136 * _tmp212 + _tmp223 * _tmp71 + _tmp53 * _tmp71);
  const Scalar _tmp225 = _tmp140 * _tmp224;
  const Scalar _tmp226 = _tmp225 * _tmp73;
  const Scalar _tmp227 = _tmp211 * _tmp43;
  const Scalar _tmp228 = _tmp177 * _tmp53 + _tmp178 * _tmp227 - Scalar(1.0) * _tmp222;
  const Scalar _tmp229 = _tmp159 * _tmp219;
  const Scalar _tmp230 = _tmp173 * _tmp224 + _tmp228 - _tmp229 * _tmp85 +
                         _tmp87 * (_tmp174 * _tmp225 - _tmp175 * _tmp219 - _tmp217 * _tmp46 -
                                   Scalar(1.0) * _tmp218 - _tmp228 * _tmp84);
  const Scalar _tmp231 = _tmp17 * _tmp90 + _tmp226 * _tmp88 - _tmp230 * _tmp91;
  const Scalar _tmp232 = _tmp211 * _tmp92;
  const Scalar _tmp233 =
      _tmp134 - _tmp221 - _tmp58 * (_tmp135 * _tmp93 + _tmp137 - _tmp223 - _tmp53);
  const Scalar _tmp234 =
      -_tmp116 * _tmp229 + _tmp117 * _tmp224 + _tmp233 +
      _tmp87 * (_tmp114 * _tmp217 + _tmp151 * _tmp42 + _tmp156 - _tmp163 * _tmp219 +
                _tmp165 * _tmp225 - _tmp215 - _tmp216 - _tmp233 * _tmp84);
  const Scalar _tmp235 = _tmp118 * _tmp226 + _tmp119 * _tmp17 + _tmp17 - _tmp234 * _tmp91;
  const Scalar _tmp236 = _tmp201 * _tmp225;
  const Scalar _tmp237 = _tmp213 * _tmp71;
  const Scalar _tmp238 = _tmp199 * _tmp219;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp123 *
      (-_tmp101 * _tmp126 - _tmp107 * _tmp126 - _tmp113 * _tmp126 - _tmp122 * _tmp126 + _tmp124 +
       _tmp127 -
       _tmp170 * (-_tmp133 * _tmp169 - _tmp141 * _tmp142 + _tmp166 * _tmp89 + _tmp167 * _tmp93) +
       _tmp171 -
       _tmp184 * (-_tmp141 * _tmp172 + _tmp181 * _tmp89 + _tmp182 * _tmp93 - _tmp183 * _tmp92) -
       _tmp189 * (_tmp102 * _tmp183 * _tmp73 + _tmp157 * _tmp186 - _tmp157 * _tmp187 -
                  _tmp176 * _tmp188) +
       _tmp190 -
       _tmp193 * (_tmp109 * _tmp183 * _tmp91 - _tmp111 * _tmp128 * _tmp93 + _tmp141 * _tmp191 -
                  _tmp141 * _tmp192));
  _res(2, 0) = -_tmp198 * (-_tmp106 * _tmp188 * _tmp46 - _tmp129 * _tmp195 * _tmp71 +
                           _tmp133 * _tmp202 * _tmp91 - _tmp133 * _tmp203 * _tmp92 +
                           _tmp167 * _tmp196 + _tmp179 * _tmp194 * _tmp73 - _tmp179 * _tmp204 +
                           _tmp182 * _tmp197 + _tmp200 * _tmp74 + _tmp205 * _tmp74);
  _res(3, 0) = -_tmp208 * (-_tmp141 * _tmp209 - _tmp141 * _tmp210 + _tmp166 * _tmp206 +
                           _tmp181 * _tmp207 - _tmp200 - _tmp205);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp123 *
      (_tmp124 * _tmp42 + _tmp127 * _tmp42 -
       _tmp170 * (-_tmp142 * _tmp225 + _tmp169 * _tmp211 + _tmp234 * _tmp89 + _tmp235 * _tmp93) +
       _tmp171 * _tmp42 -
       _tmp184 * (_tmp168 * _tmp232 - _tmp172 * _tmp225 + _tmp230 * _tmp89 + _tmp231 * _tmp93) -
       _tmp189 * (-_tmp102 * _tmp168 * _tmp212 + _tmp103 * _tmp214 + _tmp186 * _tmp219 -
                  _tmp187 * _tmp219) +
       _tmp190 * _tmp42 -
       _tmp193 * (-_tmp109 * _tmp168 * _tmp220 + _tmp111 * _tmp214 + _tmp191 * _tmp225 -
                  _tmp192 * _tmp225));
  _res(2, 1) =
      -_tmp198 * (-_tmp194 * _tmp212 * _tmp43 + _tmp194 * _tmp237 + _tmp195 * _tmp237 +
                  _tmp196 * _tmp235 + _tmp197 * _tmp231 - _tmp202 * _tmp220 + _tmp203 * _tmp232 +
                  _tmp204 * _tmp227 + _tmp236 * _tmp74 + _tmp238 * _tmp74);
  _res(3, 1) = -_tmp208 * (_tmp206 * _tmp234 + _tmp207 * _tmp230 - _tmp209 * _tmp225 -
                           _tmp210 * _tmp225 - _tmp236 - _tmp238);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
