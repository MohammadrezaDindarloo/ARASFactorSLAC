// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost4_Nl3
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost4Nl3(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 472

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (154)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 * _tmp3;
  const Scalar _tmp5 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp6 = -_DeltaRot[0] * _Rot_init[0] - _DeltaRot[1] * _Rot_init[1] -
                       _DeltaRot[2] * _Rot_init[2] + _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp7 = 2 * _tmp5 * _tmp6;
  const Scalar _tmp8 = Scalar(0.20999999999999999) * _tmp4 + Scalar(0.20999999999999999) * _tmp7;
  const Scalar _tmp9 = -_tmp8;
  const Scalar _tmp10 = 2 * _tmp1;
  const Scalar _tmp11 = _tmp10 * _tmp5;
  const Scalar _tmp12 = _tmp3 * _tmp6;
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = -Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp15 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp16 = -2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp15 +
                        Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999);
  const Scalar _tmp18 = _tmp14 - _tmp17;
  const Scalar _tmp19 = _tmp18 + _tmp9;
  const Scalar _tmp20 = _tmp19 + position_vector(1, 0);
  const Scalar _tmp21 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp23 = -_tmp22;
  const Scalar _tmp24 = _tmp3 * _tmp5;
  const Scalar _tmp25 = _tmp10 * _tmp6;
  const Scalar _tmp26 = _tmp24 + _tmp25;
  const Scalar _tmp27 = -Scalar(0.010999999999999999) * _tmp26;
  const Scalar _tmp28 = Scalar(0.20999999999999999) * _tmp4 - Scalar(0.20999999999999999) * _tmp7;
  const Scalar _tmp29 = _tmp27 - _tmp28;
  const Scalar _tmp30 = _tmp23 + _tmp29;
  const Scalar _tmp31 = _tmp30 + position_vector(0, 0);
  const Scalar _tmp32 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp33 = Scalar(1.4083112389913199) * fh1;
  const Scalar _tmp34 = _tmp22 + _tmp29;
  const Scalar _tmp35 = _tmp34 + position_vector(0, 0);
  const Scalar _tmp36 = _tmp35 - p_b(0, 0);
  const Scalar _tmp37 = _tmp18 + _tmp8;
  const Scalar _tmp38 = _tmp37 + position_vector(1, 0);
  const Scalar _tmp39 = _tmp38 - p_b(1, 0);
  const Scalar _tmp40 = std::pow(Scalar(std::pow(_tmp36, Scalar(2)) + std::pow(_tmp39, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp41 = _tmp36 * _tmp40;
  const Scalar _tmp42 = Scalar(0.20999999999999999) * _tmp24 - Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp43 =
      -Scalar(0.010999999999999999) * _tmp15 - Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp44 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp45 = _tmp43 - _tmp44;
  const Scalar _tmp46 = _tmp42 + _tmp45;
  const Scalar _tmp47 = _tmp43 + _tmp44;
  const Scalar _tmp48 = _tmp42 + _tmp47;
  const Scalar _tmp49 = _tmp41 * _tmp48;
  const Scalar _tmp50 = _tmp27 + _tmp28;
  const Scalar _tmp51 = _tmp23 + _tmp50;
  const Scalar _tmp52 = _tmp51 + position_vector(0, 0);
  const Scalar _tmp53 = _tmp52 - p_d(0, 0);
  const Scalar _tmp54 = _tmp14 + _tmp17;
  const Scalar _tmp55 = _tmp54 + _tmp9;
  const Scalar _tmp56 = _tmp55 + position_vector(1, 0);
  const Scalar _tmp57 = _tmp56 - p_d(1, 0);
  const Scalar _tmp58 = std::pow(Scalar(std::pow(_tmp53, Scalar(2)) + std::pow(_tmp57, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp59 = _tmp53 * _tmp58;
  const Scalar _tmp60 = _tmp48 * _tmp59;
  const Scalar _tmp61 = -_tmp42;
  const Scalar _tmp62 = _tmp47 + _tmp61;
  const Scalar _tmp63 = -_tmp59 * _tmp62 + _tmp60;
  const Scalar _tmp64 = _tmp57 * _tmp58;
  const Scalar _tmp65 = _tmp22 + _tmp50;
  const Scalar _tmp66 = _tmp65 + position_vector(0, 0);
  const Scalar _tmp67 = _tmp66 - p_c(0, 0);
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp54 + _tmp8;
  const Scalar _tmp70 = _tmp69 + position_vector(1, 0);
  const Scalar _tmp71 = _tmp70 - p_c(1, 0);
  const Scalar _tmp72 = _tmp68 * _tmp71;
  const Scalar _tmp73 = Scalar(1.0) / (_tmp59 * _tmp72 - _tmp64);
  const Scalar _tmp74 = _tmp39 * _tmp40;
  const Scalar _tmp75 = _tmp41 * _tmp72 - _tmp74;
  const Scalar _tmp76 = _tmp73 * _tmp75;
  const Scalar _tmp77 = -_tmp60 * _tmp72 + _tmp62 * _tmp64;
  const Scalar _tmp78 = _tmp46 * _tmp74 - _tmp49 * _tmp72 - _tmp76 * _tmp77;
  const Scalar _tmp79 = Scalar(1.0) * _tmp69;
  const Scalar _tmp80 = -_tmp79;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp55 + _tmp80);
  const Scalar _tmp82 = Scalar(1.0) * _tmp65;
  const Scalar _tmp83 = -_tmp51 + _tmp82;
  const Scalar _tmp84 = _tmp81 * _tmp83;
  const Scalar _tmp85 = -_tmp41 * _tmp46 + _tmp49 - _tmp63 * _tmp76 - _tmp78 * _tmp84;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp85);
  const Scalar _tmp87 = Scalar(1.0) * _tmp81;
  const Scalar _tmp88 = Scalar(1.0) * _tmp73;
  const Scalar _tmp89 = -_tmp63 * _tmp88 + _tmp73 * _tmp77 * _tmp83 * _tmp87;
  const Scalar _tmp90 =
      std::sqrt(Scalar(std::pow(_tmp67, Scalar(2)) + std::pow(_tmp71, Scalar(2))));
  const Scalar _tmp91 = Scalar(1.0) / (_tmp90);
  const Scalar _tmp92 = _tmp68 * _tmp90;
  const Scalar _tmp93 = _tmp92 * (_tmp65 * _tmp71 * _tmp91 - _tmp67 * _tmp69 * _tmp91);
  const Scalar _tmp94 = -_tmp51 * _tmp64 + _tmp55 * _tmp59 + _tmp59 * _tmp93;
  const Scalar _tmp95 = -_tmp34 * _tmp74 + _tmp37 * _tmp41 + _tmp41 * _tmp93 - _tmp76 * _tmp94;
  const Scalar _tmp96 = _tmp86 * _tmp95;
  const Scalar _tmp97 = Scalar(1.0) / (_tmp95);
  const Scalar _tmp98 = _tmp85 * _tmp97;
  const Scalar _tmp99 = _tmp98 * (-_tmp88 * _tmp94 - _tmp89 * _tmp96);
  const Scalar _tmp100 = _tmp86 * (_tmp89 + _tmp99);
  const Scalar _tmp101 = -_tmp100 * _tmp75 + Scalar(1.0);
  const Scalar _tmp102 = _tmp59 * _tmp73;
  const Scalar _tmp103 = _tmp31 - p_a(0, 0);
  const Scalar _tmp104 = _tmp20 - p_a(1, 0);
  const Scalar _tmp105 =
      std::pow(Scalar(std::pow(_tmp103, Scalar(2)) + std::pow(_tmp104, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp106 = _tmp104 * _tmp105;
  const Scalar _tmp107 = _tmp106 * fh1;
  const Scalar _tmp108 = Scalar(1.0) * _tmp97;
  const Scalar _tmp109 = _tmp75 * _tmp88 * _tmp97;
  const Scalar _tmp110 = _tmp103 * _tmp105;
  const Scalar _tmp111 = fh1 * (_tmp106 * _tmp30 - _tmp110 * _tmp19);
  const Scalar _tmp112 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp113 = _tmp79 * _tmp84 + _tmp82;
  const Scalar _tmp114 = 0;
  const Scalar _tmp115 = _tmp72 * _tmp73;
  const Scalar _tmp116 = _tmp115 * _tmp77 + _tmp48 * _tmp72;
  const Scalar _tmp117 = _tmp115 * _tmp63 - _tmp116 * _tmp84 - _tmp48;
  const Scalar _tmp118 = _tmp98 * (_tmp115 * _tmp94 - _tmp117 * _tmp96 - _tmp93);
  const Scalar _tmp119 = _tmp86 * (_tmp117 + _tmp118);
  const Scalar _tmp120 = -_tmp119 * _tmp75 - _tmp72;
  const Scalar _tmp121 = _tmp110 * fh1;
  const Scalar _tmp122 = -_tmp107 * _tmp92 * (_tmp100 * _tmp41 + _tmp101 * _tmp102) -
                         _tmp111 * _tmp92 * (_tmp108 * _tmp41 - _tmp109 * _tmp59) -
                         _tmp112 * _tmp92 * (_tmp114 * _tmp41 - _tmp114 * _tmp59 * _tmp76) -
                         _tmp121 * _tmp92 * (_tmp102 * _tmp120 + _tmp119 * _tmp41 + Scalar(1.0));
  const Scalar _tmp123 = Scalar(1.0) / (_tmp122);
  const Scalar _tmp124 = _tmp37 + _tmp80;
  const Scalar _tmp125 = _tmp124 * _tmp84;
  const Scalar _tmp126 = Scalar(1.0) / (-_tmp125 - _tmp34 + _tmp82);
  const Scalar _tmp127 = Scalar(1.0) * _tmp126;
  const Scalar _tmp128 = _tmp124 * _tmp81;
  const Scalar _tmp129 = fh1 * (_tmp45 + _tmp61);
  const Scalar _tmp130 = _tmp110 * _tmp129 + Scalar(40.024799999999999) * _tmp26 + _tmp30 * fv1;
  const Scalar _tmp131 = _tmp113 * _tmp126;
  const Scalar _tmp132 = -_tmp114 * _tmp78 - _tmp124 * _tmp131 + _tmp80;
  const Scalar _tmp133 = _tmp124 * _tmp126;
  const Scalar _tmp134 = -_tmp100 * _tmp78 + _tmp133 * _tmp99 - _tmp77 * _tmp88;
  const Scalar _tmp135 = Scalar(1.0) * fh1;
  const Scalar _tmp136 = _tmp127 * _tmp98;
  const Scalar _tmp137 = -_tmp108 * _tmp78 + _tmp124 * _tmp136;
  const Scalar _tmp138 = -_tmp106 * _tmp129 - Scalar(40.024799999999999) * _tmp13 - _tmp19 * fv1;
  const Scalar _tmp139 = _tmp127 * _tmp84;
  const Scalar _tmp140 = _tmp125 * _tmp127 + Scalar(1.0);
  const Scalar _tmp141 = _tmp116 + _tmp118 * _tmp133 - _tmp119 * _tmp78;
  const Scalar _tmp142 = std::asinh(
      _tmp123 * (_tmp106 * _tmp135 * (_tmp127 * _tmp99 - _tmp134 * _tmp87) +
                 _tmp110 * _tmp135 * (_tmp118 * _tmp127 - _tmp141 * _tmp87) +
                 Scalar(1.0) * _tmp111 * (_tmp136 - _tmp137 * _tmp87) +
                 Scalar(1.0) * _tmp112 * (-_tmp113 * _tmp127 - _tmp132 * _tmp87 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp130 * (_tmp127 * _tmp128 - _tmp127) +
                 Scalar(1.0) * _tmp138 * (_tmp139 - _tmp140 * _tmp87)));
  const Scalar _tmp143 = Scalar(1.4083112389913199) * _tmp122;
  const Scalar _tmp144 = _tmp127 * _tmp130;
  const Scalar _tmp145 = _tmp112 * _tmp114;
  const Scalar _tmp146 = _tmp101 * _tmp107 * _tmp73 - _tmp109 * _tmp111 +
                         _tmp120 * _tmp121 * _tmp73 - _tmp145 * _tmp76;
  const Scalar _tmp147 = Scalar(1.0) / (_tmp146);
  const Scalar _tmp148 =
      std::asinh(_tmp147 * (_tmp107 * _tmp134 * _tmp81 + _tmp111 * _tmp137 * _tmp81 +
                            _tmp112 * _tmp132 * _tmp81 + _tmp121 * _tmp141 * _tmp81 -
                            _tmp128 * _tmp144 + _tmp138 * _tmp140 * _tmp81));
  const Scalar _tmp149 = Scalar(1.4083112389913199) * _tmp146;
  const Scalar _tmp150 = _tmp100 * _tmp107 + _tmp108 * _tmp111 + _tmp119 * _tmp121 + _tmp145;
  const Scalar _tmp151 = Scalar(1.0) / (_tmp150);
  const Scalar _tmp152 =
      std::asinh(_tmp151 * (-_tmp107 * _tmp126 * _tmp99 - _tmp111 * _tmp136 + _tmp112 * _tmp131 -
                            _tmp118 * _tmp121 * _tmp126 - _tmp138 * _tmp139 + _tmp144));
  const Scalar _tmp153 = Scalar(1.4083112389913199) * _tmp150;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp33 * (-std::sinh(Scalar(1.0) * _tmp32) -
                std::sinh(Scalar(0.71007031138673404) * _tmp0 *
                          (-_tmp32 * _tmp33 -
                           std::sqrt(Scalar(std::pow(Scalar(-_tmp20 + p_a(1, 0)), Scalar(2)) +
                                            std::pow(Scalar(-_tmp31 + p_a(0, 0)), Scalar(2))))))) -
      encoder(0, 0);
  _res(1, 0) =
      _tmp143 * (-std::sinh(Scalar(1.0) * _tmp142) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp123 *
                           (-_tmp142 * _tmp143 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp66 + p_c(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp70 + p_c(1, 0)), Scalar(2))))))) -
      encoder(1, 0);
  _res(2, 0) =
      _tmp149 * (-std::sinh(Scalar(1.0) * _tmp148) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp147 *
                           (-_tmp148 * _tmp149 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp52 + p_d(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp56 + p_d(1, 0)), Scalar(2))))))) -
      encoder(2, 0);
  _res(3, 0) =
      _tmp153 * (-std::sinh(Scalar(1.0) * _tmp152) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp151 *
                           (-_tmp152 * _tmp153 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp35 + p_b(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp38 + p_b(1, 0)), Scalar(2))))))) -
      encoder(3, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
