// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost4_Nl9
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost4Nl9(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 473

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (154)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp3 * _tmp8;
  const Scalar _tmp10 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                        2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp11 = _tmp1 * _tmp10;
  const Scalar _tmp12 = -_tmp11 + _tmp9;
  const Scalar _tmp13 = -Scalar(0.010999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp1 * _tmp8;
  const Scalar _tmp15 = _tmp10 * _tmp3;
  const Scalar _tmp16 = Scalar(0.20999999999999999) * _tmp14 + Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp17 = _tmp13 + _tmp16;
  const Scalar _tmp18 = _tmp17 + _tmp6;
  const Scalar _tmp19 = _tmp18 + position_vector(1, 0);
  const Scalar _tmp20 = 1 - 2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp22 = 2 * _tmp1 * _tmp3;
  const Scalar _tmp23 = _tmp10 * _tmp7;
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = -Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp14 - Scalar(0.20999999999999999) * _tmp15;
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = _tmp21 + _tmp27;
  const Scalar _tmp29 = _tmp28 + position_vector(0, 0);
  const Scalar _tmp30 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp31 = Scalar(1.4083112389913199) * fh1;
  const Scalar _tmp32 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp34 =
      -Scalar(0.010999999999999999) * _tmp2 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp22 - Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp36 = _tmp34 - _tmp35;
  const Scalar _tmp37 = _tmp33 + _tmp36;
  const Scalar _tmp38 = -_tmp21;
  const Scalar _tmp39 = _tmp25 + _tmp26;
  const Scalar _tmp40 = _tmp38 + _tmp39;
  const Scalar _tmp41 = _tmp40 + position_vector(0, 0);
  const Scalar _tmp42 = _tmp41 - p_d(0, 0);
  const Scalar _tmp43 = _tmp13 - _tmp16;
  const Scalar _tmp44 = _tmp43 + _tmp5;
  const Scalar _tmp45 = _tmp44 + position_vector(1, 0);
  const Scalar _tmp46 = _tmp45 - p_d(1, 0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp42, Scalar(2)) + std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp46 * _tmp47;
  const Scalar _tmp49 = _tmp21 + _tmp39;
  const Scalar _tmp50 = _tmp49 + position_vector(0, 0);
  const Scalar _tmp51 = _tmp50 - p_c(0, 0);
  const Scalar _tmp52 = Scalar(1.0) / (_tmp51);
  const Scalar _tmp53 = _tmp17 + _tmp5;
  const Scalar _tmp54 = _tmp53 + position_vector(1, 0);
  const Scalar _tmp55 = _tmp54 - p_c(1, 0);
  const Scalar _tmp56 = _tmp52 * _tmp55;
  const Scalar _tmp57 = _tmp34 + _tmp35;
  const Scalar _tmp58 = _tmp33 + _tmp57;
  const Scalar _tmp59 = _tmp42 * _tmp47;
  const Scalar _tmp60 = _tmp58 * _tmp59;
  const Scalar _tmp61 = _tmp37 * _tmp48 - _tmp56 * _tmp60;
  const Scalar _tmp62 = _tmp43 + _tmp6;
  const Scalar _tmp63 = _tmp62 + position_vector(1, 0);
  const Scalar _tmp64 = _tmp63 - p_a(1, 0);
  const Scalar _tmp65 = _tmp27 + _tmp38;
  const Scalar _tmp66 = _tmp65 + position_vector(0, 0);
  const Scalar _tmp67 = _tmp66 - p_a(0, 0);
  const Scalar _tmp68 = std::pow(Scalar(std::pow(_tmp64, Scalar(2)) + std::pow(_tmp67, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp69 = _tmp64 * _tmp68;
  const Scalar _tmp70 = _tmp67 * _tmp68;
  const Scalar _tmp71 = _tmp56 * _tmp70 - _tmp69;
  const Scalar _tmp72 = Scalar(1.0) / (-_tmp48 + _tmp56 * _tmp59);
  const Scalar _tmp73 = _tmp71 * _tmp72;
  const Scalar _tmp74 = _tmp56 * _tmp58;
  const Scalar _tmp75 = -_tmp33;
  const Scalar _tmp76 = _tmp36 + _tmp75;
  const Scalar _tmp77 = -_tmp61 * _tmp73 + _tmp69 * _tmp76 - _tmp70 * _tmp74;
  const Scalar _tmp78 = Scalar(1.0) * _tmp53;
  const Scalar _tmp79 = -_tmp78;
  const Scalar _tmp80 = Scalar(1.0) / (_tmp44 + _tmp79);
  const Scalar _tmp81 = Scalar(1.0) * _tmp49;
  const Scalar _tmp82 = -_tmp40 + _tmp81;
  const Scalar _tmp83 = _tmp80 * _tmp82;
  const Scalar _tmp84 = -_tmp37 * _tmp59 + _tmp60;
  const Scalar _tmp85 = _tmp58 * _tmp70 - _tmp70 * _tmp76 - _tmp73 * _tmp84 - _tmp77 * _tmp83;
  const Scalar _tmp86 = Scalar(1.0) / (_tmp85);
  const Scalar _tmp87 = _tmp78 * _tmp83 + _tmp81;
  const Scalar _tmp88 = 0;
  const Scalar _tmp89 = _tmp62 + _tmp79;
  const Scalar _tmp90 = _tmp83 * _tmp89;
  const Scalar _tmp91 = Scalar(1.0) / (-_tmp65 + _tmp81 - _tmp90);
  const Scalar _tmp92 = _tmp87 * _tmp91;
  const Scalar _tmp93 = -_tmp77 * _tmp88 + _tmp79 - _tmp89 * _tmp92;
  const Scalar _tmp94 = Scalar(1.0) * _tmp80;
  const Scalar _tmp95 = Scalar(1.0) * _tmp91;
  const Scalar _tmp96 = _tmp80 * _tmp89;
  const Scalar _tmp97 = _tmp29 - p_b(0, 0);
  const Scalar _tmp98 = _tmp19 - p_b(1, 0);
  const Scalar _tmp99 = std::pow(Scalar(std::pow(_tmp97, Scalar(2)) + std::pow(_tmp98, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp100 = _tmp97 * _tmp99;
  const Scalar _tmp101 = fh1 * (_tmp57 + _tmp75);
  const Scalar _tmp102 = _tmp100 * _tmp101 + Scalar(40.024799999999999) * _tmp24 + _tmp28 * fv1;
  const Scalar _tmp103 =
      std::sqrt(Scalar(std::pow(_tmp51, Scalar(2)) + std::pow(_tmp55, Scalar(2))));
  const Scalar _tmp104 = Scalar(1.0) / (_tmp103);
  const Scalar _tmp105 = _tmp103 * _tmp52;
  const Scalar _tmp106 = _tmp105 * (_tmp104 * _tmp49 * _tmp55 - _tmp104 * _tmp51 * _tmp53);
  const Scalar _tmp107 = _tmp106 * _tmp59 - _tmp40 * _tmp48 + _tmp44 * _tmp59;
  const Scalar _tmp108 = _tmp56 * _tmp72;
  const Scalar _tmp109 = _tmp108 * _tmp61 + _tmp74;
  const Scalar _tmp110 = _tmp108 * _tmp84 - _tmp109 * _tmp83 - _tmp58;
  const Scalar _tmp111 = _tmp106 * _tmp70 - _tmp107 * _tmp73 + _tmp62 * _tmp70 - _tmp65 * _tmp69;
  const Scalar _tmp112 = _tmp111 * _tmp86;
  const Scalar _tmp113 = Scalar(1.0) / (_tmp111);
  const Scalar _tmp114 = _tmp113 * _tmp85;
  const Scalar _tmp115 = _tmp114 * (-_tmp106 + _tmp107 * _tmp108 - _tmp110 * _tmp112);
  const Scalar _tmp116 = _tmp86 * (_tmp110 + _tmp115);
  const Scalar _tmp117 = _tmp89 * _tmp91;
  const Scalar _tmp118 = _tmp109 + _tmp115 * _tmp117 - _tmp116 * _tmp77;
  const Scalar _tmp119 = Scalar(1.0) * fh1;
  const Scalar _tmp120 = _tmp114 * _tmp95;
  const Scalar _tmp121 = Scalar(1.0) * _tmp113;
  const Scalar _tmp122 = _tmp120 * _tmp89 - _tmp121 * _tmp77;
  const Scalar _tmp123 = _tmp98 * _tmp99;
  const Scalar _tmp124 = fh1 * (-_tmp100 * _tmp18 + _tmp123 * _tmp28);
  const Scalar _tmp125 = Scalar(1.0) * _tmp72;
  const Scalar _tmp126 = -_tmp125 * _tmp84 + _tmp61 * _tmp72 * _tmp82 * _tmp94;
  const Scalar _tmp127 = _tmp114 * (-_tmp107 * _tmp125 - _tmp112 * _tmp126);
  const Scalar _tmp128 = _tmp86 * (_tmp126 + _tmp127);
  const Scalar _tmp129 = _tmp117 * _tmp127 - _tmp125 * _tmp61 - _tmp128 * _tmp77;
  const Scalar _tmp130 = -_tmp101 * _tmp123 - Scalar(40.024799999999999) * _tmp12 - _tmp18 * fv1;
  const Scalar _tmp131 = _tmp90 * _tmp95 + Scalar(1.0);
  const Scalar _tmp132 = _tmp83 * _tmp95;
  const Scalar _tmp133 = -_tmp128 * _tmp71 + Scalar(1.0);
  const Scalar _tmp134 = _tmp59 * _tmp72;
  const Scalar _tmp135 = _tmp123 * fh1;
  const Scalar _tmp136 = -_tmp116 * _tmp71 - _tmp56;
  const Scalar _tmp137 = _tmp100 * fh1;
  const Scalar _tmp138 = _tmp59 * _tmp73;
  const Scalar _tmp139 = -_tmp105 * _tmp124 * (-_tmp121 * _tmp138 + _tmp121 * _tmp70) -
                         _tmp105 * _tmp135 * (_tmp128 * _tmp70 + _tmp133 * _tmp134) -
                         _tmp105 * _tmp137 * (_tmp116 * _tmp70 + _tmp134 * _tmp136 + Scalar(1.0)) -
                         _tmp105 * _tmp32 * (-_tmp138 * _tmp88 + _tmp70 * _tmp88);
  const Scalar _tmp140 = Scalar(1.0) / (_tmp139);
  const Scalar _tmp141 = std::asinh(
      _tmp140 * (_tmp100 * _tmp119 * (_tmp115 * _tmp95 - _tmp118 * _tmp94) +
                 Scalar(1.0) * _tmp102 * (_tmp95 * _tmp96 - _tmp95) +
                 _tmp119 * _tmp123 * (_tmp127 * _tmp95 - _tmp129 * _tmp94) +
                 Scalar(1.0) * _tmp124 * (_tmp120 - _tmp122 * _tmp94) +
                 Scalar(1.0) * _tmp130 * (-_tmp131 * _tmp94 + _tmp132) +
                 Scalar(1.0) * _tmp32 * (-_tmp87 * _tmp95 - _tmp93 * _tmp94 + Scalar(1.0))));
  const Scalar _tmp142 = Scalar(1.4083112389913199) * _tmp139;
  const Scalar _tmp143 = _tmp32 * _tmp88;
  const Scalar _tmp144 = _tmp121 * _tmp124;
  const Scalar _tmp145 =
      _tmp133 * _tmp135 * _tmp72 + _tmp136 * _tmp137 * _tmp72 - _tmp143 * _tmp73 - _tmp144 * _tmp73;
  const Scalar _tmp146 = Scalar(1.0) / (_tmp145);
  const Scalar _tmp147 = _tmp102 * _tmp95;
  const Scalar _tmp148 =
      std::asinh(_tmp146 * (_tmp118 * _tmp137 * _tmp80 + _tmp122 * _tmp124 * _tmp80 +
                            _tmp129 * _tmp135 * _tmp80 + _tmp130 * _tmp131 * _tmp80 -
                            _tmp147 * _tmp96 + _tmp32 * _tmp80 * _tmp93));
  const Scalar _tmp149 = Scalar(1.4083112389913199) * _tmp145;
  const Scalar _tmp150 = _tmp116 * _tmp137 + _tmp128 * _tmp135 + _tmp143 + _tmp144;
  const Scalar _tmp151 = Scalar(1.0) / (_tmp150);
  const Scalar _tmp152 = std::asinh(_tmp151 * (-_tmp115 * _tmp137 * _tmp91 - _tmp120 * _tmp124 -
                                               _tmp127 * _tmp135 * _tmp91 - _tmp130 * _tmp132 +
                                               _tmp147 + _tmp32 * _tmp92));
  const Scalar _tmp153 = Scalar(1.4083112389913199) * _tmp150;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp31 * (-std::sinh(Scalar(1.0) * _tmp30) -
                std::sinh(Scalar(0.71007031138673404) * _tmp0 *
                          (-_tmp30 * _tmp31 -
                           std::sqrt(Scalar(std::pow(Scalar(-_tmp19 + p_b(1, 0)), Scalar(2)) +
                                            std::pow(Scalar(-_tmp29 + p_b(0, 0)), Scalar(2))))))) -
      encoder(0, 0);
  _res(1, 0) =
      _tmp142 * (-std::sinh(Scalar(1.0) * _tmp141) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp140 *
                           (-_tmp141 * _tmp142 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp50 + p_c(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp54 + p_c(1, 0)), Scalar(2))))))) -
      encoder(1, 0);
  _res(2, 0) =
      _tmp149 * (-std::sinh(Scalar(1.0) * _tmp148) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp146 *
                           (-_tmp148 * _tmp149 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp41 + p_d(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp45 + p_d(1, 0)), Scalar(2))))))) -
      encoder(2, 0);
  _res(3, 0) =
      _tmp153 * (-std::sinh(Scalar(1.0) * _tmp152) -
                 std::sinh(Scalar(0.71007031138673404) * _tmp151 *
                           (-_tmp152 * _tmp153 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp63 + p_a(1, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp66 + p_a(0, 0)), Scalar(2))))))) -
      encoder(3, 0);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
