// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost6
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     TransformationMatrix: Pose3
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix21
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> FkResidualFuncCost6(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const sym::Pose3<Scalar>& TransformationMatrix, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const Scalar epsilon) {
  // Total ops: 370

  // Unused inputs
  (void)fh1;
  (void)fv1;
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _TransformationMatrix = TransformationMatrix.Data();

  // Intermediate terms (126)
  const Scalar _tmp0 =
      _DeltaRot[0] * _TransformationMatrix[2] + _DeltaRot[1] * _TransformationMatrix[3] -
      _DeltaRot[2] * _TransformationMatrix[0] + _DeltaRot[3] * _TransformationMatrix[1];
  const Scalar _tmp1 =
      _DeltaRot[0] * _TransformationMatrix[3] - _DeltaRot[1] * _TransformationMatrix[2] +
      _DeltaRot[2] * _TransformationMatrix[1] + _DeltaRot[3] * _TransformationMatrix[0];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 =
      -_DeltaRot[0] * _TransformationMatrix[1] + _DeltaRot[1] * _TransformationMatrix[0] +
      _DeltaRot[2] * _TransformationMatrix[3] + _DeltaRot[3] * _TransformationMatrix[2];
  const Scalar _tmp5 =
      -_DeltaRot[0] * _TransformationMatrix[0] - _DeltaRot[1] * _TransformationMatrix[1] -
      _DeltaRot[2] * _TransformationMatrix[2] + _DeltaRot[3] * _TransformationMatrix[3];
  const Scalar _tmp6 = 2 * _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp10 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp11 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp12 = 2 * _tmp0;
  const Scalar _tmp13 = _tmp12 * _tmp4;
  const Scalar _tmp14 = _tmp2 * _tmp5;
  const Scalar _tmp15 =
      -Scalar(0.010999999999999999) * _tmp13 + Scalar(0.010999999999999999) * _tmp14;
  const Scalar _tmp16 = -_tmp11 + _tmp15;
  const Scalar _tmp17 = _tmp16 + _tmp8;
  const Scalar _tmp18 = _TransformationMatrix[5] + _tmp17 - p_a(1, 0);
  const Scalar _tmp19 = 1 - 2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp19;
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = _tmp2 * _tmp4;
  const Scalar _tmp23 = _tmp12 * _tmp5;
  const Scalar _tmp24 =
      -Scalar(0.010999999999999999) * _tmp22 - Scalar(0.010999999999999999) * _tmp23;
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp26 = _tmp24 - _tmp25;
  const Scalar _tmp27 = _tmp21 + _tmp26;
  const Scalar _tmp28 = _TransformationMatrix[4] + _tmp27 - p_a(0, 0);
  const Scalar _tmp29 = Scalar(1.0) / (_tmp28);
  const Scalar _tmp30 = _tmp18 * _tmp29;
  const Scalar _tmp31 = _tmp11 + _tmp15;
  const Scalar _tmp32 = _tmp31 + _tmp8;
  const Scalar _tmp33 = _TransformationMatrix[5] + _tmp32 - p_d(1, 0);
  const Scalar _tmp34 = Scalar(0.20999999999999999) * _tmp22 - Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp35 = -_tmp34;
  const Scalar _tmp36 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp37 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp35 + _tmp38;
  const Scalar _tmp40 = _TransformationMatrix[6] + _tmp39 - p_d(2, 0);
  const Scalar _tmp41 = _tmp24 + _tmp25;
  const Scalar _tmp42 = _tmp21 + _tmp41;
  const Scalar _tmp43 = _TransformationMatrix[4] + _tmp42 - p_d(0, 0);
  const Scalar _tmp44 = std::pow(Scalar(std::pow(_tmp33, Scalar(2)) + std::pow(_tmp40, Scalar(2)) +
                                        std::pow(_tmp43, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp45 = _tmp43 * _tmp44;
  const Scalar _tmp46 = _tmp33 * _tmp44;
  const Scalar _tmp47 = -_tmp30 * _tmp45 + _tmp46;
  const Scalar _tmp48 = _tmp36 - _tmp37;
  const Scalar _tmp49 = _tmp35 + _tmp48;
  const Scalar _tmp50 = _TransformationMatrix[6] + _tmp49 - p_a(2, 0);
  const Scalar _tmp51 = _tmp29 * _tmp50;
  const Scalar _tmp52 = _tmp40 * _tmp44;
  const Scalar _tmp53 = _tmp16 + _tmp7;
  const Scalar _tmp54 = _TransformationMatrix[5] + _tmp53 - p_b(1, 0);
  const Scalar _tmp55 = _tmp34 + _tmp48;
  const Scalar _tmp56 = _TransformationMatrix[6] + _tmp55 - p_b(2, 0);
  const Scalar _tmp57 = _tmp20 + _tmp26;
  const Scalar _tmp58 = _TransformationMatrix[4] + _tmp57 - p_b(0, 0);
  const Scalar _tmp59 = std::pow(Scalar(std::pow(_tmp54, Scalar(2)) + std::pow(_tmp56, Scalar(2)) +
                                        std::pow(_tmp58, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp60 = _tmp58 * _tmp59;
  const Scalar _tmp61 = _tmp56 * _tmp59;
  const Scalar _tmp62 = _tmp54 * _tmp59;
  const Scalar _tmp63 = Scalar(1.0) / (-_tmp30 * _tmp60 + _tmp62);
  const Scalar _tmp64 = _tmp63 * (-_tmp51 * _tmp60 + _tmp61);
  const Scalar _tmp65 = -_tmp45 * _tmp51 - _tmp47 * _tmp64 + _tmp52;
  const Scalar _tmp66 = _tmp34 + _tmp38;
  const Scalar _tmp67 = _TransformationMatrix[6] + _tmp66 - p_c(2, 0);
  const Scalar _tmp68 = _tmp20 + _tmp41;
  const Scalar _tmp69 = _TransformationMatrix[4] + _tmp68 - p_c(0, 0);
  const Scalar _tmp70 = _tmp31 + _tmp7;
  const Scalar _tmp71 = _TransformationMatrix[5] + _tmp70 - p_c(1, 0);
  const Scalar _tmp72 = std::pow(Scalar(std::pow(_tmp67, Scalar(2)) + std::pow(_tmp69, Scalar(2)) +
                                        std::pow(_tmp71, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp73 = _tmp67 * _tmp72;
  const Scalar _tmp74 = _tmp69 * _tmp72;
  const Scalar _tmp75 = _tmp71 * _tmp72;
  const Scalar _tmp76 = -_tmp30 * _tmp74 + _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (-_tmp51 * _tmp74 - _tmp64 * _tmp76 + _tmp73);
  const Scalar _tmp78 = std::sqrt(Scalar(std::pow(_tmp18, Scalar(2)) + std::pow(_tmp28, Scalar(2)) +
                                         std::pow(_tmp50, Scalar(2))));
  const Scalar _tmp79 = Scalar(1.0) / (_tmp78);
  const Scalar _tmp80 = _tmp50 * _tmp79;
  const Scalar _tmp81 = _tmp18 * _tmp79;
  const Scalar _tmp82 = _tmp17 * _tmp80 - _tmp49 * _tmp81;
  const Scalar _tmp83 = _tmp29 * _tmp78;
  const Scalar _tmp84 = _tmp82 * _tmp83;
  const Scalar _tmp85 = _tmp63 * (_tmp53 * _tmp61 - _tmp55 * _tmp62 - _tmp60 * _tmp84);
  const Scalar _tmp86 =
      _tmp77 * (-_tmp66 * _tmp75 + _tmp70 * _tmp73 - _tmp74 * _tmp84 - _tmp76 * _tmp85);
  const Scalar _tmp87 = _tmp65 * _tmp86;
  const Scalar _tmp88 = Scalar(1.0) / (_tmp32 * _tmp52 - _tmp39 * _tmp46 - _tmp45 * _tmp84 -
                                       _tmp47 * _tmp85 - _tmp87);
  const Scalar _tmp89 = _tmp47 * _tmp88;
  const Scalar _tmp90 = _tmp87 * _tmp88 + 1;
  const Scalar _tmp91 = _tmp76 * _tmp77;
  const Scalar _tmp92 = _tmp86 * _tmp89 - _tmp90 * _tmp91;
  const Scalar _tmp93 = _tmp55 * _tmp60 - _tmp57 * _tmp61;
  const Scalar _tmp94 = _tmp63 * _tmp93;
  const Scalar _tmp95 = _tmp74 * _tmp77;
  const Scalar _tmp96 = _tmp60 * _tmp63;
  const Scalar _tmp97 = _tmp45 * _tmp88;
  const Scalar _tmp98 = _tmp86 * _tmp97 - _tmp90 * _tmp95 - _tmp92 * _tmp96;
  const Scalar _tmp99 = _tmp28 * _tmp79;
  const Scalar _tmp100 = _tmp27 * _tmp79;
  const Scalar _tmp101 = -_tmp100 * _tmp50 + _tmp49 * _tmp99;
  const Scalar _tmp102 = _tmp101 * _tmp83;
  const Scalar _tmp103 = _tmp66 * _tmp74 - _tmp68 * _tmp73;
  const Scalar _tmp104 = _tmp103 * _tmp77;
  const Scalar _tmp105 = _tmp88 * (_tmp39 * _tmp45 - _tmp42 * _tmp52);
  const Scalar _tmp106 = _tmp30 * _tmp64 - _tmp51;
  const Scalar _tmp107 = -_tmp106 * _tmp86 + _tmp30 * _tmp85 - _tmp84;
  const Scalar _tmp108 = _tmp65 * _tmp88;
  const Scalar _tmp109 = _tmp106 - _tmp107 * _tmp108;
  const Scalar _tmp110 = -_tmp107 * _tmp89 - _tmp109 * _tmp91 - _tmp30;
  const Scalar _tmp111 = -_tmp107 * _tmp97 - _tmp109 * _tmp95 - _tmp110 * _tmp96 + 1;
  const Scalar _tmp112 = _tmp64 * _tmp86 - _tmp85;
  const Scalar _tmp113 = -_tmp108 * _tmp112 - _tmp64;
  const Scalar _tmp114 = _tmp63 * (-_tmp112 * _tmp89 - _tmp113 * _tmp91 + 1);
  const Scalar _tmp115 = _tmp113 * _tmp77;
  const Scalar _tmp116 = -_tmp112 * _tmp97 - _tmp114 * _tmp60 - _tmp115 * _tmp74;
  const Scalar _tmp117 = _tmp108 * _tmp91 - _tmp89;
  const Scalar _tmp118 = _tmp108 * _tmp95 - _tmp117 * _tmp96 - _tmp97;
  const Scalar _tmp119 = -_tmp53 * _tmp60 + _tmp57 * _tmp62;
  const Scalar _tmp120 = _tmp68 * _tmp75 - _tmp70 * _tmp74;
  const Scalar _tmp121 = _tmp100 * _tmp18 - _tmp17 * _tmp99;
  const Scalar _tmp122 = _tmp121 * _tmp83;
  const Scalar _tmp123 = _tmp88 * (-_tmp32 * _tmp45 + _tmp42 * _tmp46);
  const Scalar _tmp124 = _tmp119 * _tmp63;
  const Scalar _tmp125 = _tmp120 * _tmp77;

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _res;

  _res(0, 0) =
      -_tmp101 +
      _tmp80 * (_tmp102 * _tmp98 + _tmp104 * _tmp90 - _tmp105 * _tmp86 + _tmp92 * _tmp94) +
      _tmp81 * (_tmp102 * _tmp116 + _tmp103 * _tmp115 + _tmp105 * _tmp112 + _tmp114 * _tmp93) +
      _tmp82 * (_tmp102 * _tmp118 - _tmp104 * _tmp108 + _tmp105 + _tmp117 * _tmp94) +
      _tmp99 * (_tmp102 * _tmp111 + _tmp104 * _tmp109 + _tmp105 * _tmp107 + _tmp110 * _tmp94);
  _res(1, 0) =
      -_tmp121 +
      _tmp80 * (_tmp122 * _tmp98 - _tmp123 * _tmp86 + _tmp124 * _tmp92 + _tmp125 * _tmp90) +
      _tmp81 * (_tmp112 * _tmp123 + _tmp114 * _tmp119 + _tmp115 * _tmp120 + _tmp116 * _tmp122) +
      _tmp82 * (-_tmp108 * _tmp125 + _tmp117 * _tmp124 + _tmp118 * _tmp122 + _tmp123) +
      _tmp99 * (_tmp107 * _tmp123 + _tmp109 * _tmp125 + _tmp110 * _tmp124 + _tmp111 * _tmp122);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
