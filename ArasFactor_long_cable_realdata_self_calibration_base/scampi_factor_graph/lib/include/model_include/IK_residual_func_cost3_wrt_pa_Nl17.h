// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pa_Nl17
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPaNl17(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 569

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (190)
  const Scalar _tmp0 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp0 * _tmp6;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp2 * _tmp8;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp7 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp2;
  const Scalar _tmp12 = _tmp11 * _tmp6;
  const Scalar _tmp13 = _tmp0 * _tmp8;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp10 - _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = _tmp16 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp19 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp19 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp21 = -_tmp20;
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp23 = _tmp0 * _tmp11;
  const Scalar _tmp24 = _tmp6 * _tmp8;
  const Scalar _tmp25 =
      -Scalar(0.010999999999999999) * _tmp23 + Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = -_tmp22 + _tmp25;
  const Scalar _tmp27 = _tmp21 + _tmp26;
  const Scalar _tmp28 = _tmp27 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp29 = std::pow(_tmp28, Scalar(2));
  const Scalar _tmp30 = _tmp18 + _tmp29;
  const Scalar _tmp31 = std::pow(_tmp30, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp32 = _tmp10 + _tmp14;
  const Scalar _tmp33 = _tmp32 + _tmp5;
  const Scalar _tmp34 = _tmp33 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp35 = Scalar(1.0) / (_tmp34);
  const Scalar _tmp36 = _tmp20 + _tmp26;
  const Scalar _tmp37 = _tmp36 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp38 = _tmp35 * _tmp37;
  const Scalar _tmp39 = _tmp31 * _tmp38;
  const Scalar _tmp40 = _tmp17 * _tmp39 - _tmp28 * _tmp31;
  const Scalar _tmp41 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp42 = -_tmp41;
  const Scalar _tmp43 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp3;
  const Scalar _tmp44 = Scalar(0.20999999999999999) * _tmp7 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp45 = _tmp43 - _tmp44;
  const Scalar _tmp46 = _tmp42 + _tmp45;
  const Scalar _tmp47 = _tmp31 * _tmp46;
  const Scalar _tmp48 = _tmp42 + _tmp43 + _tmp44;
  const Scalar _tmp49 = _tmp15 + _tmp4;
  const Scalar _tmp50 = _tmp49 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp51 = _tmp22 + _tmp25;
  const Scalar _tmp52 = _tmp21 + _tmp51;
  const Scalar _tmp53 = _tmp52 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp54 = std::pow(Scalar(std::pow(_tmp50, Scalar(2)) + std::pow(_tmp53, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp55 = _tmp53 * _tmp54;
  const Scalar _tmp56 = _tmp41 + _tmp45;
  const Scalar _tmp57 = _tmp50 * _tmp54;
  const Scalar _tmp58 = _tmp56 * _tmp57;
  const Scalar _tmp59 = -_tmp38 * _tmp58 + _tmp48 * _tmp55;
  const Scalar _tmp60 = Scalar(1.0) / (_tmp38 * _tmp57 - _tmp55);
  const Scalar _tmp61 = _tmp40 * _tmp60;
  const Scalar _tmp62 = _tmp31 * _tmp56;
  const Scalar _tmp63 = _tmp17 * _tmp62;
  const Scalar _tmp64 = Scalar(1.0) * _tmp33;
  const Scalar _tmp65 = Scalar(1.0) * _tmp36;
  const Scalar _tmp66 = (-_tmp49 + _tmp64) / (_tmp52 - _tmp65);
  const Scalar _tmp67 = -_tmp48 * _tmp57 + _tmp58;
  const Scalar _tmp68 = -_tmp17 * _tmp47 - _tmp61 * _tmp67 + _tmp63 -
                        _tmp66 * (_tmp28 * _tmp47 - _tmp38 * _tmp63 - _tmp59 * _tmp61);
  const Scalar _tmp69 = Scalar(1.0) / (_tmp68);
  const Scalar _tmp70 =
      std::sqrt(Scalar(std::pow(_tmp34, Scalar(2)) + std::pow(_tmp37, Scalar(2))));
  const Scalar _tmp71 = Scalar(1.0) / (_tmp70);
  const Scalar _tmp72 = _tmp35 * _tmp70;
  const Scalar _tmp73 = _tmp72 * (_tmp33 * _tmp37 * _tmp71 - _tmp34 * _tmp36 * _tmp71);
  const Scalar _tmp74 = _tmp31 * _tmp73;
  const Scalar _tmp75 = -_tmp49 * _tmp55 + _tmp52 * _tmp57 + _tmp57 * _tmp73;
  const Scalar _tmp76 = _tmp27 * _tmp31;
  const Scalar _tmp77 = _tmp16 * _tmp31;
  const Scalar _tmp78 = _tmp17 * _tmp74 + _tmp17 * _tmp76 - _tmp28 * _tmp77 - _tmp61 * _tmp75;
  const Scalar _tmp79 = _tmp59 * _tmp60;
  const Scalar _tmp80 = _tmp60 * _tmp67;
  const Scalar _tmp81 = Scalar(1.0) * _tmp66 * _tmp79 - Scalar(1.0) * _tmp80;
  const Scalar _tmp82 = _tmp69 * _tmp81;
  const Scalar _tmp83 = _tmp60 * _tmp75;
  const Scalar _tmp84 = -_tmp78 * _tmp82 - Scalar(1.0) * _tmp83;
  const Scalar _tmp85 = Scalar(1.0) / (_tmp78);
  const Scalar _tmp86 = _tmp68 * _tmp85;
  const Scalar _tmp87 = _tmp81 + _tmp84 * _tmp86;
  const Scalar _tmp88 = _tmp69 * _tmp87;
  const Scalar _tmp89 = -_tmp40 * _tmp88 + Scalar(1.0);
  const Scalar _tmp90 = _tmp57 * _tmp60;
  const Scalar _tmp91 = _tmp31 * _tmp69;
  const Scalar _tmp92 = _tmp87 * _tmp91;
  const Scalar _tmp93 = _tmp32 + _tmp4;
  const Scalar _tmp94 = _tmp93 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp95 = _tmp20 + _tmp51;
  const Scalar _tmp96 = _tmp95 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp97 = std::pow(Scalar(std::pow(_tmp94, Scalar(2)) + std::pow(_tmp96, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp98 = _tmp96 * _tmp97;
  const Scalar _tmp99 = _tmp98 * fh1;
  const Scalar _tmp100 = _tmp72 * _tmp99;
  const Scalar _tmp101 = _tmp64 + _tmp65 * _tmp66;
  const Scalar _tmp102 = 0;
  const Scalar _tmp103 = _tmp102 * _tmp69;
  const Scalar _tmp104 = _tmp57 * _tmp61;
  const Scalar _tmp105 = _tmp102 * _tmp91;
  const Scalar _tmp106 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp107 = _tmp106 * _tmp72;
  const Scalar _tmp108 = _tmp38 * _tmp56;
  const Scalar _tmp109 = _tmp38 * _tmp80 - _tmp56 - _tmp66 * (_tmp108 + _tmp38 * _tmp79);
  const Scalar _tmp110 = _tmp109 * _tmp69;
  const Scalar _tmp111 = -_tmp110 * _tmp78 + _tmp38 * _tmp83 - _tmp73;
  const Scalar _tmp112 = _tmp111 * _tmp85;
  const Scalar _tmp113 = _tmp109 + _tmp112 * _tmp68;
  const Scalar _tmp114 = _tmp113 * _tmp69;
  const Scalar _tmp115 = -_tmp114 * _tmp40 - _tmp38;
  const Scalar _tmp116 = _tmp113 * _tmp91;
  const Scalar _tmp117 = _tmp94 * _tmp97;
  const Scalar _tmp118 = _tmp117 * fh1;
  const Scalar _tmp119 = _tmp118 * _tmp72;
  const Scalar _tmp120 = Scalar(1.0) * _tmp85;
  const Scalar _tmp121 = _tmp120 * _tmp31;
  const Scalar _tmp122 = fh1 * (-_tmp117 * _tmp95 + _tmp93 * _tmp98);
  const Scalar _tmp123 = _tmp122 * _tmp72;
  const Scalar _tmp124 = std::exp(_tmp100 * (_tmp17 * _tmp92 + _tmp89 * _tmp90) +
                                  _tmp107 * (-_tmp103 * _tmp104 + _tmp105 * _tmp17) +
                                  _tmp119 * (_tmp115 * _tmp90 + _tmp116 * _tmp17 + Scalar(1.0)) +
                                  _tmp123 * (-_tmp104 * _tmp120 + _tmp121 * _tmp17));
  const Scalar _tmp125 = std::pow(_tmp30, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp126 = _tmp125 * _tmp18;
  const Scalar _tmp127 = _tmp125 * _tmp17 * _tmp28;
  const Scalar _tmp128 = _tmp126 * _tmp38 - _tmp127 - _tmp39;
  const Scalar _tmp129 = _tmp126 * _tmp56;
  const Scalar _tmp130 = _tmp127 * _tmp46;
  const Scalar _tmp131 =
      -_tmp126 * _tmp46 - _tmp128 * _tmp80 + _tmp129 + _tmp47 - _tmp62 -
      _tmp66 * (-_tmp128 * _tmp79 - _tmp129 * _tmp38 + _tmp130 + _tmp38 * _tmp62);
  const Scalar _tmp132 =
      _tmp126 * _tmp27 + _tmp126 * _tmp73 - _tmp127 * _tmp16 - _tmp128 * _tmp83 - _tmp74 - _tmp76;
  const Scalar _tmp133 = _tmp132 * _tmp69;
  const Scalar _tmp134 = std::pow(_tmp68, Scalar(-2));
  const Scalar _tmp135 = _tmp134 * _tmp78;
  const Scalar _tmp136 = _tmp109 * _tmp135;
  const Scalar _tmp137 = std::pow(_tmp78, Scalar(-2));
  const Scalar _tmp138 = _tmp137 * _tmp68;
  const Scalar _tmp139 = _tmp111 * _tmp138;
  const Scalar _tmp140 =
      _tmp112 * _tmp131 - _tmp132 * _tmp139 + _tmp86 * (-_tmp109 * _tmp133 + _tmp131 * _tmp136);
  const Scalar _tmp141 = _tmp40 * _tmp69;
  const Scalar _tmp142 = _tmp134 * _tmp40;
  const Scalar _tmp143 = _tmp131 * _tmp142;
  const Scalar _tmp144 = _tmp113 * _tmp143 - _tmp114 * _tmp128 - _tmp140 * _tmp141;
  const Scalar _tmp145 = _tmp17 * _tmp31;
  const Scalar _tmp146 = _tmp134 * _tmp145;
  const Scalar _tmp147 = _tmp131 * _tmp146;
  const Scalar _tmp148 = _tmp17 * _tmp91;
  const Scalar _tmp149 = _tmp128 * _tmp90;
  const Scalar _tmp150 = Scalar(1.0) * _tmp137;
  const Scalar _tmp151 = _tmp132 * _tmp150;
  const Scalar _tmp152 = _tmp138 * _tmp84;
  const Scalar _tmp153 = _tmp84 * _tmp85;
  const Scalar _tmp154 = _tmp135 * _tmp81;
  const Scalar _tmp155 =
      _tmp131 * _tmp153 - _tmp132 * _tmp152 + _tmp86 * (_tmp131 * _tmp154 - _tmp133 * _tmp81);
  const Scalar _tmp156 = -_tmp128 * _tmp88 - _tmp141 * _tmp155 + _tmp143 * _tmp87;
  const Scalar _tmp157 = _tmp131 * _tmp134;
  const Scalar _tmp158 = _tmp102 * _tmp104;
  const Scalar _tmp159 = _tmp118 * _tmp60;
  const Scalar _tmp160 = _tmp102 * _tmp106;
  const Scalar _tmp161 = _tmp160 * _tmp69;
  const Scalar _tmp162 = _tmp120 * _tmp122;
  const Scalar _tmp163 = _tmp60 * _tmp99;
  const Scalar _tmp164 =
      std::exp(-_tmp115 * _tmp159 + _tmp161 * _tmp61 + _tmp162 * _tmp61 - _tmp163 * _tmp89);
  const Scalar _tmp165 = _tmp128 * _tmp60;
  const Scalar _tmp166 = _tmp134 * _tmp160;
  const Scalar _tmp167 = _tmp131 * _tmp166;
  const Scalar _tmp168 = _tmp122 * _tmp151;
  const Scalar _tmp169 = std::exp(-_tmp114 * _tmp118 - _tmp161 - _tmp162 - _tmp88 * _tmp99);
  const Scalar _tmp170 = _tmp113 * _tmp118;
  const Scalar _tmp171 = _tmp69 * _tmp99;
  const Scalar _tmp172 = _tmp87 * _tmp99;
  const Scalar _tmp173 = _tmp118 * _tmp69;
  const Scalar _tmp174 = _tmp125 * _tmp29;
  const Scalar _tmp175 = _tmp127 * _tmp38 - _tmp174 + _tmp31;
  const Scalar _tmp176 = _tmp175 * _tmp60;
  const Scalar _tmp177 =
      _tmp127 * _tmp56 - _tmp130 - _tmp176 * _tmp67 -
      _tmp66 * (-_tmp108 * _tmp127 + _tmp174 * _tmp46 - _tmp176 * _tmp59 - _tmp47);
  const Scalar _tmp178 = _tmp142 * _tmp177;
  const Scalar _tmp179 =
      _tmp127 * _tmp27 + _tmp127 * _tmp73 - _tmp16 * _tmp174 - _tmp176 * _tmp75 + _tmp77;
  const Scalar _tmp180 =
      -_tmp152 * _tmp179 + _tmp153 * _tmp177 + _tmp86 * (_tmp154 * _tmp177 - _tmp179 * _tmp82);
  const Scalar _tmp181 = -_tmp141 * _tmp180 - _tmp175 * _tmp88 + _tmp178 * _tmp87;
  const Scalar _tmp182 = _tmp146 * _tmp177;
  const Scalar _tmp183 = _tmp176 * _tmp57;
  const Scalar _tmp184 = _tmp150 * _tmp179;
  const Scalar _tmp185 = _tmp134 * _tmp177;
  const Scalar _tmp186 =
      _tmp112 * _tmp177 - _tmp139 * _tmp179 + _tmp86 * (-_tmp110 * _tmp179 + _tmp136 * _tmp177);
  const Scalar _tmp187 = _tmp113 * _tmp178 - _tmp114 * _tmp175 - _tmp141 * _tmp186;
  const Scalar _tmp188 = _tmp122 * _tmp184;
  const Scalar _tmp189 = _tmp166 * _tmp177;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp124 * (-_tmp100 * (_tmp126 * _tmp88 - _tmp147 * _tmp87 + _tmp148 * _tmp155 +
                                       _tmp156 * _tmp90 - _tmp92) -
                           _tmp107 * (-_tmp102 * _tmp147 + _tmp103 * _tmp126 - _tmp103 * _tmp149 -
                                      _tmp105 + _tmp157 * _tmp158) -
                           _tmp119 * (-_tmp113 * _tmp147 + _tmp114 * _tmp126 - _tmp116 +
                                      _tmp140 * _tmp148 + _tmp144 * _tmp90) -
                           _tmp123 * (_tmp104 * _tmp151 + _tmp120 * _tmp126 - _tmp120 * _tmp149 -
                                      _tmp121 - _tmp145 * _tmp151));
  _res(2, 0) = -_tmp164 * (_tmp144 * _tmp159 + _tmp156 * _tmp163 - _tmp161 * _tmp165 -
                           _tmp162 * _tmp165 + _tmp167 * _tmp61 + _tmp168 * _tmp61);
  _res(3, 0) = -_tmp169 * (_tmp140 * _tmp173 + _tmp155 * _tmp171 - _tmp157 * _tmp170 -
                           _tmp157 * _tmp172 - _tmp167 - _tmp168);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp124 *
      (-_tmp100 * (_tmp127 * _tmp88 + _tmp148 * _tmp180 + _tmp181 * _tmp90 - _tmp182 * _tmp87) -
       _tmp107 * (-_tmp102 * _tmp182 + _tmp103 * _tmp127 - _tmp103 * _tmp183 + _tmp158 * _tmp185) -
       _tmp119 * (-_tmp113 * _tmp182 + _tmp114 * _tmp127 + _tmp148 * _tmp186 + _tmp187 * _tmp90) -
       _tmp123 * (_tmp104 * _tmp184 + _tmp120 * _tmp127 - _tmp120 * _tmp183 - _tmp145 * _tmp184));
  _res(2, 1) = -_tmp164 * (_tmp159 * _tmp187 - _tmp161 * _tmp176 - _tmp162 * _tmp176 +
                           _tmp163 * _tmp181 + _tmp188 * _tmp61 + _tmp189 * _tmp61);
  _res(3, 1) = -_tmp169 * (-_tmp170 * _tmp185 + _tmp171 * _tmp180 - _tmp172 * _tmp185 +
                           _tmp173 * _tmp186 - _tmp188 - _tmp189);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
