// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pa_Nl18
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPaNl18(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 718

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (240)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3 +
                       Scalar(0.20999999999999999);
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp2;
  const Scalar _tmp8 = _tmp6 * _tmp7;
  const Scalar _tmp9 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp10 = _tmp0 * _tmp9;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp12 = 2 * _tmp0 * _tmp6;
  const Scalar _tmp13 = _tmp2 * _tmp9;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 - _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp5;
  const Scalar _tmp17 = _tmp16 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp19 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp20 = 1 - 2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp0 * _tmp7;
  const Scalar _tmp24 = _tmp6 * _tmp9;
  const Scalar _tmp25 =
      -Scalar(0.010999999999999999) * _tmp23 + Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp27 = _tmp25 - _tmp26;
  const Scalar _tmp28 = _tmp22 + _tmp27;
  const Scalar _tmp29 = _tmp28 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp30 = std::pow(_tmp29, Scalar(2));
  const Scalar _tmp31 = _tmp19 + _tmp30;
  const Scalar _tmp32 = std::sqrt(_tmp31);
  const Scalar _tmp33 = _tmp18 * _tmp32;
  const Scalar _tmp34 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp8;
  const Scalar _tmp35 =
      -Scalar(0.010999999999999999) * _tmp1 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp36 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp37 = _tmp35 - _tmp36;
  const Scalar _tmp38 = _tmp34 + _tmp37;
  const Scalar _tmp39 = _tmp15 + _tmp4;
  const Scalar _tmp40 = _tmp39 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = _tmp25 + _tmp26;
  const Scalar _tmp43 = _tmp22 + _tmp42;
  const Scalar _tmp44 = _tmp43 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp45 = _tmp41 + std::pow(_tmp44, Scalar(2));
  const Scalar _tmp46 = std::pow(_tmp45, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp47 = _tmp40 * _tmp46;
  const Scalar _tmp48 = -_tmp34 + _tmp37;
  const Scalar _tmp49 = _tmp47 * _tmp48;
  const Scalar _tmp50 = -_tmp38 * _tmp47 + _tmp49;
  const Scalar _tmp51 = _tmp44 * _tmp46;
  const Scalar _tmp52 = _tmp18 * _tmp29;
  const Scalar _tmp53 = _tmp47 * _tmp52;
  const Scalar _tmp54 = -_tmp51 + _tmp53;
  const Scalar _tmp55 = Scalar(1.0) / (_tmp54);
  const Scalar _tmp56 = _tmp21 + _tmp42;
  const Scalar _tmp57 = _tmp56 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp58 = _tmp11 + _tmp14;
  const Scalar _tmp59 = _tmp4 + _tmp58;
  const Scalar _tmp60 = _tmp59 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp61 = std::pow(Scalar(std::pow(_tmp57, Scalar(2)) + std::pow(_tmp60, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp62 = _tmp57 * _tmp61;
  const Scalar _tmp63 = _tmp60 * _tmp61;
  const Scalar _tmp64 = _tmp52 * _tmp63;
  const Scalar _tmp65 = -_tmp62 + _tmp64;
  const Scalar _tmp66 = _tmp55 * _tmp65;
  const Scalar _tmp67 = _tmp34 + _tmp35 + _tmp36;
  const Scalar _tmp68 = _tmp18 * _tmp48;
  const Scalar _tmp69 = _tmp29 * _tmp68;
  const Scalar _tmp70 = _tmp38 * _tmp51 - _tmp47 * _tmp69;
  const Scalar _tmp71 = Scalar(1.0) * _tmp28;
  const Scalar _tmp72 = Scalar(1.0) * _tmp16;
  const Scalar _tmp73 = (-_tmp39 + _tmp72) / (_tmp43 - _tmp71);
  const Scalar _tmp74 = _tmp48 * _tmp63 - _tmp50 * _tmp66 - _tmp63 * _tmp67 -
                        _tmp73 * (_tmp62 * _tmp67 - _tmp63 * _tmp69 - _tmp66 * _tmp70);
  const Scalar _tmp75 = Scalar(1.0) / (_tmp32);
  const Scalar _tmp76 = _tmp28 * _tmp75;
  const Scalar _tmp77 = _tmp16 * _tmp75;
  const Scalar _tmp78 = -_tmp17 * _tmp76 + _tmp29 * _tmp77;
  const Scalar _tmp79 = _tmp33 * _tmp78;
  const Scalar _tmp80 = -_tmp39 * _tmp51 + _tmp43 * _tmp47 + _tmp47 * _tmp79;
  const Scalar _tmp81 = _tmp56 * _tmp63 - _tmp59 * _tmp62 + _tmp63 * _tmp79 - _tmp66 * _tmp80;
  const Scalar _tmp82 = Scalar(1.0) / (_tmp81);
  const Scalar _tmp83 = Scalar(1.0) / (_tmp74);
  const Scalar _tmp84 = Scalar(1.0) * _tmp55;
  const Scalar _tmp85 = _tmp70 * _tmp73;
  const Scalar _tmp86 = -_tmp50 * _tmp84 + _tmp84 * _tmp85;
  const Scalar _tmp87 = _tmp83 * _tmp86;
  const Scalar _tmp88 = -_tmp80 * _tmp84 - _tmp81 * _tmp87;
  const Scalar _tmp89 = _tmp82 * _tmp88;
  const Scalar _tmp90 = _tmp74 * _tmp89 + _tmp86;
  const Scalar _tmp91 = _tmp63 * _tmp83;
  const Scalar _tmp92 = _tmp90 * _tmp91;
  const Scalar _tmp93 = _tmp65 * _tmp83;
  const Scalar _tmp94 = -_tmp90 * _tmp93 + Scalar(1.0);
  const Scalar _tmp95 = _tmp47 * _tmp55;
  const Scalar _tmp96 = _tmp5 + _tmp58;
  const Scalar _tmp97 = _tmp96 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp98 = _tmp21 + _tmp27;
  const Scalar _tmp99 = _tmp98 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp100 = std::pow(Scalar(std::pow(_tmp97, Scalar(2)) + std::pow(_tmp99, Scalar(2))),
                                  Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp101 = _tmp100 * _tmp99;
  const Scalar _tmp102 = _tmp101 * fh1;
  const Scalar _tmp103 = _tmp102 * (_tmp92 + _tmp94 * _tmp95);
  const Scalar _tmp104 = _tmp47 * _tmp65;
  const Scalar _tmp105 = _tmp82 * _tmp84;
  const Scalar _tmp106 = Scalar(1.0) * _tmp82;
  const Scalar _tmp107 = _tmp106 * _tmp63;
  const Scalar _tmp108 = _tmp100 * _tmp97;
  const Scalar _tmp109 = fh1 * (_tmp101 * _tmp96 - _tmp108 * _tmp98);
  const Scalar _tmp110 = _tmp109 * (-_tmp104 * _tmp105 + _tmp107);
  const Scalar _tmp111 = _tmp55 * _tmp80;
  const Scalar _tmp112 = _tmp52 * _tmp55;
  const Scalar _tmp113 = _tmp112 * _tmp50 - _tmp48 - _tmp73 * (_tmp112 * _tmp70 + _tmp69);
  const Scalar _tmp114 = _tmp81 * _tmp83;
  const Scalar _tmp115 = _tmp111 * _tmp52 - _tmp113 * _tmp114 - _tmp79;
  const Scalar _tmp116 = _tmp115 * _tmp82;
  const Scalar _tmp117 = _tmp113 + _tmp116 * _tmp74;
  const Scalar _tmp118 = -_tmp117 * _tmp93 - _tmp52;
  const Scalar _tmp119 = _tmp117 * _tmp91;
  const Scalar _tmp120 = _tmp108 * fh1;
  const Scalar _tmp121 = _tmp120 * (_tmp118 * _tmp95 + _tmp119 + Scalar(1.0));
  const Scalar _tmp122 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp123 = _tmp71 * _tmp73 + _tmp72;
  const Scalar _tmp124 = 0;
  const Scalar _tmp125 = _tmp124 * _tmp83;
  const Scalar _tmp126 = _tmp47 * _tmp66;
  const Scalar _tmp127 = _tmp125 * _tmp63;
  const Scalar _tmp128 = _tmp122 * (-_tmp125 * _tmp126 + _tmp127);
  const Scalar _tmp129 =
      std::exp(_tmp103 * _tmp33 + _tmp110 * _tmp33 + _tmp121 * _tmp33 + _tmp128 * _tmp33);
  const Scalar _tmp130 = std::pow(_tmp54, Scalar(-2));
  const Scalar _tmp131 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp132 = _tmp131 * _tmp29;
  const Scalar _tmp133 = _tmp130 * _tmp132;
  const Scalar _tmp134 = _tmp104 * _tmp133;
  const Scalar _tmp135 = _tmp75 * _tmp78;
  const Scalar _tmp136 = std::pow(_tmp31, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp137 = _tmp136 * _tmp28;
  const Scalar _tmp138 = _tmp136 * _tmp16;
  const Scalar _tmp139 = _tmp17 * _tmp29;
  const Scalar _tmp140 = _tmp33 * (-_tmp137 * _tmp19 + _tmp138 * _tmp139 + _tmp76);
  const Scalar _tmp141 = _tmp131 * _tmp32;
  const Scalar _tmp142 = _tmp141 * _tmp78;
  const Scalar _tmp143 = -_tmp135 * _tmp47 + _tmp140 * _tmp47 + _tmp142 * _tmp47;
  const Scalar _tmp144 = _tmp111 * _tmp132;
  const Scalar _tmp145 = _tmp134 * _tmp80 - _tmp135 * _tmp63 + _tmp140 * _tmp63 + _tmp142 * _tmp63 -
                         _tmp143 * _tmp66 - _tmp144 * _tmp63;
  const Scalar _tmp146 = std::pow(_tmp81, Scalar(-2));
  const Scalar _tmp147 = _tmp146 * _tmp74;
  const Scalar _tmp148 = _tmp145 * _tmp147;
  const Scalar _tmp149 = _tmp30 / [&]() {
    const Scalar base = _tmp17;
    return base * base * base;
  }();
  const Scalar _tmp150 = _tmp130 * _tmp47;
  const Scalar _tmp151 = _tmp150 * _tmp80;
  const Scalar _tmp152 = _tmp132 * _tmp55;
  const Scalar _tmp153 = _tmp152 * _tmp70;
  const Scalar _tmp154 = _tmp132 * _tmp48;
  const Scalar _tmp155 = _tmp152 * _tmp50;
  const Scalar _tmp156 =
      _tmp134 * _tmp50 - _tmp155 * _tmp63 -
      _tmp73 * (_tmp126 * _tmp154 + _tmp134 * _tmp70 - _tmp153 * _tmp63 - _tmp154 * _tmp63);
  const Scalar _tmp157 = std::pow(_tmp74, Scalar(-2));
  const Scalar _tmp158 = _tmp156 * _tmp157;
  const Scalar _tmp159 = _tmp113 * _tmp81;
  const Scalar _tmp160 = _tmp150 * _tmp70;
  const Scalar _tmp161 = _tmp150 * _tmp50;
  const Scalar _tmp162 =
      -_tmp149 * _tmp161 + _tmp155 -
      _tmp73 * (-_tmp149 * _tmp160 - _tmp149 * _tmp49 * _tmp55 + _tmp153 + _tmp154);
  const Scalar _tmp163 = _tmp113 * _tmp83;
  const Scalar _tmp164 = _tmp74 * _tmp82;
  const Scalar _tmp165 =
      -_tmp115 * _tmp148 + _tmp116 * _tmp156 + _tmp162 +
      _tmp164 * (_tmp112 * _tmp143 - _tmp114 * _tmp162 + _tmp135 - _tmp140 - _tmp142 + _tmp144 -
                 _tmp145 * _tmp163 - _tmp149 * _tmp151 + _tmp158 * _tmp159);
  const Scalar _tmp166 = _tmp158 * _tmp63;
  const Scalar _tmp167 = _tmp41 / _tmp45;
  const Scalar _tmp168 = _tmp133 * _tmp167;
  const Scalar _tmp169 = _tmp158 * _tmp65;
  const Scalar _tmp170 = _tmp117 * _tmp169 - _tmp119 * _tmp132 - _tmp132 - _tmp165 * _tmp93;
  const Scalar _tmp171 = _tmp120 * _tmp33;
  const Scalar _tmp172 = _tmp110 * _tmp75;
  const Scalar _tmp173 = _tmp124 * _tmp93;
  const Scalar _tmp174 = _tmp124 * _tmp126;
  const Scalar _tmp175 = _tmp122 * _tmp33;
  const Scalar _tmp176 = _tmp103 * _tmp75;
  const Scalar _tmp177 = _tmp106 * _tmp65;
  const Scalar _tmp178 = Scalar(1.0) * _tmp146;
  const Scalar _tmp179 = _tmp178 * _tmp63;
  const Scalar _tmp180 = _tmp105 * _tmp132 * _tmp63;
  const Scalar _tmp181 = _tmp146 * _tmp84;
  const Scalar _tmp182 = _tmp145 * _tmp181;
  const Scalar _tmp183 = _tmp109 * _tmp33;
  const Scalar _tmp184 = Scalar(1.0) * _tmp80;
  const Scalar _tmp185 = _tmp132 * _tmp150;
  const Scalar _tmp186 = _tmp81 * _tmp86;
  const Scalar _tmp187 = _tmp132 * _tmp161;
  const Scalar _tmp188 = _tmp47 * _tmp73 * _tmp84;
  const Scalar _tmp189 =
      -_tmp154 * _tmp188 - Scalar(1.0) * _tmp185 * _tmp85 + Scalar(1.0) * _tmp187;
  const Scalar _tmp190 = -_tmp148 * _tmp88 + _tmp156 * _tmp89 +
                         _tmp164 * (-_tmp114 * _tmp189 - _tmp143 * _tmp84 - _tmp145 * _tmp87 +
                                    _tmp158 * _tmp186 + _tmp184 * _tmp185) +
                         _tmp189;
  const Scalar _tmp191 = _tmp167 * _tmp94;
  const Scalar _tmp192 = -_tmp132 * _tmp92 + _tmp169 * _tmp90 - _tmp190 * _tmp93;
  const Scalar _tmp193 = _tmp102 * _tmp33;
  const Scalar _tmp194 = _tmp128 * _tmp75;
  const Scalar _tmp195 = _tmp121 * _tmp75;
  const Scalar _tmp196 = _tmp120 * _tmp55;
  const Scalar _tmp197 = _tmp102 * _tmp55;
  const Scalar _tmp198 = _tmp109 * _tmp65;
  const Scalar _tmp199 = _tmp122 * _tmp125;
  const Scalar _tmp200 =
      std::exp(_tmp105 * _tmp198 - _tmp118 * _tmp196 - _tmp197 * _tmp94 + _tmp199 * _tmp66);
  const Scalar _tmp201 = _tmp102 * _tmp94;
  const Scalar _tmp202 = _tmp122 * _tmp124;
  const Scalar _tmp203 = _tmp202 * _tmp93;
  const Scalar _tmp204 = _tmp106 * _tmp109;
  const Scalar _tmp205 = _tmp158 * _tmp202;
  const Scalar _tmp206 = _tmp120 * _tmp83;
  const Scalar _tmp207 = _tmp102 * _tmp83;
  const Scalar _tmp208 = std::exp(-_tmp117 * _tmp206 - _tmp199 - _tmp204 - _tmp207 * _tmp90);
  const Scalar _tmp209 = _tmp102 * _tmp90;
  const Scalar _tmp210 = _tmp109 * _tmp178;
  const Scalar _tmp211 = _tmp117 * _tmp120;
  const Scalar _tmp212 = _tmp130 * _tmp18;
  const Scalar _tmp213 = _tmp167 * _tmp212;
  const Scalar _tmp214 = _tmp18 * _tmp55;
  const Scalar _tmp215 = _tmp214 * _tmp80;
  const Scalar _tmp216 = _tmp33 * (-_tmp137 * _tmp139 + _tmp138 * _tmp30 - _tmp77);
  const Scalar _tmp217 = -_tmp135 * _tmp53 + _tmp216 * _tmp47;
  const Scalar _tmp218 = _tmp104 * _tmp212;
  const Scalar _tmp219 =
      -_tmp135 * _tmp64 + _tmp215 * _tmp63 + _tmp216 * _tmp63 - _tmp217 * _tmp66 - _tmp218 * _tmp80;
  const Scalar _tmp220 = _tmp181 * _tmp219;
  const Scalar _tmp221 = _tmp214 * _tmp47;
  const Scalar _tmp222 = _tmp118 * _tmp212;
  const Scalar _tmp223 = _tmp214 * _tmp50;
  const Scalar _tmp224 = _tmp214 * _tmp70;
  const Scalar _tmp225 =
      -_tmp218 * _tmp50 + _tmp223 * _tmp63 -
      _tmp73 * (-_tmp126 * _tmp68 - _tmp218 * _tmp70 + _tmp224 * _tmp63 + _tmp63 * _tmp68);
  const Scalar _tmp226 = _tmp157 * _tmp225;
  const Scalar _tmp227 = _tmp226 * _tmp65;
  const Scalar _tmp228 = _tmp147 * _tmp219;
  const Scalar _tmp229 =
      _tmp187 - _tmp223 - _tmp73 * (_tmp132 * _tmp160 + _tmp154 * _tmp95 - _tmp224 - _tmp68);
  const Scalar _tmp230 =
      -_tmp115 * _tmp228 + _tmp116 * _tmp225 +
      _tmp164 * (_tmp112 * _tmp217 - _tmp114 * _tmp229 + _tmp132 * _tmp151 + _tmp135 * _tmp52 +
                 _tmp159 * _tmp226 - _tmp163 * _tmp219 - _tmp215 - _tmp216) +
      _tmp229;
  const Scalar _tmp231 = _tmp117 * _tmp227 + _tmp119 * _tmp18 + _tmp18 - _tmp230 * _tmp93;
  const Scalar _tmp232 = _tmp226 * _tmp63;
  const Scalar _tmp233 = _tmp212 * _tmp47;
  const Scalar _tmp234 = Scalar(1.0) * _tmp233;
  const Scalar _tmp235 = _tmp188 * _tmp68 - _tmp234 * _tmp50 + _tmp234 * _tmp85;
  const Scalar _tmp236 = _tmp164 * (-_tmp114 * _tmp235 - _tmp184 * _tmp233 + _tmp186 * _tmp226 -
                                    _tmp217 * _tmp84 - _tmp219 * _tmp87) +
                         _tmp225 * _tmp89 - _tmp228 * _tmp88 + _tmp235;
  const Scalar _tmp237 = _tmp18 * _tmp92 + _tmp227 * _tmp90 - _tmp236 * _tmp93;
  const Scalar _tmp238 = _tmp202 * _tmp226;
  const Scalar _tmp239 = _tmp214 * _tmp63;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp129 *
      (-_tmp103 * _tmp141 - _tmp110 * _tmp141 - _tmp121 * _tmp141 - _tmp128 * _tmp141 -
       _tmp171 * (-_tmp117 * _tmp166 - _tmp118 * _tmp168 + _tmp165 * _tmp91 + _tmp170 * _tmp95) +
       _tmp172 -
       _tmp175 * (-_tmp124 * _tmp166 - _tmp127 * _tmp132 * _tmp95 + _tmp158 * _tmp174 +
                  _tmp168 * _tmp173) +
       _tmp176 -
       _tmp183 * (_tmp104 * _tmp182 - _tmp145 * _tmp179 + _tmp168 * _tmp177 - _tmp180 * _tmp47) -
       _tmp193 * (-_tmp133 * _tmp191 - _tmp166 * _tmp90 + _tmp190 * _tmp91 + _tmp192 * _tmp95) +
       _tmp194 + _tmp195);
  _res(2, 0) =
      -_tmp200 * (-_tmp109 * _tmp180 - _tmp118 * _tmp120 * _tmp185 + _tmp134 * _tmp204 -
                  _tmp152 * _tmp199 * _tmp63 + _tmp170 * _tmp196 + _tmp182 * _tmp198 -
                  _tmp185 * _tmp201 + _tmp185 * _tmp203 + _tmp192 * _tmp197 + _tmp205 * _tmp66);
  _res(3, 0) = -_tmp208 * (-_tmp145 * _tmp210 - _tmp158 * _tmp209 - _tmp158 * _tmp211 +
                           _tmp165 * _tmp206 + _tmp190 * _tmp207 - _tmp205);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp129 *
      (-_tmp171 * (-_tmp117 * _tmp232 + _tmp167 * _tmp222 + _tmp230 * _tmp91 + _tmp231 * _tmp95) +
       _tmp172 * _tmp52 -
       _tmp175 * (-_tmp124 * _tmp232 + _tmp127 * _tmp221 - _tmp173 * _tmp213 + _tmp174 * _tmp226) +
       _tmp176 * _tmp52 -
       _tmp183 * (_tmp104 * _tmp220 + _tmp107 * _tmp221 - _tmp177 * _tmp213 - _tmp179 * _tmp219) -
       _tmp193 * (_tmp191 * _tmp212 - _tmp232 * _tmp90 + _tmp236 * _tmp91 + _tmp237 * _tmp95) +
       _tmp194 * _tmp52 + _tmp195 * _tmp52);
  _res(2, 1) =
      -_tmp200 * (_tmp120 * _tmp222 * _tmp47 + _tmp196 * _tmp231 + _tmp197 * _tmp237 +
                  _tmp198 * _tmp220 + _tmp199 * _tmp239 + _tmp201 * _tmp233 - _tmp203 * _tmp233 -
                  _tmp204 * _tmp218 + _tmp204 * _tmp239 + _tmp238 * _tmp66);
  _res(3, 1) = -_tmp208 * (_tmp206 * _tmp230 + _tmp207 * _tmp236 - _tmp209 * _tmp226 -
                           _tmp210 * _tmp219 - _tmp211 * _tmp226 - _tmp238);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
