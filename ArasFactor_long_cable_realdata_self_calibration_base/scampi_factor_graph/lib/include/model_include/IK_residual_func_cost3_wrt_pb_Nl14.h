// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pb_Nl14
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPbNl14(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 720

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (240)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = _tmp2 * _tmp4;
  const Scalar _tmp10 = _tmp0 * _tmp5;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp12 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp13 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp8;
  const Scalar _tmp17 = _tmp16 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp19 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp21 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp22 = _tmp1 * _tmp5;
  const Scalar _tmp23 =
      -Scalar(0.010999999999999999) * _tmp21 + Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp24 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp26 = _tmp23 - _tmp25;
  const Scalar _tmp27 = _tmp20 + _tmp26;
  const Scalar _tmp28 = _tmp27 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp29 = std::pow(_tmp28, Scalar(2));
  const Scalar _tmp30 = _tmp19 + _tmp29;
  const Scalar _tmp31 = std::sqrt(_tmp30);
  const Scalar _tmp32 = _tmp18 * _tmp31;
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp34 = -Scalar(0.010999999999999999) * _tmp12 -
                        Scalar(0.010999999999999999) * _tmp24 + Scalar(-0.010999999999999999);
  const Scalar _tmp35 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp36 = _tmp34 - _tmp35;
  const Scalar _tmp37 = _tmp33 + _tmp36;
  const Scalar _tmp38 = _tmp11 - _tmp14;
  const Scalar _tmp39 = _tmp38 + _tmp7;
  const Scalar _tmp40 = _tmp39 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp41 = -_tmp20;
  const Scalar _tmp42 = _tmp23 + _tmp25;
  const Scalar _tmp43 = _tmp41 + _tmp42;
  const Scalar _tmp44 = _tmp43 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp45 = std::pow(Scalar(std::pow(_tmp40, Scalar(2)) + std::pow(_tmp44, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp46 = _tmp40 * _tmp45;
  const Scalar _tmp47 = -_tmp33;
  const Scalar _tmp48 = _tmp34 + _tmp35 + _tmp47;
  const Scalar _tmp49 = _tmp46 * _tmp48;
  const Scalar _tmp50 = _tmp44 * _tmp45;
  const Scalar _tmp51 = _tmp18 * _tmp28;
  const Scalar _tmp52 = _tmp38 + _tmp8;
  const Scalar _tmp53 = _tmp52 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp54 = std::pow(_tmp53, Scalar(2));
  const Scalar _tmp55 = _tmp26 + _tmp41;
  const Scalar _tmp56 = _tmp55 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp57 = _tmp54 + std::pow(_tmp56, Scalar(2));
  const Scalar _tmp58 = std::pow(_tmp57, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp59 = _tmp53 * _tmp58;
  const Scalar _tmp60 = _tmp48 * _tmp59;
  const Scalar _tmp61 = _tmp36 + _tmp47;
  const Scalar _tmp62 = _tmp56 * _tmp58;
  const Scalar _tmp63 = -_tmp51 * _tmp60 + _tmp61 * _tmp62;
  const Scalar _tmp64 = _tmp46 * _tmp51;
  const Scalar _tmp65 = -_tmp50 + _tmp64;
  const Scalar _tmp66 = _tmp51 * _tmp59 - _tmp62;
  const Scalar _tmp67 = Scalar(1.0) / (_tmp66);
  const Scalar _tmp68 = _tmp65 * _tmp67;
  const Scalar _tmp69 = Scalar(1.0) * _tmp27;
  const Scalar _tmp70 = Scalar(1.0) * _tmp16;
  const Scalar _tmp71 = (-_tmp52 + _tmp70) / (_tmp55 - _tmp69);
  const Scalar _tmp72 = -_tmp59 * _tmp61 + _tmp60;
  const Scalar _tmp73 = -_tmp37 * _tmp46 + _tmp49 - _tmp68 * _tmp72 -
                        _tmp71 * (_tmp37 * _tmp50 - _tmp49 * _tmp51 - _tmp63 * _tmp68);
  const Scalar _tmp74 = Scalar(1.0) / (_tmp31);
  const Scalar _tmp75 = _tmp16 * _tmp74;
  const Scalar _tmp76 = _tmp27 * _tmp74;
  const Scalar _tmp77 = -_tmp17 * _tmp76 + _tmp28 * _tmp75;
  const Scalar _tmp78 = _tmp31 * _tmp77;
  const Scalar _tmp79 = _tmp18 * _tmp78;
  const Scalar _tmp80 = -_tmp52 * _tmp62 + _tmp55 * _tmp59 + _tmp59 * _tmp79;
  const Scalar _tmp81 = _tmp67 * _tmp80;
  const Scalar _tmp82 = -_tmp39 * _tmp50 + _tmp43 * _tmp46 + _tmp46 * _tmp79 - _tmp65 * _tmp81;
  const Scalar _tmp83 = Scalar(1.0) / (_tmp82);
  const Scalar _tmp84 = Scalar(1.0) * _tmp67;
  const Scalar _tmp85 = _tmp63 * _tmp71;
  const Scalar _tmp86 = -_tmp72 * _tmp84 + _tmp84 * _tmp85;
  const Scalar _tmp87 = Scalar(1.0) / (_tmp73);
  const Scalar _tmp88 = _tmp82 * _tmp87;
  const Scalar _tmp89 = -Scalar(1.0) * _tmp81 - _tmp86 * _tmp88;
  const Scalar _tmp90 = _tmp83 * _tmp89;
  const Scalar _tmp91 = _tmp73 * _tmp90 + _tmp86;
  const Scalar _tmp92 = _tmp65 * _tmp87;
  const Scalar _tmp93 = -_tmp91 * _tmp92 + Scalar(1.0);
  const Scalar _tmp94 = _tmp59 * _tmp67;
  const Scalar _tmp95 = _tmp46 * _tmp87;
  const Scalar _tmp96 = _tmp91 * _tmp95;
  const Scalar _tmp97 = _tmp20 + _tmp42;
  const Scalar _tmp98 = _tmp97 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp99 = _tmp15 + _tmp7;
  const Scalar _tmp100 = _tmp99 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp101 =
      std::pow(Scalar(std::pow(_tmp100, Scalar(2)) + std::pow(_tmp98, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp102 = _tmp101 * _tmp98;
  const Scalar _tmp103 = _tmp102 * fh1;
  const Scalar _tmp104 = _tmp103 * (_tmp93 * _tmp94 + _tmp96);
  const Scalar _tmp105 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp106 = _tmp69 * _tmp71 + _tmp70;
  const Scalar _tmp107 = 0;
  const Scalar _tmp108 = _tmp107 * _tmp95;
  const Scalar _tmp109 = _tmp107 * _tmp92;
  const Scalar _tmp110 = _tmp105 * (_tmp108 - _tmp109 * _tmp94);
  const Scalar _tmp111 = _tmp63 * _tmp67;
  const Scalar _tmp112 = _tmp67 * _tmp72;
  const Scalar _tmp113 = _tmp112 * _tmp51 - _tmp48 - _tmp71 * (_tmp111 * _tmp51 + _tmp48 * _tmp51);
  const Scalar _tmp114 = -_tmp113 * _tmp88 + _tmp51 * _tmp81 - _tmp79;
  const Scalar _tmp115 = _tmp114 * _tmp83;
  const Scalar _tmp116 = _tmp113 + _tmp115 * _tmp73;
  const Scalar _tmp117 = -_tmp116 * _tmp92 - _tmp51;
  const Scalar _tmp118 = _tmp116 * _tmp95;
  const Scalar _tmp119 = _tmp100 * _tmp101;
  const Scalar _tmp120 = _tmp119 * fh1;
  const Scalar _tmp121 = _tmp120 * (_tmp117 * _tmp94 + _tmp118 + Scalar(1.0));
  const Scalar _tmp122 = Scalar(1.0) * _tmp83;
  const Scalar _tmp123 = _tmp122 * _tmp46;
  const Scalar _tmp124 = _tmp59 * _tmp68;
  const Scalar _tmp125 = fh1 * (_tmp102 * _tmp99 - _tmp119 * _tmp97);
  const Scalar _tmp126 = _tmp125 * (-_tmp122 * _tmp124 + _tmp123);
  const Scalar _tmp127 =
      std::exp(_tmp104 * _tmp32 + _tmp110 * _tmp32 + _tmp121 * _tmp32 + _tmp126 * _tmp32);
  const Scalar _tmp128 = _tmp54 / _tmp57;
  const Scalar _tmp129 = _tmp128 * _tmp93;
  const Scalar _tmp130 = std::pow(_tmp66, Scalar(-2));
  const Scalar _tmp131 = Scalar(1.0) / (_tmp19);
  const Scalar _tmp132 = _tmp131 * _tmp28;
  const Scalar _tmp133 = _tmp130 * _tmp132;
  const Scalar _tmp134 = _tmp112 * _tmp132;
  const Scalar _tmp135 = _tmp59 * _tmp72;
  const Scalar _tmp136 = _tmp133 * _tmp135;
  const Scalar _tmp137 = _tmp132 * _tmp60;
  const Scalar _tmp138 = _tmp59 * _tmp63;
  const Scalar _tmp139 = _tmp133 * _tmp138;
  const Scalar _tmp140 = _tmp111 * _tmp132;
  const Scalar _tmp141 =
      -_tmp134 * _tmp46 + _tmp136 * _tmp65 -
      _tmp71 * (-_tmp132 * _tmp49 + _tmp137 * _tmp68 + _tmp139 * _tmp65 - _tmp140 * _tmp46);
  const Scalar _tmp142 = std::pow(_tmp73, Scalar(-2));
  const Scalar _tmp143 = _tmp141 * _tmp142;
  const Scalar _tmp144 = _tmp82 * _tmp86;
  const Scalar _tmp145 = _tmp59 * _tmp80;
  const Scalar _tmp146 = _tmp133 * _tmp145;
  const Scalar _tmp147 = _tmp59 * _tmp85;
  const Scalar _tmp148 =
      -Scalar(1.0) * _tmp133 * _tmp147 + Scalar(1.0) * _tmp136 - _tmp137 * _tmp71 * _tmp84;
  const Scalar _tmp149 = std::pow(_tmp30, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp150 = _tmp149 * _tmp27;
  const Scalar _tmp151 = _tmp149 * _tmp16;
  const Scalar _tmp152 = _tmp17 * _tmp28;
  const Scalar _tmp153 = _tmp32 * (-_tmp150 * _tmp19 + _tmp151 * _tmp152 + _tmp76);
  const Scalar _tmp154 = _tmp131 * _tmp78;
  const Scalar _tmp155 = _tmp74 * _tmp77;
  const Scalar _tmp156 = _tmp155 * _tmp59;
  const Scalar _tmp157 = _tmp153 * _tmp59 + _tmp154 * _tmp59 - _tmp156;
  const Scalar _tmp158 = _tmp132 * _tmp81;
  const Scalar _tmp159 = _tmp146 * _tmp65 + _tmp153 * _tmp46 + _tmp154 * _tmp46 - _tmp155 * _tmp46 -
                         _tmp157 * _tmp68 - _tmp158 * _tmp46;
  const Scalar _tmp160 = _tmp159 * _tmp87;
  const Scalar _tmp161 = _tmp73 * _tmp83;
  const Scalar _tmp162 = std::pow(_tmp82, Scalar(-2));
  const Scalar _tmp163 = _tmp162 * _tmp73;
  const Scalar _tmp164 = _tmp163 * _tmp89;
  const Scalar _tmp165 = _tmp141 * _tmp90 + _tmp148 - _tmp159 * _tmp164 +
                         _tmp161 * (_tmp143 * _tmp144 + Scalar(1.0) * _tmp146 - _tmp148 * _tmp88 -
                                    _tmp157 * _tmp84 - _tmp160 * _tmp86);
  const Scalar _tmp166 = _tmp143 * _tmp46;
  const Scalar _tmp167 = _tmp143 * _tmp65;
  const Scalar _tmp168 = -_tmp132 * _tmp96 - _tmp165 * _tmp92 + _tmp167 * _tmp91;
  const Scalar _tmp169 = _tmp103 * _tmp32;
  const Scalar _tmp170 = _tmp110 * _tmp74;
  const Scalar _tmp171 = _tmp113 * _tmp82;
  const Scalar _tmp172 = _tmp29 / [&]() {
    const Scalar base = _tmp17;
    return base * base * base;
  }();
  const Scalar _tmp173 = _tmp130 * _tmp172;
  const Scalar _tmp174 = _tmp60 * _tmp67;
  const Scalar _tmp175 =
      _tmp134 - _tmp135 * _tmp173 -
      _tmp71 * (_tmp132 * _tmp48 - _tmp138 * _tmp173 + _tmp140 - _tmp172 * _tmp174);
  const Scalar _tmp176 = _tmp51 * _tmp67;
  const Scalar _tmp177 = _tmp114 * _tmp163;
  const Scalar _tmp178 =
      _tmp115 * _tmp141 - _tmp159 * _tmp177 +
      _tmp161 * (-_tmp113 * _tmp160 + _tmp143 * _tmp171 - _tmp145 * _tmp173 - _tmp153 - _tmp154 +
                 _tmp155 + _tmp157 * _tmp176 + _tmp158 - _tmp175 * _tmp88) +
      _tmp175;
  const Scalar _tmp179 = _tmp116 * _tmp167 - _tmp118 * _tmp132 - _tmp132 - _tmp178 * _tmp92;
  const Scalar _tmp180 = _tmp128 * _tmp133;
  const Scalar _tmp181 = _tmp120 * _tmp32;
  const Scalar _tmp182 = _tmp131 * _tmp31;
  const Scalar _tmp183 = _tmp126 * _tmp74;
  const Scalar _tmp184 = _tmp104 * _tmp74;
  const Scalar _tmp185 = _tmp107 * _tmp124;
  const Scalar _tmp186 = _tmp105 * _tmp32;
  const Scalar _tmp187 = _tmp121 * _tmp74;
  const Scalar _tmp188 = Scalar(1.0) * _tmp162;
  const Scalar _tmp189 = _tmp159 * _tmp188;
  const Scalar _tmp190 = _tmp59 * _tmp84;
  const Scalar _tmp191 = _tmp132 * _tmp46 * _tmp83;
  const Scalar _tmp192 = _tmp125 * _tmp32;
  const Scalar _tmp193 = _tmp120 * _tmp67;
  const Scalar _tmp194 = _tmp103 * _tmp67;
  const Scalar _tmp195 = _tmp105 * _tmp107;
  const Scalar _tmp196 = _tmp195 * _tmp92;
  const Scalar _tmp197 = _tmp122 * _tmp125;
  const Scalar _tmp198 =
      std::exp(-_tmp117 * _tmp193 - _tmp194 * _tmp93 + _tmp196 * _tmp67 + _tmp197 * _tmp68);
  const Scalar _tmp199 = _tmp133 * _tmp59;
  const Scalar _tmp200 = _tmp195 * _tmp87;
  const Scalar _tmp201 = _tmp200 * _tmp46;
  const Scalar _tmp202 = _tmp103 * _tmp93;
  const Scalar _tmp203 = _tmp120 * _tmp59;
  const Scalar _tmp204 = _tmp125 * _tmp189;
  const Scalar _tmp205 = _tmp143 * _tmp195;
  const Scalar _tmp206 = _tmp103 * _tmp87;
  const Scalar _tmp207 = _tmp120 * _tmp87;
  const Scalar _tmp208 = std::exp(-_tmp116 * _tmp207 - _tmp197 - _tmp200 - _tmp206 * _tmp91);
  const Scalar _tmp209 = _tmp103 * _tmp91;
  const Scalar _tmp210 = _tmp116 * _tmp120;
  const Scalar _tmp211 = _tmp32 * (-_tmp150 * _tmp152 + _tmp151 * _tmp29 - _tmp75);
  const Scalar _tmp212 = _tmp18 * _tmp81;
  const Scalar _tmp213 = _tmp130 * _tmp18;
  const Scalar _tmp214 = _tmp213 * _tmp65;
  const Scalar _tmp215 = -_tmp156 * _tmp51 + _tmp211 * _tmp59;
  const Scalar _tmp216 = -_tmp145 * _tmp214 - _tmp155 * _tmp64 + _tmp211 * _tmp46 +
                         _tmp212 * _tmp46 - _tmp215 * _tmp68;
  const Scalar _tmp217 = _tmp18 * _tmp67;
  const Scalar _tmp218 = _tmp217 * _tmp72;
  const Scalar _tmp219 = _tmp18 * _tmp48;
  const Scalar _tmp220 = _tmp217 * _tmp63;
  const Scalar _tmp221 =
      _tmp136 - _tmp218 - _tmp71 * (_tmp132 * _tmp174 + _tmp139 - _tmp219 - _tmp220);
  const Scalar _tmp222 = _tmp216 * _tmp87;
  const Scalar _tmp223 = _tmp214 * _tmp59;
  const Scalar _tmp224 =
      _tmp218 * _tmp46 - _tmp223 * _tmp72 -
      _tmp71 * (-_tmp124 * _tmp219 + _tmp219 * _tmp46 + _tmp220 * _tmp46 - _tmp223 * _tmp63);
  const Scalar _tmp225 = _tmp142 * _tmp224;
  const Scalar _tmp226 =
      _tmp115 * _tmp224 +
      _tmp161 * (-_tmp113 * _tmp222 + _tmp146 + _tmp155 * _tmp51 + _tmp171 * _tmp225 +
                 _tmp176 * _tmp215 - _tmp211 - _tmp212 - _tmp221 * _tmp88) -
      _tmp177 * _tmp216 + _tmp221;
  const Scalar _tmp227 = _tmp117 * _tmp213;
  const Scalar _tmp228 = _tmp225 * _tmp46;
  const Scalar _tmp229 = _tmp225 * _tmp65;
  const Scalar _tmp230 = _tmp116 * _tmp229 + _tmp118 * _tmp18 + _tmp18 - _tmp226 * _tmp92;
  const Scalar _tmp231 = _tmp188 * _tmp216;
  const Scalar _tmp232 = _tmp123 * _tmp217;
  const Scalar _tmp233 = Scalar(1.0) * _tmp213;
  const Scalar _tmp234 = -_tmp135 * _tmp233 + _tmp147 * _tmp233 + _tmp190 * _tmp219 * _tmp71;
  const Scalar _tmp235 = _tmp161 * (_tmp144 * _tmp225 - _tmp145 * _tmp233 - _tmp215 * _tmp84 -
                                    _tmp222 * _tmp86 - _tmp234 * _tmp88) -
                         _tmp164 * _tmp216 + _tmp224 * _tmp90 + _tmp234;
  const Scalar _tmp236 = _tmp18 * _tmp96 + _tmp229 * _tmp91 - _tmp235 * _tmp92;
  const Scalar _tmp237 = _tmp213 * _tmp59;
  const Scalar _tmp238 = _tmp125 * _tmp231;
  const Scalar _tmp239 = _tmp195 * _tmp225;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp127 *
      (-_tmp104 * _tmp182 - _tmp110 * _tmp182 - _tmp121 * _tmp182 - _tmp126 * _tmp182 -
       _tmp169 * (-_tmp129 * _tmp133 + _tmp165 * _tmp95 - _tmp166 * _tmp91 + _tmp168 * _tmp94) +
       _tmp170 -
       _tmp181 * (-_tmp116 * _tmp166 - _tmp117 * _tmp180 + _tmp178 * _tmp95 + _tmp179 * _tmp94) +
       _tmp183 + _tmp184 -
       _tmp186 * (-_tmp107 * _tmp166 - _tmp108 * _tmp132 * _tmp94 + _tmp109 * _tmp180 +
                  _tmp143 * _tmp185) +
       _tmp187 -
       _tmp192 *
           (_tmp122 * _tmp180 * _tmp65 + _tmp124 * _tmp189 - _tmp189 * _tmp46 - _tmp190 * _tmp191));
  _res(2, 0) = -_tmp198 * (-_tmp117 * _tmp133 * _tmp203 - _tmp125 * _tmp191 * _tmp84 -
                           _tmp132 * _tmp201 * _tmp67 + _tmp168 * _tmp194 + _tmp179 * _tmp193 +
                           _tmp196 * _tmp199 + _tmp197 * _tmp199 * _tmp65 - _tmp199 * _tmp202 +
                           _tmp204 * _tmp68 + _tmp205 * _tmp68);
  _res(3, 0) = -_tmp208 * (-_tmp143 * _tmp209 - _tmp143 * _tmp210 + _tmp165 * _tmp206 +
                           _tmp178 * _tmp207 - _tmp204 - _tmp205);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp127 *
      (-_tmp169 * (_tmp129 * _tmp213 - _tmp228 * _tmp91 + _tmp235 * _tmp95 + _tmp236 * _tmp94) +
       _tmp170 * _tmp51 -
       _tmp181 * (-_tmp116 * _tmp228 + _tmp128 * _tmp227 + _tmp226 * _tmp95 + _tmp230 * _tmp94) +
       _tmp183 * _tmp51 + _tmp184 * _tmp51 -
       _tmp186 * (-_tmp107 * _tmp228 + _tmp108 * _tmp217 * _tmp59 - _tmp109 * _tmp128 * _tmp213 +
                  _tmp185 * _tmp225) +
       _tmp187 * _tmp51 -
       _tmp192 * (-_tmp122 * _tmp128 * _tmp214 + _tmp124 * _tmp231 - _tmp231 * _tmp46 +
                  _tmp232 * _tmp59));
  _res(2, 1) =
      -_tmp198 * (_tmp125 * _tmp232 + _tmp193 * _tmp230 + _tmp194 * _tmp236 - _tmp196 * _tmp237 -
                  _tmp197 * _tmp223 + _tmp201 * _tmp217 + _tmp202 * _tmp237 + _tmp203 * _tmp227 +
                  _tmp238 * _tmp68 + _tmp239 * _tmp68);
  _res(3, 1) = -_tmp208 * (_tmp206 * _tmp235 + _tmp207 * _tmp226 - _tmp209 * _tmp225 -
                           _tmp210 * _tmp225 - _tmp238 - _tmp239);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
