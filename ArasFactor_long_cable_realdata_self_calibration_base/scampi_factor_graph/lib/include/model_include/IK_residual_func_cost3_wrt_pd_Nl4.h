// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost3_wrt_pd_Nl4
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     encoder: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> IkResidualFuncCost3WrtPdNl4(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Eigen::Matrix<Scalar, 4, 1>& encoder,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 723

  // Unused inputs
  (void)encoder;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (241)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp9 = _tmp1 * _tmp5;
  const Scalar _tmp10 =
      -Scalar(0.010999999999999999) * _tmp8 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp11 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp12 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp13 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp14 = _tmp10 - _tmp13;
  const Scalar _tmp15 = _tmp14 + _tmp7;
  const Scalar _tmp16 = _tmp15 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp17 = Scalar(1.0) / (_tmp16);
  const Scalar _tmp18 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp19 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp20 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp19;
  const Scalar _tmp21 = _tmp2 * _tmp4;
  const Scalar _tmp22 = _tmp0 * _tmp5;
  const Scalar _tmp23 =
      -Scalar(0.010999999999999999) * _tmp21 + Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp25 = _tmp23 - _tmp24;
  const Scalar _tmp26 = _tmp20 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = _tmp18 + _tmp28;
  const Scalar _tmp30 = std::sqrt(_tmp29);
  const Scalar _tmp31 = _tmp17 * _tmp30;
  const Scalar _tmp32 = Scalar(333.54000000000002) - fv1;
  const Scalar _tmp33 = -Scalar(0.010999999999999999) * _tmp11 -
                        Scalar(0.010999999999999999) * _tmp19 + Scalar(-0.010999999999999999);
  const Scalar _tmp34 = Scalar(0.20999999999999999) * _tmp8 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp22;
  const Scalar _tmp36 = _tmp33 + _tmp34 - _tmp35;
  const Scalar _tmp37 = -_tmp7;
  const Scalar _tmp38 = _tmp10 + _tmp13;
  const Scalar _tmp39 = _tmp37 + _tmp38;
  const Scalar _tmp40 = _tmp39 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp41 = std::pow(_tmp40, Scalar(2));
  const Scalar _tmp42 = -_tmp20;
  const Scalar _tmp43 = _tmp23 + _tmp24;
  const Scalar _tmp44 = _tmp42 + _tmp43;
  const Scalar _tmp45 = _tmp44 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp46 = _tmp41 + std::pow(_tmp45, Scalar(2));
  const Scalar _tmp47 = std::pow(_tmp46, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp48 = _tmp45 * _tmp47;
  const Scalar _tmp49 = _tmp40 * _tmp47;
  const Scalar _tmp50 = _tmp33 + _tmp35;
  const Scalar _tmp51 = -_tmp34 + _tmp50;
  const Scalar _tmp52 = _tmp17 * _tmp51;
  const Scalar _tmp53 = _tmp27 * _tmp52;
  const Scalar _tmp54 = _tmp36 * _tmp48 - _tmp49 * _tmp53;
  const Scalar _tmp55 = _tmp17 * _tmp27;
  const Scalar _tmp56 = _tmp49 * _tmp55;
  const Scalar _tmp57 = -_tmp48 + _tmp56;
  const Scalar _tmp58 = Scalar(1.0) / (_tmp57);
  const Scalar _tmp59 = _tmp38 + _tmp7;
  const Scalar _tmp60 = _tmp59 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp61 = _tmp20 + _tmp43;
  const Scalar _tmp62 = _tmp61 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp63 = std::pow(Scalar(std::pow(_tmp60, Scalar(2)) + std::pow(_tmp62, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp64 = _tmp60 * _tmp63;
  const Scalar _tmp65 = _tmp55 * _tmp64;
  const Scalar _tmp66 = _tmp62 * _tmp63;
  const Scalar _tmp67 = _tmp65 - _tmp66;
  const Scalar _tmp68 = _tmp58 * _tmp67;
  const Scalar _tmp69 = _tmp34 + _tmp50;
  const Scalar _tmp70 = Scalar(1.0) * _tmp15;
  const Scalar _tmp71 = Scalar(1.0) * _tmp26;
  const Scalar _tmp72 = (-_tmp39 + _tmp70) / (_tmp44 - _tmp71);
  const Scalar _tmp73 = _tmp49 * _tmp51;
  const Scalar _tmp74 = -_tmp36 * _tmp49 + _tmp73;
  const Scalar _tmp75 = _tmp51 * _tmp64;
  const Scalar _tmp76 = -_tmp64 * _tmp69 - _tmp68 * _tmp74 -
                        _tmp72 * (-_tmp53 * _tmp64 - _tmp54 * _tmp68 + _tmp66 * _tmp69) + _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (_tmp76);
  const Scalar _tmp78 = _tmp70 + _tmp71 * _tmp72;
  const Scalar _tmp79 = 0;
  const Scalar _tmp80 = _tmp49 * _tmp68;
  const Scalar _tmp81 = _tmp79 * _tmp80;
  const Scalar _tmp82 = _tmp64 * _tmp77;
  const Scalar _tmp83 = _tmp79 * _tmp82;
  const Scalar _tmp84 = _tmp32 * (-_tmp77 * _tmp81 + _tmp83);
  const Scalar _tmp85 = Scalar(1.0) * _tmp58;
  const Scalar _tmp86 = _tmp72 * _tmp85;
  const Scalar _tmp87 = _tmp54 * _tmp86 - _tmp74 * _tmp85;
  const Scalar _tmp88 = Scalar(1.0) / (_tmp30);
  const Scalar _tmp89 = _tmp15 * _tmp88;
  const Scalar _tmp90 = _tmp26 * _tmp88;
  const Scalar _tmp91 = -_tmp16 * _tmp90 + _tmp27 * _tmp89;
  const Scalar _tmp92 = _tmp31 * _tmp91;
  const Scalar _tmp93 = -_tmp39 * _tmp48 + _tmp44 * _tmp49 + _tmp49 * _tmp92;
  const Scalar _tmp94 = -_tmp59 * _tmp66 + _tmp61 * _tmp64 + _tmp64 * _tmp92 - _tmp68 * _tmp93;
  const Scalar _tmp95 = _tmp77 * _tmp94;
  const Scalar _tmp96 = -_tmp85 * _tmp93 - _tmp87 * _tmp95;
  const Scalar _tmp97 = Scalar(1.0) / (_tmp94);
  const Scalar _tmp98 = _tmp76 * _tmp97;
  const Scalar _tmp99 = _tmp87 + _tmp96 * _tmp98;
  const Scalar _tmp100 = _tmp67 * _tmp77;
  const Scalar _tmp101 = -_tmp100 * _tmp99 + Scalar(1.0);
  const Scalar _tmp102 = _tmp49 * _tmp58;
  const Scalar _tmp103 = _tmp82 * _tmp99;
  const Scalar _tmp104 = _tmp14 + _tmp37;
  const Scalar _tmp105 = _tmp104 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp106 = _tmp25 + _tmp42;
  const Scalar _tmp107 = _tmp106 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp108 =
      std::pow(Scalar(std::pow(_tmp105, Scalar(2)) + std::pow(_tmp107, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp109 = _tmp107 * _tmp108;
  const Scalar _tmp110 = _tmp109 * (_tmp101 * _tmp102 + _tmp103);
  const Scalar _tmp111 = _tmp31 * fh1;
  const Scalar _tmp112 = _tmp55 * _tmp58;
  const Scalar _tmp113 = _tmp58 * _tmp74;
  const Scalar _tmp114 = _tmp54 * _tmp58;
  const Scalar _tmp115 = _tmp113 * _tmp55 - _tmp51 - _tmp72 * (_tmp114 * _tmp55 + _tmp53);
  const Scalar _tmp116 = _tmp112 * _tmp93 - _tmp115 * _tmp95 - _tmp92;
  const Scalar _tmp117 = _tmp116 * _tmp97;
  const Scalar _tmp118 = _tmp115 + _tmp117 * _tmp76;
  const Scalar _tmp119 = _tmp118 * _tmp82;
  const Scalar _tmp120 = -_tmp100 * _tmp118 - _tmp55;
  const Scalar _tmp121 = _tmp105 * _tmp108;
  const Scalar _tmp122 = _tmp121 * (_tmp102 * _tmp120 + _tmp119 + Scalar(1.0));
  const Scalar _tmp123 = Scalar(1.0) * _tmp97;
  const Scalar _tmp124 = fh1 * (_tmp104 * _tmp109 - _tmp106 * _tmp121);
  const Scalar _tmp125 = _tmp124 * (_tmp123 * _tmp64 - _tmp123 * _tmp80);
  const Scalar _tmp126 =
      std::exp(_tmp110 * _tmp111 + _tmp111 * _tmp122 + _tmp125 * _tmp31 + _tmp31 * _tmp84);
  const Scalar _tmp127 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp128 = _tmp127 * _tmp30;
  const Scalar _tmp129 = _tmp125 * _tmp88;
  const Scalar _tmp130 = _tmp127 * _tmp27;
  const Scalar _tmp131 = _tmp113 * _tmp130;
  const Scalar _tmp132 = _tmp114 * _tmp130;
  const Scalar _tmp133 = std::pow(_tmp57, Scalar(-2));
  const Scalar _tmp134 = _tmp130 * _tmp133;
  const Scalar _tmp135 = _tmp49 * _tmp54;
  const Scalar _tmp136 = _tmp134 * _tmp135;
  const Scalar _tmp137 = _tmp130 * _tmp73;
  const Scalar _tmp138 = _tmp49 * _tmp74;
  const Scalar _tmp139 = _tmp134 * _tmp138;
  const Scalar _tmp140 =
      -_tmp131 * _tmp64 + _tmp139 * _tmp67 -
      _tmp72 * (-_tmp130 * _tmp75 - _tmp132 * _tmp64 + _tmp136 * _tmp67 + _tmp137 * _tmp68);
  const Scalar _tmp141 = std::pow(_tmp76, Scalar(-2));
  const Scalar _tmp142 = _tmp140 * _tmp141;
  const Scalar _tmp143 = _tmp67 * _tmp99;
  const Scalar _tmp144 = _tmp49 * _tmp93;
  const Scalar _tmp145 = _tmp134 * _tmp144;
  const Scalar _tmp146 = _tmp88 * _tmp91;
  const Scalar _tmp147 = _tmp130 * _tmp58;
  const Scalar _tmp148 = _tmp147 * _tmp93;
  const Scalar _tmp149 = _tmp128 * _tmp91;
  const Scalar _tmp150 = std::pow(_tmp29, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp151 = _tmp150 * _tmp26;
  const Scalar _tmp152 = _tmp15 * _tmp150;
  const Scalar _tmp153 = _tmp16 * _tmp27;
  const Scalar _tmp154 = _tmp31 * (-_tmp151 * _tmp18 + _tmp152 * _tmp153 + _tmp90);
  const Scalar _tmp155 = -_tmp146 * _tmp49 + _tmp149 * _tmp49 + _tmp154 * _tmp49;
  const Scalar _tmp156 = _tmp145 * _tmp67 - _tmp146 * _tmp64 - _tmp148 * _tmp64 + _tmp149 * _tmp64 +
                         _tmp154 * _tmp64 - _tmp155 * _tmp68;
  const Scalar _tmp157 = _tmp156 * _tmp77;
  const Scalar _tmp158 = _tmp142 * _tmp94;
  const Scalar _tmp159 = -Scalar(1.0) * _tmp136 * _tmp72 - _tmp137 * _tmp86 + Scalar(1.0) * _tmp139;
  const Scalar _tmp160 = std::pow(_tmp94, Scalar(-2));
  const Scalar _tmp161 = _tmp160 * _tmp76;
  const Scalar _tmp162 = _tmp156 * _tmp161;
  const Scalar _tmp163 = _tmp96 * _tmp97;
  const Scalar _tmp164 = _tmp140 * _tmp163 + _tmp159 - _tmp162 * _tmp96 +
                         _tmp98 * (Scalar(1.0) * _tmp145 - _tmp155 * _tmp85 - _tmp157 * _tmp87 +
                                   _tmp158 * _tmp87 - _tmp159 * _tmp95);
  const Scalar _tmp165 = -_tmp100 * _tmp164 - _tmp103 * _tmp130 + _tmp142 * _tmp143;
  const Scalar _tmp166 = _tmp142 * _tmp64;
  const Scalar _tmp167 = _tmp41 / _tmp46;
  const Scalar _tmp168 = _tmp134 * _tmp167;
  const Scalar _tmp169 = _tmp109 * _tmp111;
  const Scalar _tmp170 = _tmp128 * fh1;
  const Scalar _tmp171 = _tmp88 * fh1;
  const Scalar _tmp172 = _tmp110 * _tmp171;
  const Scalar _tmp173 = Scalar(1.0) * _tmp160;
  const Scalar _tmp174 = _tmp173 * _tmp80;
  const Scalar _tmp175 = _tmp173 * _tmp64;
  const Scalar _tmp176 = _tmp64 * _tmp85 * _tmp97;
  const Scalar _tmp177 = _tmp130 * _tmp176;
  const Scalar _tmp178 = _tmp124 * _tmp31;
  const Scalar _tmp179 = _tmp122 * _tmp171;
  const Scalar _tmp180 = _tmp28 / [&]() {
    const Scalar base = _tmp16;
    return base * base * base;
  }();
  const Scalar _tmp181 = _tmp133 * _tmp180;
  const Scalar _tmp182 =
      _tmp131 - _tmp138 * _tmp181 -
      _tmp72 * (_tmp130 * _tmp51 + _tmp132 - _tmp135 * _tmp181 - _tmp180 * _tmp58 * _tmp73);
  const Scalar _tmp183 =
      -_tmp116 * _tmp162 + _tmp117 * _tmp140 + _tmp182 +
      _tmp98 * (_tmp112 * _tmp155 - _tmp115 * _tmp157 + _tmp115 * _tmp158 - _tmp144 * _tmp181 +
                _tmp146 + _tmp148 - _tmp149 - _tmp154 - _tmp182 * _tmp95);
  const Scalar _tmp184 = _tmp118 * _tmp67;
  const Scalar _tmp185 = -_tmp100 * _tmp183 - _tmp119 * _tmp130 - _tmp130 + _tmp142 * _tmp184;
  const Scalar _tmp186 = _tmp120 * _tmp167;
  const Scalar _tmp187 = _tmp111 * _tmp121;
  const Scalar _tmp188 = _tmp84 * _tmp88;
  const Scalar _tmp189 = _tmp100 * _tmp79;
  const Scalar _tmp190 = _tmp31 * _tmp32;
  const Scalar _tmp191 = _tmp32 * _tmp79;
  const Scalar _tmp192 = _tmp191 * _tmp77;
  const Scalar _tmp193 = _tmp123 * _tmp124;
  const Scalar _tmp194 = _tmp58 * fh1;
  const Scalar _tmp195 = _tmp121 * _tmp194;
  const Scalar _tmp196 = _tmp109 * _tmp194;
  const Scalar _tmp197 =
      std::exp(-_tmp101 * _tmp196 - _tmp120 * _tmp195 + _tmp192 * _tmp68 + _tmp193 * _tmp68);
  const Scalar _tmp198 = _tmp49 * fh1;
  const Scalar _tmp199 = _tmp109 * _tmp198;
  const Scalar _tmp200 = _tmp100 * _tmp191 * _tmp49;
  const Scalar _tmp201 = _tmp124 * _tmp173;
  const Scalar _tmp202 = _tmp156 * _tmp201;
  const Scalar _tmp203 = _tmp142 * _tmp191;
  const Scalar _tmp204 = _tmp120 * _tmp121 * _tmp198;
  const Scalar _tmp205 = _tmp192 * _tmp64;
  const Scalar _tmp206 = _tmp77 * fh1;
  const Scalar _tmp207 = _tmp121 * _tmp206;
  const Scalar _tmp208 = _tmp109 * _tmp206;
  const Scalar _tmp209 = std::exp(-_tmp118 * _tmp207 - _tmp192 - _tmp193 - _tmp208 * _tmp99);
  const Scalar _tmp210 = _tmp142 * fh1;
  const Scalar _tmp211 = _tmp118 * _tmp121;
  const Scalar _tmp212 = _tmp109 * _tmp99;
  const Scalar _tmp213 = _tmp17 * _tmp58;
  const Scalar _tmp214 = _tmp133 * _tmp17;
  const Scalar _tmp215 = _tmp214 * _tmp67;
  const Scalar _tmp216 = _tmp215 * _tmp49;
  const Scalar _tmp217 = _tmp213 * _tmp74;
  const Scalar _tmp218 = _tmp213 * _tmp54;
  const Scalar _tmp219 =
      -_tmp216 * _tmp74 + _tmp217 * _tmp64 -
      _tmp72 * (-_tmp216 * _tmp54 + _tmp218 * _tmp64 + _tmp52 * _tmp64 - _tmp52 * _tmp80);
  const Scalar _tmp220 = _tmp141 * _tmp219;
  const Scalar _tmp221 = _tmp220 * _tmp64;
  const Scalar _tmp222 = _tmp213 * _tmp93;
  const Scalar _tmp223 = _tmp31 * (-_tmp151 * _tmp153 + _tmp152 * _tmp28 - _tmp89);
  const Scalar _tmp224 = -_tmp146 * _tmp56 + _tmp223 * _tmp49;
  const Scalar _tmp225 = -_tmp144 * _tmp215 - _tmp146 * _tmp65 + _tmp222 * _tmp64 +
                         _tmp223 * _tmp64 - _tmp224 * _tmp68;
  const Scalar _tmp226 = _tmp17 * _tmp176;
  const Scalar _tmp227 = _tmp225 * _tmp77;
  const Scalar _tmp228 = _tmp220 * _tmp94;
  const Scalar _tmp229 =
      _tmp139 - _tmp217 - _tmp72 * (_tmp136 + _tmp147 * _tmp73 - _tmp218 - _tmp52);
  const Scalar _tmp230 = _tmp161 * _tmp225;
  const Scalar _tmp231 =
      -_tmp116 * _tmp230 + _tmp117 * _tmp219 + _tmp229 +
      _tmp98 * (_tmp112 * _tmp224 - _tmp115 * _tmp227 + _tmp115 * _tmp228 + _tmp145 +
                _tmp146 * _tmp55 - _tmp222 - _tmp223 - _tmp229 * _tmp95);
  const Scalar _tmp232 = -_tmp100 * _tmp231 + _tmp119 * _tmp17 + _tmp17 + _tmp184 * _tmp220;
  const Scalar _tmp233 = Scalar(1.0) * _tmp214;
  const Scalar _tmp234 = _tmp135 * _tmp233 * _tmp72 - _tmp138 * _tmp233 + _tmp49 * _tmp52 * _tmp86;
  const Scalar _tmp235 = _tmp163 * _tmp219 - _tmp230 * _tmp96 + _tmp234 +
                         _tmp98 * (-_tmp144 * _tmp233 - _tmp224 * _tmp85 - _tmp227 * _tmp87 +
                                   _tmp228 * _tmp87 - _tmp234 * _tmp95);
  const Scalar _tmp236 = -_tmp100 * _tmp235 + _tmp103 * _tmp17 + _tmp143 * _tmp220;
  const Scalar _tmp237 = _tmp101 * _tmp214;
  const Scalar _tmp238 = _tmp201 * _tmp225;
  const Scalar _tmp239 = _tmp191 * _tmp220;
  const Scalar _tmp240 = _tmp220 * fh1;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp126 *
      (-_tmp110 * _tmp170 - _tmp122 * _tmp170 - _tmp125 * _tmp128 - _tmp128 * _tmp84 + _tmp129 -
       _tmp169 * (-_tmp101 * _tmp168 + _tmp102 * _tmp165 + _tmp164 * _tmp82 - _tmp166 * _tmp99) +
       _tmp172 -
       _tmp178 *
           (_tmp123 * _tmp168 * _tmp67 + _tmp156 * _tmp174 - _tmp156 * _tmp175 - _tmp177 * _tmp49) +
       _tmp179 -
       _tmp187 * (_tmp102 * _tmp185 - _tmp118 * _tmp166 - _tmp134 * _tmp186 + _tmp183 * _tmp82) +
       _tmp188 -
       _tmp190 *
           (-_tmp102 * _tmp130 * _tmp83 + _tmp142 * _tmp81 - _tmp166 * _tmp79 + _tmp168 * _tmp189));
  _res(2, 0) = -_tmp197 * (-_tmp101 * _tmp134 * _tmp199 - _tmp124 * _tmp177 +
                           _tmp134 * _tmp193 * _tmp49 * _tmp67 + _tmp134 * _tmp200 -
                           _tmp134 * _tmp204 - _tmp147 * _tmp205 + _tmp165 * _tmp196 +
                           _tmp185 * _tmp195 + _tmp202 * _tmp68 + _tmp203 * _tmp68);
  _res(3, 0) = -_tmp209 * (_tmp164 * _tmp208 + _tmp183 * _tmp207 - _tmp202 - _tmp203 -
                           _tmp210 * _tmp211 - _tmp210 * _tmp212);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp126 *
      (_tmp129 * _tmp55 -
       _tmp169 * (_tmp102 * _tmp236 + _tmp167 * _tmp237 - _tmp221 * _tmp99 + _tmp235 * _tmp82) +
       _tmp172 * _tmp55 -
       _tmp178 * (-_tmp123 * _tmp167 * _tmp215 + _tmp174 * _tmp225 - _tmp175 * _tmp225 +
                  _tmp226 * _tmp49) +
       _tmp179 * _tmp55 -
       _tmp187 * (_tmp102 * _tmp232 - _tmp118 * _tmp221 + _tmp186 * _tmp214 + _tmp231 * _tmp82) +
       _tmp188 * _tmp55 -
       _tmp190 * (-_tmp167 * _tmp189 * _tmp214 + _tmp213 * _tmp49 * _tmp83 + _tmp220 * _tmp81 -
                  _tmp221 * _tmp79));
  _res(2, 1) =
      -_tmp197 * (_tmp124 * _tmp226 - _tmp193 * _tmp216 + _tmp195 * _tmp232 + _tmp196 * _tmp236 +
                  _tmp199 * _tmp237 - _tmp200 * _tmp214 + _tmp204 * _tmp214 + _tmp205 * _tmp213 +
                  _tmp238 * _tmp68 + _tmp239 * _tmp68);
  _res(3, 1) = -_tmp209 * (_tmp207 * _tmp231 + _tmp208 * _tmp235 - _tmp211 * _tmp240 -
                           _tmp212 * _tmp240 - _tmp238 - _tmp239);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
