// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_pd
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     TransformationMatrix: Pose3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost3WrtPd(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const sym::Pose3<Scalar>& TransformationMatrix, const Scalar epsilon) {
  // Total ops: 564

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _TransformationMatrix = TransformationMatrix.Data();

  // Intermediate terms (177)
  const Scalar _tmp0 =
      _DeltaRot[0] * _TransformationMatrix[2] + _DeltaRot[1] * _TransformationMatrix[3] -
      _DeltaRot[2] * _TransformationMatrix[0] + _DeltaRot[3] * _TransformationMatrix[1];
  const Scalar _tmp1 =
      _DeltaRot[0] * _TransformationMatrix[3] - _DeltaRot[1] * _TransformationMatrix[2] +
      _DeltaRot[2] * _TransformationMatrix[1] + _DeltaRot[3] * _TransformationMatrix[0];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 =
      -_DeltaRot[0] * _TransformationMatrix[1] + _DeltaRot[1] * _TransformationMatrix[0] +
      _DeltaRot[2] * _TransformationMatrix[3] + _DeltaRot[3] * _TransformationMatrix[2];
  const Scalar _tmp5 =
      -2 * _DeltaRot[0] * _TransformationMatrix[0] - 2 * _DeltaRot[1] * _TransformationMatrix[1] -
      2 * _DeltaRot[2] * _TransformationMatrix[2] + 2 * _DeltaRot[3] * _TransformationMatrix[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp9 = 1 - 2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp11 = _tmp2 * _tmp4;
  const Scalar _tmp12 = _tmp0 * _tmp5;
  const Scalar _tmp13 =
      -Scalar(0.010999999999999999) * _tmp11 - Scalar(0.010999999999999999) * _tmp12;
  const Scalar _tmp14 = -_tmp10 + _tmp13;
  const Scalar _tmp15 = _tmp14 + _tmp7;
  const Scalar _tmp16 = _TransformationMatrix[4] + _tmp15 - p_d(0, 0);
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp12;
  const Scalar _tmp18 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp19 =
      -Scalar(0.010999999999999999) * _tmp18 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp20 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp21 = _tmp1 * _tmp5;
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp23 = _tmp19 + _tmp22;
  const Scalar _tmp24 = -_tmp17 + _tmp23;
  const Scalar _tmp25 = Scalar(0.20999999999999999) * _tmp18 + Scalar(0.20999999999999999) * _tmp8 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp26 =
      -Scalar(0.010999999999999999) * _tmp20 + Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp27 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp28 = _tmp26 - _tmp27;
  const Scalar _tmp29 = _tmp25 + _tmp28;
  const Scalar _tmp30 = _TransformationMatrix[5] + _tmp29 - p_d(1, 0);
  const Scalar _tmp31 = std::pow(_tmp30, Scalar(2));
  const Scalar _tmp32 = std::pow(_tmp16, Scalar(2));
  const Scalar _tmp33 = _tmp31 + _tmp32;
  const Scalar _tmp34 = std::pow(_tmp33, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp35 = _tmp24 * _tmp34;
  const Scalar _tmp36 = _tmp17 + _tmp19 - _tmp22;
  const Scalar _tmp37 = _tmp34 * _tmp36;
  const Scalar _tmp38 = _tmp16 * _tmp37;
  const Scalar _tmp39 = _tmp30 * _tmp34;
  const Scalar _tmp40 = -_tmp25;
  const Scalar _tmp41 = _tmp26 + _tmp27;
  const Scalar _tmp42 = _tmp40 + _tmp41;
  const Scalar _tmp43 = _TransformationMatrix[5] + _tmp42 - p_b(1, 0);
  const Scalar _tmp44 = -_tmp7;
  const Scalar _tmp45 = _tmp10 + _tmp13;
  const Scalar _tmp46 = _tmp44 + _tmp45;
  const Scalar _tmp47 = _TransformationMatrix[4] + _tmp46 - p_b(0, 0);
  const Scalar _tmp48 = Scalar(1.0) / (_tmp47);
  const Scalar _tmp49 = _tmp43 * _tmp48;
  const Scalar _tmp50 = _tmp34 * _tmp49;
  const Scalar _tmp51 = _tmp16 * _tmp50 - _tmp39;
  const Scalar _tmp52 = _tmp45 + _tmp7;
  const Scalar _tmp53 = _TransformationMatrix[4] + _tmp52 - p_c(0, 0);
  const Scalar _tmp54 = _tmp25 + _tmp41;
  const Scalar _tmp55 = _TransformationMatrix[5] + _tmp54 - p_c(1, 0);
  const Scalar _tmp56 = std::pow(Scalar(std::pow(_tmp53, Scalar(2)) + std::pow(_tmp55, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp57 = _tmp53 * _tmp56;
  const Scalar _tmp58 = _tmp55 * _tmp56;
  const Scalar _tmp59 = Scalar(1.0) / (_tmp49 * _tmp57 - _tmp58);
  const Scalar _tmp60 = _tmp17 + _tmp23;
  const Scalar _tmp61 = _tmp59 * (_tmp36 * _tmp57 - _tmp57 * _tmp60);
  const Scalar _tmp62 = _tmp36 * _tmp49;
  const Scalar _tmp63 = _tmp59 * (-_tmp57 * _tmp62 + _tmp58 * _tmp60);
  const Scalar _tmp64 = Scalar(1.0) * _tmp42;
  const Scalar _tmp65 = Scalar(1.0) * _tmp46;
  const Scalar _tmp66 = (-_tmp52 + _tmp65) / (_tmp54 - _tmp64);
  const Scalar _tmp67 = -_tmp16 * _tmp35 + _tmp38 - _tmp51 * _tmp61 -
                        _tmp66 * (_tmp24 * _tmp39 - _tmp38 * _tmp49 - _tmp51 * _tmp63);
  const Scalar _tmp68 = Scalar(1.0) / (_tmp67);
  const Scalar _tmp69 = _tmp51 * _tmp68;
  const Scalar _tmp70 = _tmp64 * _tmp66 + _tmp65;
  const Scalar _tmp71 = 0;
  const Scalar _tmp72 = _tmp57 * _tmp59;
  const Scalar _tmp73 = _tmp71 * _tmp72;
  const Scalar _tmp74 = _tmp68 * _tmp71;
  const Scalar _tmp75 = _tmp34 * _tmp74;
  const Scalar _tmp76 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp77 =
      std::sqrt(Scalar(std::pow(_tmp43, Scalar(2)) + std::pow(_tmp47, Scalar(2))));
  const Scalar _tmp78 = _tmp48 * _tmp77;
  const Scalar _tmp79 = _tmp76 * _tmp78;
  const Scalar _tmp80 = _tmp29 * _tmp34;
  const Scalar _tmp81 = Scalar(1.0) / (_tmp77);
  const Scalar _tmp82 = _tmp78 * (-_tmp42 * _tmp47 * _tmp81 + _tmp43 * _tmp46 * _tmp81);
  const Scalar _tmp83 = _tmp59 * (-_tmp52 * _tmp58 + _tmp54 * _tmp57 + _tmp57 * _tmp82);
  const Scalar _tmp84 = _tmp16 * _tmp34;
  const Scalar _tmp85 = -_tmp15 * _tmp39 + _tmp16 * _tmp80 - _tmp51 * _tmp83 + _tmp82 * _tmp84;
  const Scalar _tmp86 = -Scalar(1.0) * _tmp61 + Scalar(1.0) * _tmp63 * _tmp66;
  const Scalar _tmp87 = _tmp68 * _tmp86;
  const Scalar _tmp88 = -Scalar(1.0) * _tmp83 - _tmp85 * _tmp87;
  const Scalar _tmp89 = Scalar(1.0) / (_tmp85);
  const Scalar _tmp90 = _tmp67 * _tmp89;
  const Scalar _tmp91 = _tmp86 + _tmp88 * _tmp90;
  const Scalar _tmp92 = _tmp68 * _tmp91;
  const Scalar _tmp93 = -_tmp51 * _tmp92 + Scalar(1.0);
  const Scalar _tmp94 = _tmp34 * _tmp92;
  const Scalar _tmp95 = _tmp14 + _tmp44;
  const Scalar _tmp96 = _TransformationMatrix[4] + _tmp95 - p_a(0, 0);
  const Scalar _tmp97 = _tmp28 + _tmp40;
  const Scalar _tmp98 = _TransformationMatrix[5] + _tmp97 - p_a(1, 0);
  const Scalar _tmp99 = std::pow(Scalar(std::pow(_tmp96, Scalar(2)) + std::pow(_tmp98, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp100 = _tmp98 * _tmp99;
  const Scalar _tmp101 = _tmp100 * fh1;
  const Scalar _tmp102 = _tmp101 * _tmp78;
  const Scalar _tmp103 = -_tmp36 + _tmp49 * _tmp61 - _tmp66 * (_tmp49 * _tmp63 + _tmp62);
  const Scalar _tmp104 = _tmp103 * _tmp68;
  const Scalar _tmp105 = -_tmp104 * _tmp85 + _tmp49 * _tmp83 - _tmp82;
  const Scalar _tmp106 = _tmp103 + _tmp105 * _tmp90;
  const Scalar _tmp107 = -_tmp106 * _tmp69 - _tmp49;
  const Scalar _tmp108 = _tmp106 * _tmp68;
  const Scalar _tmp109 = _tmp108 * _tmp34;
  const Scalar _tmp110 = _tmp96 * _tmp99;
  const Scalar _tmp111 = _tmp110 * fh1;
  const Scalar _tmp112 = _tmp111 * _tmp78;
  const Scalar _tmp113 = Scalar(1.0) * _tmp89;
  const Scalar _tmp114 = _tmp113 * _tmp34;
  const Scalar _tmp115 = _tmp51 * _tmp72;
  const Scalar _tmp116 = fh1 * (_tmp100 * _tmp95 - _tmp110 * _tmp97);
  const Scalar _tmp117 = _tmp116 * _tmp78;
  const Scalar _tmp118 = std::exp(_tmp102 * (_tmp16 * _tmp94 + _tmp72 * _tmp93) +
                                  _tmp112 * (_tmp107 * _tmp72 + _tmp109 * _tmp16 + Scalar(1.0)) +
                                  _tmp117 * (-_tmp113 * _tmp115 + _tmp114 * _tmp16) +
                                  _tmp79 * (_tmp16 * _tmp75 - _tmp69 * _tmp73));
  const Scalar _tmp119 = std::pow(_tmp33, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp120 = _tmp119 * _tmp16 * _tmp30;
  const Scalar _tmp121 = _tmp119 * _tmp32;
  const Scalar _tmp122 = -_tmp120 + _tmp121 * _tmp49 - _tmp50;
  const Scalar _tmp123 = -_tmp120 * _tmp15 + _tmp121 * _tmp29 + _tmp121 * _tmp82 -
                         _tmp122 * _tmp83 - _tmp34 * _tmp82 - _tmp80;
  const Scalar _tmp124 = _tmp120 * _tmp24;
  const Scalar _tmp125 =
      -_tmp121 * _tmp24 + _tmp121 * _tmp36 - _tmp122 * _tmp61 + _tmp35 - _tmp37 -
      _tmp66 * (-_tmp121 * _tmp62 - _tmp122 * _tmp63 + _tmp124 + _tmp37 * _tmp49);
  const Scalar _tmp126 = std::pow(_tmp67, Scalar(-2));
  const Scalar _tmp127 = _tmp125 * _tmp126;
  const Scalar _tmp128 = _tmp85 * _tmp86;
  const Scalar _tmp129 = std::pow(_tmp85, Scalar(-2));
  const Scalar _tmp130 = _tmp129 * _tmp67;
  const Scalar _tmp131 = _tmp123 * _tmp130;
  const Scalar _tmp132 = _tmp125 * _tmp89;
  const Scalar _tmp133 =
      -_tmp131 * _tmp88 + _tmp132 * _tmp88 + _tmp90 * (-_tmp123 * _tmp87 + _tmp127 * _tmp128);
  const Scalar _tmp134 = _tmp68 * _tmp84;
  const Scalar _tmp135 = _tmp127 * _tmp84;
  const Scalar _tmp136 = _tmp127 * _tmp51;
  const Scalar _tmp137 = -_tmp122 * _tmp92 - _tmp133 * _tmp69 + _tmp136 * _tmp91;
  const Scalar _tmp138 = Scalar(1.0) * _tmp129;
  const Scalar _tmp139 = _tmp123 * _tmp138;
  const Scalar _tmp140 = _tmp122 * _tmp72;
  const Scalar _tmp141 = _tmp103 * _tmp85;
  const Scalar _tmp142 =
      -_tmp105 * _tmp131 + _tmp105 * _tmp132 + _tmp90 * (-_tmp104 * _tmp123 + _tmp127 * _tmp141);
  const Scalar _tmp143 = _tmp106 * _tmp136 - _tmp108 * _tmp122 - _tmp142 * _tmp69;
  const Scalar _tmp144 = _tmp71 * _tmp76;
  const Scalar _tmp145 = _tmp144 * _tmp59;
  const Scalar _tmp146 = _tmp113 * _tmp116;
  const Scalar _tmp147 = _tmp146 * _tmp59;
  const Scalar _tmp148 = _tmp111 * _tmp59;
  const Scalar _tmp149 = _tmp101 * _tmp59;
  const Scalar _tmp150 =
      std::exp(-_tmp107 * _tmp148 + _tmp145 * _tmp69 + _tmp147 * _tmp51 - _tmp149 * _tmp93);
  const Scalar _tmp151 = _tmp74 * _tmp76;
  const Scalar _tmp152 = _tmp151 * _tmp59;
  const Scalar _tmp153 = _tmp127 * _tmp144;
  const Scalar _tmp154 = _tmp51 * _tmp59;
  const Scalar _tmp155 = _tmp116 * _tmp139;
  const Scalar _tmp156 = std::exp(-_tmp101 * _tmp92 - _tmp108 * _tmp111 - _tmp146 - _tmp151);
  const Scalar _tmp157 = _tmp111 * _tmp68;
  const Scalar _tmp158 = _tmp101 * _tmp91;
  const Scalar _tmp159 = _tmp106 * _tmp111;
  const Scalar _tmp160 = _tmp119 * _tmp31;
  const Scalar _tmp161 = _tmp120 * _tmp49 - _tmp160 + _tmp34;
  const Scalar _tmp162 =
      _tmp120 * _tmp29 + _tmp120 * _tmp82 - _tmp15 * _tmp160 + _tmp15 * _tmp34 - _tmp161 * _tmp83;
  const Scalar _tmp163 = _tmp138 * _tmp162;
  const Scalar _tmp164 = _tmp161 * _tmp72;
  const Scalar _tmp165 =
      _tmp120 * _tmp36 - _tmp124 - _tmp161 * _tmp61 -
      _tmp66 * (-_tmp120 * _tmp62 + _tmp160 * _tmp24 - _tmp161 * _tmp63 - _tmp35);
  const Scalar _tmp166 = _tmp126 * _tmp165;
  const Scalar _tmp167 = _tmp165 * _tmp89;
  const Scalar _tmp168 = _tmp130 * _tmp162;
  const Scalar _tmp169 =
      _tmp105 * _tmp167 - _tmp105 * _tmp168 + _tmp90 * (-_tmp104 * _tmp162 + _tmp141 * _tmp166);
  const Scalar _tmp170 = _tmp166 * _tmp51;
  const Scalar _tmp171 = _tmp106 * _tmp170 - _tmp108 * _tmp161 - _tmp169 * _tmp69;
  const Scalar _tmp172 = _tmp166 * _tmp84;
  const Scalar _tmp173 =
      _tmp167 * _tmp88 - _tmp168 * _tmp88 + _tmp90 * (_tmp128 * _tmp166 - _tmp162 * _tmp87);
  const Scalar _tmp174 = -_tmp161 * _tmp92 + _tmp170 * _tmp91 - _tmp173 * _tmp69;
  const Scalar _tmp175 = _tmp173 * _tmp68;
  const Scalar _tmp176 = _tmp116 * _tmp163;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp118 * (-_tmp102 * (_tmp121 * _tmp92 + _tmp133 * _tmp134 - _tmp135 * _tmp91 +
                                       _tmp137 * _tmp72 - _tmp94) -
                           _tmp112 * (-_tmp106 * _tmp135 + _tmp108 * _tmp121 - _tmp109 +
                                      _tmp134 * _tmp142 + _tmp143 * _tmp72) -
                           _tmp117 * (_tmp113 * _tmp121 - _tmp113 * _tmp140 - _tmp114 +
                                      _tmp115 * _tmp139 - _tmp139 * _tmp84) -
                           _tmp79 * (_tmp121 * _tmp74 - _tmp135 * _tmp71 + _tmp136 * _tmp73 -
                                     _tmp140 * _tmp74 - _tmp75));
  _res(2, 0) = -_tmp150 * (-_tmp122 * _tmp147 - _tmp122 * _tmp152 + _tmp137 * _tmp149 +
                           _tmp143 * _tmp148 + _tmp153 * _tmp154 + _tmp154 * _tmp155);
  _res(3, 0) = -_tmp156 * (_tmp101 * _tmp133 * _tmp68 - _tmp127 * _tmp158 - _tmp127 * _tmp159 +
                           _tmp142 * _tmp157 - _tmp153 - _tmp155);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp118 *
      (-_tmp102 * (_tmp120 * _tmp92 - _tmp172 * _tmp91 + _tmp174 * _tmp72 + _tmp175 * _tmp84) -
       _tmp112 * (-_tmp106 * _tmp172 + _tmp108 * _tmp120 + _tmp134 * _tmp169 + _tmp171 * _tmp72) -
       _tmp117 * (_tmp113 * _tmp120 - _tmp113 * _tmp164 + _tmp115 * _tmp163 - _tmp163 * _tmp84) -
       _tmp79 * (_tmp120 * _tmp74 - _tmp164 * _tmp74 + _tmp170 * _tmp73 - _tmp172 * _tmp71));
  _res(2, 1) = -_tmp150 * (_tmp145 * _tmp170 - _tmp147 * _tmp161 + _tmp148 * _tmp171 +
                           _tmp149 * _tmp174 - _tmp152 * _tmp161 + _tmp154 * _tmp176);
  _res(3, 1) = -_tmp156 * (_tmp101 * _tmp175 - _tmp144 * _tmp166 + _tmp157 * _tmp169 -
                           _tmp158 * _tmp166 - _tmp159 * _tmp166 - _tmp176);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
