// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_pa
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     TransformationMatrix: Pose3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost3WrtPa(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const sym::Pose3<Scalar>& TransformationMatrix, const Scalar epsilon) {
  // Total ops: 356

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _TransformationMatrix = TransformationMatrix.Data();

  // Intermediate terms (136)
  const Scalar _tmp0 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp1 =
      _DeltaRot[0] * _TransformationMatrix[3] - _DeltaRot[1] * _TransformationMatrix[2] +
      _DeltaRot[2] * _TransformationMatrix[1] + _DeltaRot[3] * _TransformationMatrix[0];
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 =
      -_DeltaRot[0] * _TransformationMatrix[1] + _DeltaRot[1] * _TransformationMatrix[0] +
      _DeltaRot[2] * _TransformationMatrix[3] + _DeltaRot[3] * _TransformationMatrix[2];
  const Scalar _tmp4 = 1 - 2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 =
      _DeltaRot[0] * _TransformationMatrix[2] + _DeltaRot[1] * _TransformationMatrix[3] -
      _DeltaRot[2] * _TransformationMatrix[0] + _DeltaRot[3] * _TransformationMatrix[1];
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp3 * _tmp8;
  const Scalar _tmp10 =
      -2 * _DeltaRot[0] * _TransformationMatrix[0] - 2 * _DeltaRot[1] * _TransformationMatrix[1] -
      2 * _DeltaRot[2] * _TransformationMatrix[2] + 2 * _DeltaRot[3] * _TransformationMatrix[3];
  const Scalar _tmp11 = _tmp1 * _tmp10;
  const Scalar _tmp12 =
      Scalar(0.010999999999999999) * _tmp11 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp13 = _tmp1 * _tmp8;
  const Scalar _tmp14 = _tmp10 * _tmp3;
  const Scalar _tmp15 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp16 = _tmp12 + _tmp15;
  const Scalar _tmp17 = _tmp16 + _tmp6;
  const Scalar _tmp18 = _TransformationMatrix[5] + _tmp17 - p_b(1, 0);
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp13 - Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp20 = -_tmp19;
  const Scalar _tmp21 = -2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp22 = Scalar(0.20999999999999999) * _tmp21 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp23 = 2 * _tmp1 * _tmp3;
  const Scalar _tmp24 = _tmp10 * _tmp7;
  const Scalar _tmp25 =
      -Scalar(0.010999999999999999) * _tmp23 - Scalar(0.010999999999999999) * _tmp24;
  const Scalar _tmp26 = _tmp22 + _tmp25;
  const Scalar _tmp27 = _tmp20 + _tmp26;
  const Scalar _tmp28 = _TransformationMatrix[4] + _tmp27 - p_b(0, 0);
  const Scalar _tmp29 = Scalar(1.0) / (_tmp28);
  const Scalar _tmp30 = _tmp18 * _tmp29;
  const Scalar _tmp31 = _tmp19 + _tmp26;
  const Scalar _tmp32 = _TransformationMatrix[4] + _tmp31 - p_c(0, 0);
  const Scalar _tmp33 = _tmp16 + _tmp5;
  const Scalar _tmp34 = _TransformationMatrix[5] + _tmp33 - p_c(1, 0);
  const Scalar _tmp35 = std::pow(Scalar(std::pow(_tmp32, Scalar(2)) + std::pow(_tmp34, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp36 = _tmp32 * _tmp35;
  const Scalar _tmp37 = _tmp34 * _tmp35;
  const Scalar _tmp38 = Scalar(1.0) / (_tmp30 * _tmp36 - _tmp37);
  const Scalar _tmp39 = _tmp36 * _tmp38;
  const Scalar _tmp40 = Scalar(1.0) * _tmp27;
  const Scalar _tmp41 = Scalar(1.0) * _tmp17;
  const Scalar _tmp42 = (-_tmp31 + _tmp40) / (_tmp33 - _tmp41);
  const Scalar _tmp43 = _tmp40 + _tmp41 * _tmp42;
  const Scalar _tmp44 = 0;
  const Scalar _tmp45 = _tmp12 - _tmp15;
  const Scalar _tmp46 = _tmp45 + _tmp5;
  const Scalar _tmp47 = _TransformationMatrix[5] + _tmp46 - p_d(1, 0);
  const Scalar _tmp48 = -_tmp22 + _tmp25;
  const Scalar _tmp49 = _tmp19 + _tmp48;
  const Scalar _tmp50 = _TransformationMatrix[4] + _tmp49 - p_d(0, 0);
  const Scalar _tmp51 = std::pow(Scalar(std::pow(_tmp47, Scalar(2)) + std::pow(_tmp50, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp52 = _tmp47 * _tmp51;
  const Scalar _tmp53 = _tmp50 * _tmp51;
  const Scalar _tmp54 = _tmp30 * _tmp53 - _tmp52;
  const Scalar _tmp55 = -Scalar(0.010999999999999999) * _tmp2 -
                        Scalar(0.010999999999999999) * _tmp21 + Scalar(-0.010999999999999999);
  const Scalar _tmp56 = Scalar(0.20999999999999999) * _tmp23 - Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp57 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp58 = _tmp55 - _tmp56 + _tmp57;
  const Scalar _tmp59 = _tmp55 + _tmp56;
  const Scalar _tmp60 = -_tmp57 + _tmp59;
  const Scalar _tmp61 = _tmp57 + _tmp59;
  const Scalar _tmp62 = _tmp36 * _tmp60 - _tmp36 * _tmp61;
  const Scalar _tmp63 = _tmp38 * _tmp54;
  const Scalar _tmp64 = _tmp30 * _tmp60;
  const Scalar _tmp65 = -_tmp36 * _tmp64 + _tmp37 * _tmp61;
  const Scalar _tmp66 = -_tmp42 * (_tmp52 * _tmp58 - _tmp53 * _tmp64 - _tmp63 * _tmp65) -
                        _tmp53 * _tmp58 + _tmp53 * _tmp60 - _tmp62 * _tmp63;
  const Scalar _tmp67 = Scalar(1.0) / (_tmp66);
  const Scalar _tmp68 = _tmp54 * _tmp67;
  const Scalar _tmp69 = _tmp44 * _tmp68;
  const Scalar _tmp70 = _tmp44 * _tmp67;
  const Scalar _tmp71 =
      std::sqrt(Scalar(std::pow(_tmp18, Scalar(2)) + std::pow(_tmp28, Scalar(2))));
  const Scalar _tmp72 = _tmp29 * _tmp71;
  const Scalar _tmp73 = _tmp45 + _tmp6;
  const Scalar _tmp74 = _TransformationMatrix[5] + _tmp73 - p_a(1, 0);
  const Scalar _tmp75 = Scalar(1.0) * _tmp38;
  const Scalar _tmp76 = _tmp42 * _tmp65 * _tmp75 - _tmp62 * _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (_tmp71);
  const Scalar _tmp78 = _tmp72 * (-_tmp17 * _tmp28 * _tmp77 + _tmp18 * _tmp27 * _tmp77);
  const Scalar _tmp79 = -_tmp31 * _tmp37 + _tmp33 * _tmp36 + _tmp36 * _tmp78;
  const Scalar _tmp80 = _tmp46 * _tmp53 - _tmp49 * _tmp52 + _tmp53 * _tmp78 - _tmp63 * _tmp79;
  const Scalar _tmp81 = _tmp67 * _tmp80;
  const Scalar _tmp82 = Scalar(1.0) / (_tmp80);
  const Scalar _tmp83 = _tmp66 * _tmp82;
  const Scalar _tmp84 = _tmp76 + _tmp83 * (-_tmp75 * _tmp79 - _tmp76 * _tmp81);
  const Scalar _tmp85 = -_tmp68 * _tmp84 + Scalar(1.0);
  const Scalar _tmp86 = _tmp67 * _tmp84;
  const Scalar _tmp87 = _tmp39 * _tmp85 + _tmp53 * _tmp86;
  const Scalar _tmp88 = _tmp20 + _tmp48;
  const Scalar _tmp89 = _TransformationMatrix[4] + _tmp88 - p_a(0, 0);
  const Scalar _tmp90 = std::pow(_tmp89, Scalar(2));
  const Scalar _tmp91 = std::pow(_tmp74, Scalar(2));
  const Scalar _tmp92 = _tmp90 + _tmp91;
  const Scalar _tmp93 = std::pow(_tmp92, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp94 = _tmp93 * fh1;
  const Scalar _tmp95 = _tmp72 * _tmp94;
  const Scalar _tmp96 = _tmp87 * _tmp95;
  const Scalar _tmp97 = _tmp30 * _tmp38;
  const Scalar _tmp98 = -_tmp42 * (_tmp64 + _tmp65 * _tmp97) - _tmp60 + _tmp62 * _tmp97;
  const Scalar _tmp99 = _tmp83 * (-_tmp78 + _tmp79 * _tmp97 - _tmp81 * _tmp98) + _tmp98;
  const Scalar _tmp100 = -_tmp30 - _tmp68 * _tmp99;
  const Scalar _tmp101 = _tmp67 * _tmp99;
  const Scalar _tmp102 = _tmp100 * _tmp39 + _tmp101 * _tmp53 + Scalar(1.0);
  const Scalar _tmp103 = _tmp102 * _tmp95;
  const Scalar _tmp104 = _tmp88 * _tmp93;
  const Scalar _tmp105 = _tmp73 * _tmp93;
  const Scalar _tmp106 = fh1 * (_tmp104 * _tmp74 - _tmp105 * _tmp89);
  const Scalar _tmp107 = Scalar(1.0) * _tmp82;
  const Scalar _tmp108 = _tmp72 * (-_tmp107 * _tmp36 * _tmp63 + _tmp107 * _tmp53);
  const Scalar _tmp109 = std::exp(_tmp0 * _tmp72 * (-_tmp39 * _tmp69 + _tmp53 * _tmp70) +
                                  _tmp103 * _tmp89 + _tmp106 * _tmp108 + _tmp74 * _tmp96);
  const Scalar _tmp110 = _tmp74 * _tmp89;
  const Scalar _tmp111 = std::pow(_tmp92, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp112 = _tmp111 * fh1;
  const Scalar _tmp113 = _tmp110 * _tmp112;
  const Scalar _tmp114 = _tmp72 * _tmp87;
  const Scalar _tmp115 = _tmp112 * _tmp90;
  const Scalar _tmp116 = _tmp102 * _tmp72;
  const Scalar _tmp117 = _tmp111 * _tmp73;
  const Scalar _tmp118 = _tmp111 * _tmp88;
  const Scalar _tmp119 = _tmp105 + _tmp110 * _tmp118 - _tmp117 * _tmp90;
  const Scalar _tmp120 = _tmp108 * fh1;
  const Scalar _tmp121 = _tmp106 * _tmp107;
  const Scalar _tmp122 = _tmp38 * _tmp94;
  const Scalar _tmp123 = _tmp100 * _tmp122;
  const Scalar _tmp124 = _tmp122 * _tmp85;
  const Scalar _tmp125 =
      std::exp(_tmp0 * _tmp38 * _tmp69 + _tmp121 * _tmp63 - _tmp123 * _tmp89 - _tmp124 * _tmp74);
  const Scalar _tmp126 = _tmp38 * _tmp85;
  const Scalar _tmp127 = _tmp100 * _tmp38;
  const Scalar _tmp128 = _tmp107 * fh1;
  const Scalar _tmp129 = _tmp119 * _tmp128;
  const Scalar _tmp130 = _tmp86 * _tmp94;
  const Scalar _tmp131 = _tmp101 * _tmp94;
  const Scalar _tmp132 = std::exp(-_tmp0 * _tmp70 - _tmp121 - _tmp130 * _tmp74 - _tmp131 * _tmp89);
  const Scalar _tmp133 = _tmp112 * _tmp91;
  const Scalar _tmp134 = -_tmp104 - _tmp110 * _tmp117 + _tmp118 * _tmp91;
  const Scalar _tmp135 = _tmp128 * _tmp134;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp109 * (_tmp103 - _tmp113 * _tmp114 - _tmp115 * _tmp116 - _tmp119 * _tmp120);
  _res(2, 0) = -_tmp125 * (_tmp113 * _tmp126 + _tmp115 * _tmp127 - _tmp123 - _tmp129 * _tmp63);
  _res(3, 0) = -_tmp132 * (_tmp101 * _tmp115 + _tmp113 * _tmp86 + _tmp129 - _tmp131);
  _res(0, 1) = 0;
  _res(1, 1) = -_tmp109 * (-_tmp113 * _tmp116 - _tmp114 * _tmp133 - _tmp120 * _tmp134 + _tmp96);
  _res(2, 1) = -_tmp125 * (_tmp113 * _tmp127 - _tmp124 + _tmp126 * _tmp133 - _tmp135 * _tmp63);
  _res(3, 1) = -_tmp132 * (_tmp101 * _tmp113 - _tmp130 + _tmp133 * _tmp86 + _tmp135);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
