// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_pd
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost3WrtPd(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const sym::Rot3<Scalar>& Rot_init,
    const Scalar epsilon) {
  // Total ops: 567

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (185)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp5 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp10 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp11 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp12 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp13 = _tmp1 * _tmp5;
  const Scalar _tmp14 =
      -Scalar(0.010999999999999999) * _tmp12 - Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp8;
  const Scalar _tmp17 = _tmp16 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp19 = _tmp2 * _tmp4;
  const Scalar _tmp20 = _tmp0 * _tmp5;
  const Scalar _tmp21 =
      -Scalar(0.010999999999999999) * _tmp19 + Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp22 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp9 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp24 = _tmp21 - _tmp23;
  const Scalar _tmp25 = _tmp18 + _tmp24;
  const Scalar _tmp26 = _tmp25 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp27 =
      std::sqrt(Scalar(std::pow(_tmp17, Scalar(2)) + std::pow(_tmp26, Scalar(2))));
  const Scalar _tmp28 = Scalar(1.0) / (_tmp27);
  const Scalar _tmp29 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp30 = _tmp27 * _tmp29;
  const Scalar _tmp31 = _tmp30 * (_tmp16 * _tmp26 * _tmp28 - _tmp17 * _tmp25 * _tmp28);
  const Scalar _tmp32 = _tmp26 * _tmp29;
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp19 + Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp34 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp35 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp36 = _tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp33 + _tmp36;
  const Scalar _tmp38 = _tmp15 + _tmp7;
  const Scalar _tmp39 = _tmp38 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp40 = _tmp21 + _tmp23;
  const Scalar _tmp41 = _tmp18 + _tmp40;
  const Scalar _tmp42 = _tmp41 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp43 = std::pow(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp42, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp44 = _tmp39 * _tmp43;
  const Scalar _tmp45 = -_tmp33 + _tmp36;
  const Scalar _tmp46 = _tmp44 * _tmp45;
  const Scalar _tmp47 = -_tmp37 * _tmp44 + _tmp46;
  const Scalar _tmp48 = _tmp42 * _tmp43;
  const Scalar _tmp49 = Scalar(1.0) / (_tmp32 * _tmp44 - _tmp48);
  const Scalar _tmp50 = _tmp47 * _tmp49;
  const Scalar _tmp51 = _tmp32 * _tmp45;
  const Scalar _tmp52 = -_tmp32 * _tmp46 + _tmp37 * _tmp48;
  const Scalar _tmp53 = _tmp49 * _tmp52;
  const Scalar _tmp54 = Scalar(1.0) * _tmp25;
  const Scalar _tmp55 = Scalar(1.0) * _tmp16;
  const Scalar _tmp56 = (-_tmp38 + _tmp55) / (_tmp41 - _tmp54);
  const Scalar _tmp57 = _tmp32 * _tmp50 - _tmp45 - _tmp56 * (_tmp32 * _tmp53 + _tmp51);
  const Scalar _tmp58 = -_tmp11 + _tmp14;
  const Scalar _tmp59 = _tmp58 + _tmp7;
  const Scalar _tmp60 = _tmp59 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp61 = _tmp33 + _tmp34 - _tmp35;
  const Scalar _tmp62 = std::pow(_tmp60, Scalar(2));
  const Scalar _tmp63 = -_tmp18;
  const Scalar _tmp64 = _tmp40 + _tmp63;
  const Scalar _tmp65 = _tmp64 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp66 = std::pow(_tmp65, Scalar(2));
  const Scalar _tmp67 = _tmp62 + _tmp66;
  const Scalar _tmp68 = std::pow(_tmp67, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp69 = _tmp61 * _tmp68;
  const Scalar _tmp70 = _tmp45 * _tmp68;
  const Scalar _tmp71 = _tmp60 * _tmp70;
  const Scalar _tmp72 = _tmp32 * _tmp68;
  const Scalar _tmp73 = _tmp65 * _tmp68;
  const Scalar _tmp74 = _tmp60 * _tmp72 - _tmp73;
  const Scalar _tmp75 = -_tmp50 * _tmp74 -
                        _tmp56 * (-_tmp32 * _tmp71 - _tmp53 * _tmp74 + _tmp65 * _tmp69) -
                        _tmp60 * _tmp69 + _tmp71;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp75);
  const Scalar _tmp77 = _tmp64 * _tmp68;
  const Scalar _tmp78 = _tmp31 * _tmp44 - _tmp38 * _tmp48 + _tmp41 * _tmp44;
  const Scalar _tmp79 = _tmp49 * _tmp78;
  const Scalar _tmp80 = _tmp60 * _tmp68;
  const Scalar _tmp81 = _tmp31 * _tmp80 - _tmp59 * _tmp73 + _tmp60 * _tmp77 - _tmp74 * _tmp79;
  const Scalar _tmp82 = _tmp76 * _tmp81;
  const Scalar _tmp83 = -_tmp31 + _tmp32 * _tmp79 - _tmp57 * _tmp82;
  const Scalar _tmp84 = Scalar(1.0) / (_tmp81);
  const Scalar _tmp85 = _tmp75 * _tmp84;
  const Scalar _tmp86 = _tmp57 + _tmp83 * _tmp85;
  const Scalar _tmp87 = _tmp74 * _tmp76;
  const Scalar _tmp88 = -_tmp32 - _tmp86 * _tmp87;
  const Scalar _tmp89 = _tmp44 * _tmp49;
  const Scalar _tmp90 = _tmp76 * _tmp86;
  const Scalar _tmp91 = _tmp68 * _tmp90;
  const Scalar _tmp92 = _tmp58 + _tmp8;
  const Scalar _tmp93 = _tmp92 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp94 = _tmp24 + _tmp63;
  const Scalar _tmp95 = _tmp94 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp96 = std::pow(Scalar(std::pow(_tmp93, Scalar(2)) + std::pow(_tmp95, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp97 = _tmp93 * _tmp96;
  const Scalar _tmp98 = _tmp97 * fh1;
  const Scalar _tmp99 = _tmp30 * _tmp98;
  const Scalar _tmp100 = -Scalar(1.0) * _tmp50 + Scalar(1.0) * _tmp53 * _tmp56;
  const Scalar _tmp101 = -_tmp100 * _tmp82 - Scalar(1.0) * _tmp79;
  const Scalar _tmp102 = _tmp100 + _tmp101 * _tmp85;
  const Scalar _tmp103 = _tmp102 * _tmp76;
  const Scalar _tmp104 = _tmp103 * _tmp68;
  const Scalar _tmp105 = -_tmp102 * _tmp87 + Scalar(1.0);
  const Scalar _tmp106 = _tmp95 * _tmp96;
  const Scalar _tmp107 = _tmp106 * fh1;
  const Scalar _tmp108 = _tmp107 * _tmp30;
  const Scalar _tmp109 = Scalar(1.0) * _tmp84;
  const Scalar _tmp110 = _tmp109 * _tmp68;
  const Scalar _tmp111 = _tmp74 * _tmp89;
  const Scalar _tmp112 = fh1 * (_tmp106 * _tmp92 - _tmp94 * _tmp97);
  const Scalar _tmp113 = _tmp112 * _tmp30;
  const Scalar _tmp114 = _tmp54 * _tmp56 + _tmp55;
  const Scalar _tmp115 = 0;
  const Scalar _tmp116 = _tmp115 * _tmp76;
  const Scalar _tmp117 = _tmp116 * _tmp68;
  const Scalar _tmp118 = _tmp115 * _tmp89;
  const Scalar _tmp119 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp120 = _tmp119 * _tmp30;
  const Scalar _tmp121 = std::exp(_tmp108 * (_tmp104 * _tmp60 + _tmp105 * _tmp89) +
                                  _tmp113 * (-_tmp109 * _tmp111 + _tmp110 * _tmp60) +
                                  _tmp120 * (_tmp117 * _tmp60 - _tmp118 * _tmp87) +
                                  _tmp99 * (_tmp60 * _tmp91 + _tmp88 * _tmp89 + Scalar(1.0)));
  const Scalar _tmp122 = std::pow(_tmp67, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp123 = _tmp122 * _tmp62;
  const Scalar _tmp124 = _tmp123 * _tmp45;
  const Scalar _tmp125 = _tmp122 * _tmp60 * _tmp65;
  const Scalar _tmp126 = _tmp123 * _tmp32 - _tmp125 - _tmp72;
  const Scalar _tmp127 = _tmp126 * _tmp49;
  const Scalar _tmp128 = _tmp125 * _tmp61;
  const Scalar _tmp129 =
      -_tmp123 * _tmp61 + _tmp124 - _tmp127 * _tmp47 -
      _tmp56 * (-_tmp124 * _tmp32 - _tmp127 * _tmp52 + _tmp128 + _tmp32 * _tmp70) + _tmp69 - _tmp70;
  const Scalar _tmp130 = _tmp83 * _tmp84;
  const Scalar _tmp131 = _tmp123 * _tmp31 + _tmp123 * _tmp64 - _tmp125 * _tmp59 - _tmp127 * _tmp78 -
                         _tmp31 * _tmp68 - _tmp77;
  const Scalar _tmp132 = _tmp131 * _tmp76;
  const Scalar _tmp133 = std::pow(_tmp75, Scalar(-2));
  const Scalar _tmp134 = _tmp129 * _tmp133;
  const Scalar _tmp135 = _tmp57 * _tmp81;
  const Scalar _tmp136 = std::pow(_tmp81, Scalar(-2));
  const Scalar _tmp137 = _tmp136 * _tmp75;
  const Scalar _tmp138 = _tmp137 * _tmp83;
  const Scalar _tmp139 =
      _tmp129 * _tmp130 - _tmp131 * _tmp138 + _tmp85 * (-_tmp132 * _tmp57 + _tmp134 * _tmp135);
  const Scalar _tmp140 = _tmp139 * _tmp76;
  const Scalar _tmp141 = _tmp134 * _tmp80;
  const Scalar _tmp142 = _tmp74 * _tmp86;
  const Scalar _tmp143 = _tmp126 * _tmp76;
  const Scalar _tmp144 = _tmp134 * _tmp142 - _tmp139 * _tmp87 - _tmp143 * _tmp86;
  const Scalar _tmp145 = _tmp111 * _tmp115;
  const Scalar _tmp146 = Scalar(1.0) * _tmp136;
  const Scalar _tmp147 = _tmp131 * _tmp146;
  const Scalar _tmp148 = _tmp109 * _tmp44;
  const Scalar _tmp149 = _tmp101 * _tmp84;
  const Scalar _tmp150 = _tmp100 * _tmp81;
  const Scalar _tmp151 = _tmp101 * _tmp137;
  const Scalar _tmp152 =
      _tmp129 * _tmp149 - _tmp131 * _tmp151 + _tmp85 * (-_tmp100 * _tmp132 + _tmp134 * _tmp150);
  const Scalar _tmp153 = _tmp76 * _tmp80;
  const Scalar _tmp154 = _tmp102 * _tmp74;
  const Scalar _tmp155 = -_tmp102 * _tmp143 + _tmp134 * _tmp154 - _tmp152 * _tmp87;
  const Scalar _tmp156 = _tmp107 * _tmp49;
  const Scalar _tmp157 = _tmp49 * _tmp98;
  const Scalar _tmp158 = _tmp109 * _tmp112;
  const Scalar _tmp159 = _tmp49 * _tmp74;
  const Scalar _tmp160 = _tmp115 * _tmp119;
  const Scalar _tmp161 = _tmp160 * _tmp49;
  const Scalar _tmp162 =
      std::exp(-_tmp105 * _tmp156 - _tmp157 * _tmp88 + _tmp158 * _tmp159 + _tmp161 * _tmp87);
  const Scalar _tmp163 = _tmp112 * _tmp147;
  const Scalar _tmp164 = _tmp134 * _tmp160;
  const Scalar _tmp165 = _tmp116 * _tmp119;
  const Scalar _tmp166 = std::exp(-_tmp103 * _tmp107 - _tmp158 - _tmp165 - _tmp90 * _tmp98);
  const Scalar _tmp167 = _tmp102 * _tmp107;
  const Scalar _tmp168 = _tmp107 * _tmp76;
  const Scalar _tmp169 = _tmp86 * _tmp98;
  const Scalar _tmp170 = _tmp122 * _tmp66;
  const Scalar _tmp171 = _tmp125 * _tmp32 - _tmp170 + _tmp68;
  const Scalar _tmp172 = _tmp171 * _tmp49;
  const Scalar _tmp173 =
      _tmp125 * _tmp45 - _tmp128 - _tmp172 * _tmp47 -
      _tmp56 * (-_tmp125 * _tmp51 + _tmp170 * _tmp61 - _tmp172 * _tmp52 - _tmp69);
  const Scalar _tmp174 = _tmp133 * _tmp173;
  const Scalar _tmp175 = _tmp174 * _tmp80;
  const Scalar _tmp176 =
      _tmp125 * _tmp31 + _tmp125 * _tmp64 - _tmp170 * _tmp59 - _tmp172 * _tmp78 + _tmp59 * _tmp68;
  const Scalar _tmp177 = _tmp176 * _tmp76;
  const Scalar _tmp178 =
      _tmp130 * _tmp173 - _tmp138 * _tmp176 + _tmp85 * (_tmp135 * _tmp174 - _tmp177 * _tmp57);
  const Scalar _tmp179 = _tmp142 * _tmp174 - _tmp171 * _tmp90 - _tmp178 * _tmp87;
  const Scalar _tmp180 =
      _tmp149 * _tmp173 - _tmp151 * _tmp176 + _tmp85 * (-_tmp100 * _tmp177 + _tmp150 * _tmp174);
  const Scalar _tmp181 = -_tmp103 * _tmp171 + _tmp154 * _tmp174 - _tmp180 * _tmp87;
  const Scalar _tmp182 = _tmp146 * _tmp176;
  const Scalar _tmp183 = _tmp160 * _tmp174;
  const Scalar _tmp184 = _tmp112 * _tmp182;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp121 * (-_tmp108 * (-_tmp102 * _tmp141 + _tmp103 * _tmp123 - _tmp104 +
                                       _tmp152 * _tmp153 + _tmp155 * _tmp89) -
                           _tmp113 * (_tmp109 * _tmp123 - _tmp110 + _tmp111 * _tmp147 -
                                      _tmp127 * _tmp148 - _tmp147 * _tmp80) -
                           _tmp120 * (-_tmp115 * _tmp141 + _tmp116 * _tmp123 - _tmp117 -
                                      _tmp118 * _tmp143 + _tmp134 * _tmp145) -
                           _tmp99 * (_tmp123 * _tmp90 + _tmp140 * _tmp80 - _tmp141 * _tmp86 +
                                     _tmp144 * _tmp89 - _tmp91));
  _res(2, 0) = -_tmp162 * (-_tmp127 * _tmp158 - _tmp143 * _tmp161 + _tmp144 * _tmp157 +
                           _tmp155 * _tmp156 + _tmp159 * _tmp163 + _tmp159 * _tmp164);
  _res(3, 0) = -_tmp166 * (-_tmp134 * _tmp167 - _tmp134 * _tmp169 + _tmp140 * _tmp98 +
                           _tmp152 * _tmp168 - _tmp163 - _tmp164);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp121 *
      (-_tmp108 * (-_tmp102 * _tmp175 + _tmp103 * _tmp125 + _tmp153 * _tmp180 + _tmp181 * _tmp89) -
       _tmp113 * (_tmp109 * _tmp125 + _tmp111 * _tmp182 - _tmp148 * _tmp172 - _tmp182 * _tmp80) -
       _tmp120 * (-_tmp115 * _tmp175 + _tmp116 * _tmp125 - _tmp116 * _tmp172 * _tmp44 +
                  _tmp145 * _tmp174) -
       _tmp99 * (_tmp125 * _tmp90 + _tmp153 * _tmp178 - _tmp175 * _tmp86 + _tmp179 * _tmp89));
  _res(2, 1) = -_tmp162 * (_tmp156 * _tmp181 + _tmp157 * _tmp179 - _tmp158 * _tmp172 +
                           _tmp159 * _tmp183 + _tmp159 * _tmp184 - _tmp165 * _tmp172);
  _res(3, 1) = -_tmp166 * (-_tmp167 * _tmp174 + _tmp168 * _tmp180 - _tmp169 * _tmp174 +
                           _tmp178 * _tmp76 * _tmp98 - _tmp183 - _tmp184);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
