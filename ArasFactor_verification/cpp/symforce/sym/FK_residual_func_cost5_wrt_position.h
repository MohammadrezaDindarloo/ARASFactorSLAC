// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost5_wrt_position
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     uwb_measure: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost5WrtPosition(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 4, 1>& uwb_measure,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& DeltaRot, const Eigen::Matrix<Scalar, 3, 1>& position_vector,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 161

  // Unused inputs
  (void)fh1;
  (void)fv1;
  (void)uwb_measure;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (48)
  const Scalar _tmp0 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp1 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp2 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = Scalar(0.20999999999999999) * _tmp1 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp5 = -_tmp4;
  const Scalar _tmp6 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp7 = 2 * _tmp0 * _tmp6;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                       2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp9 = _tmp2 * _tmp8;
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp7 - Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp11 = 2 * _tmp2;
  const Scalar _tmp12 = _tmp11 * _tmp6;
  const Scalar _tmp13 = _tmp0 * _tmp8;
  const Scalar _tmp14 = -Scalar(0.010999999999999999) * _tmp12 -
                        Scalar(0.010999999999999999) * _tmp13 + position_vector(0, 0);
  const Scalar _tmp15 = -_tmp10 + _tmp14;
  const Scalar _tmp16 = -_tmp15 - _tmp5 + p_a(0, 0);
  const Scalar _tmp17 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp18 = -_tmp17;
  const Scalar _tmp19 = _tmp0 * _tmp11;
  const Scalar _tmp20 = _tmp6 * _tmp8;
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp19 + Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp22 = -2 * std::pow(_tmp6, Scalar(2));
  const Scalar _tmp23 = -Scalar(0.010999999999999999) * _tmp1 -
                        Scalar(0.010999999999999999) * _tmp22 + position_vector(2, 0) +
                        Scalar(-0.010999999999999999);
  const Scalar _tmp24 = -_tmp21 + _tmp23;
  const Scalar _tmp25 = -_tmp18 - _tmp24 + p_a(2, 0);
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp3;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = Scalar(0.20999999999999999) * _tmp7 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp29 = -Scalar(0.010999999999999999) * _tmp19 +
                        Scalar(0.010999999999999999) * _tmp20 + position_vector(1, 0);
  const Scalar _tmp30 = -_tmp28 + _tmp29;
  const Scalar _tmp31 = -_tmp27 - _tmp30 + p_a(1, 0);
  const Scalar _tmp32 = std::pow(Scalar(std::pow(_tmp16, Scalar(2)) + std::pow(_tmp25, Scalar(2)) +
                                        std::pow(_tmp31, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp33 = -_tmp15 - _tmp4 + p_b(0, 0);
  const Scalar _tmp34 = _tmp28 + _tmp29;
  const Scalar _tmp35 = -_tmp27 - _tmp34 + p_b(1, 0);
  const Scalar _tmp36 = -_tmp17 - _tmp24 + p_b(2, 0);
  const Scalar _tmp37 = std::pow(Scalar(std::pow(_tmp33, Scalar(2)) + std::pow(_tmp35, Scalar(2)) +
                                        std::pow(_tmp36, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp38 = _tmp10 + _tmp14;
  const Scalar _tmp39 = -_tmp38 - _tmp4 + p_c(0, 0);
  const Scalar _tmp40 = _tmp21 + _tmp23;
  const Scalar _tmp41 = -_tmp17 - _tmp40 + p_c(2, 0);
  const Scalar _tmp42 = -_tmp26 - _tmp34 + p_c(1, 0);
  const Scalar _tmp43 = std::pow(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp41, Scalar(2)) +
                                        std::pow(_tmp42, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp44 = -_tmp38 - _tmp5 + p_d(0, 0);
  const Scalar _tmp45 = -_tmp26 - _tmp30 + p_d(1, 0);
  const Scalar _tmp46 = -_tmp18 - _tmp40 + p_d(2, 0);
  const Scalar _tmp47 = std::pow(Scalar(std::pow(_tmp44, Scalar(2)) + std::pow(_tmp45, Scalar(2)) +
                                        std::pow(_tmp46, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = -_tmp16 * _tmp32;
  _res(1, 0) = -_tmp33 * _tmp37;
  _res(2, 0) = -_tmp39 * _tmp43;
  _res(3, 0) = -_tmp44 * _tmp47;
  _res(0, 1) = -_tmp31 * _tmp32;
  _res(1, 1) = -_tmp35 * _tmp37;
  _res(2, 1) = -_tmp42 * _tmp43;
  _res(3, 1) = -_tmp45 * _tmp47;
  _res(0, 2) = -_tmp25 * _tmp32;
  _res(1, 2) = -_tmp36 * _tmp37;
  _res(2, 2) = -_tmp41 * _tmp43;
  _res(3, 2) = -_tmp46 * _tmp47;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
