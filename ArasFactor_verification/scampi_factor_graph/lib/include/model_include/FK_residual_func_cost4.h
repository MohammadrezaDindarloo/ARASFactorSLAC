// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost4
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     ofset0: Scalar
 *     ofset1: Scalar
 *     ofset2: Scalar
 *     ofset3: Scalar
 *     encoder_data: Matrix41
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     Rot_init: Rot3
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> FkResidualFuncCost4(
    const Scalar fh1, const Scalar fv1, const Scalar ofset0, const Scalar ofset1,
    const Scalar ofset2, const Scalar ofset3, const Eigen::Matrix<Scalar, 4, 1>& encoder_data,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const sym::Rot3<Scalar>& DeltaRot, const Eigen::Matrix<Scalar, 3, 1>& position_vector,
    const sym::Rot3<Scalar>& Rot_init, const Scalar epsilon) {
  // Total ops: 477

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_init = Rot_init.Data();

  // Intermediate terms (156)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = _DeltaRot[0] * _Rot_init[3] - _DeltaRot[1] * _Rot_init[2] +
                       _DeltaRot[2] * _Rot_init[1] + _DeltaRot[3] * _Rot_init[0];
  const Scalar _tmp2 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp3 = -_DeltaRot[0] * _Rot_init[1] + _DeltaRot[1] * _Rot_init[0] +
                       _DeltaRot[2] * _Rot_init[3] + _DeltaRot[3] * _Rot_init[2];
  const Scalar _tmp4 = 1 - 2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = Scalar(0.20999999999999999) * _tmp2 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 = _DeltaRot[0] * _Rot_init[2] + _DeltaRot[1] * _Rot_init[3] -
                       _DeltaRot[2] * _Rot_init[0] + _DeltaRot[3] * _Rot_init[1];
  const Scalar _tmp8 = 2 * _tmp1;
  const Scalar _tmp9 = _tmp7 * _tmp8;
  const Scalar _tmp10 = -2 * _DeltaRot[0] * _Rot_init[0] - 2 * _DeltaRot[1] * _Rot_init[1] -
                        2 * _DeltaRot[2] * _Rot_init[2] + 2 * _DeltaRot[3] * _Rot_init[3];
  const Scalar _tmp11 = _tmp10 * _tmp3;
  const Scalar _tmp12 = Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp13 = 2 * _tmp3 * _tmp7;
  const Scalar _tmp14 = _tmp1 * _tmp10;
  const Scalar _tmp15 = _tmp13 - _tmp14;
  const Scalar _tmp16 = -Scalar(0.010999999999999999) * _tmp15;
  const Scalar _tmp17 = -_tmp12 + _tmp16;
  const Scalar _tmp18 = _tmp17 + _tmp6;
  const Scalar _tmp19 = _tmp18 + position_vector(1, 0);
  const Scalar _tmp20 = -2 * std::pow(_tmp7, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp4;
  const Scalar _tmp22 = -_tmp21;
  const Scalar _tmp23 = _tmp3 * _tmp8;
  const Scalar _tmp24 = _tmp10 * _tmp7;
  const Scalar _tmp25 = _tmp23 + _tmp24;
  const Scalar _tmp26 = -Scalar(0.010999999999999999) * _tmp25;
  const Scalar _tmp27 = -Scalar(0.20999999999999999) * _tmp11 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp28 = _tmp26 - _tmp27;
  const Scalar _tmp29 = _tmp22 + _tmp28;
  const Scalar _tmp30 = _tmp29 + position_vector(0, 0);
  const Scalar _tmp31 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp32 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp33 = _tmp21 + _tmp28;
  const Scalar _tmp34 = _tmp33 + position_vector(0, 0);
  const Scalar _tmp35 = _tmp34 - p_b(0, 0);
  const Scalar _tmp36 = _tmp12 + _tmp16;
  const Scalar _tmp37 = _tmp36 + _tmp6;
  const Scalar _tmp38 = _tmp37 + position_vector(1, 0);
  const Scalar _tmp39 = _tmp38 - p_b(1, 0);
  const Scalar _tmp40 =
      std::sqrt(Scalar(std::pow(_tmp35, Scalar(2)) + std::pow(_tmp39, Scalar(2))));
  const Scalar _tmp41 = Scalar(1.0) / (_tmp40);
  const Scalar _tmp42 = Scalar(1.0) / (_tmp35);
  const Scalar _tmp43 = _tmp40 * _tmp42;
  const Scalar _tmp44 = _tmp43 * (_tmp33 * _tmp39 * _tmp41 - _tmp35 * _tmp37 * _tmp41);
  const Scalar _tmp45 = Scalar(0.20999999999999999) * _tmp23 - Scalar(0.20999999999999999) * _tmp24;
  const Scalar _tmp46 = -Scalar(0.010999999999999999) * _tmp2 -
                        Scalar(0.010999999999999999) * _tmp20 + Scalar(-0.010999999999999999);
  const Scalar _tmp47 = Scalar(0.20999999999999999) * _tmp13 + Scalar(0.20999999999999999) * _tmp14;
  const Scalar _tmp48 = _tmp46 + _tmp47;
  const Scalar _tmp49 = _tmp45 + _tmp48;
  const Scalar _tmp50 = _tmp26 + _tmp27;
  const Scalar _tmp51 = _tmp21 + _tmp50;
  const Scalar _tmp52 = _tmp51 + position_vector(0, 0);
  const Scalar _tmp53 = _tmp52 - p_c(0, 0);
  const Scalar _tmp54 = _tmp36 + _tmp5;
  const Scalar _tmp55 = _tmp54 + position_vector(1, 0);
  const Scalar _tmp56 = _tmp55 - p_c(1, 0);
  const Scalar _tmp57 = std::pow(Scalar(std::pow(_tmp53, Scalar(2)) + std::pow(_tmp56, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp58 = _tmp53 * _tmp57;
  const Scalar _tmp59 = _tmp46 - _tmp47;
  const Scalar _tmp60 = _tmp45 + _tmp59;
  const Scalar _tmp61 = _tmp58 * _tmp60;
  const Scalar _tmp62 = -_tmp49 * _tmp58 + _tmp61;
  const Scalar _tmp63 = _tmp39 * _tmp42;
  const Scalar _tmp64 = _tmp56 * _tmp57;
  const Scalar _tmp65 = Scalar(1.0) / (_tmp58 * _tmp63 - _tmp64);
  const Scalar _tmp66 = _tmp63 * _tmp65;
  const Scalar _tmp67 = _tmp60 * _tmp63;
  const Scalar _tmp68 = _tmp49 * _tmp64 - _tmp61 * _tmp63;
  const Scalar _tmp69 = _tmp66 * _tmp68 + _tmp67;
  const Scalar _tmp70 = Scalar(1.0) * _tmp37;
  const Scalar _tmp71 = -_tmp70;
  const Scalar _tmp72 = Scalar(1.0) / (_tmp54 + _tmp71);
  const Scalar _tmp73 = Scalar(1.0) * _tmp33;
  const Scalar _tmp74 = _tmp72 * (-_tmp51 + _tmp73);
  const Scalar _tmp75 = -_tmp60 + _tmp62 * _tmp66 - _tmp69 * _tmp74;
  const Scalar _tmp76 = -_tmp45;
  const Scalar _tmp77 = _tmp48 + _tmp76;
  const Scalar _tmp78 = _tmp22 + _tmp50;
  const Scalar _tmp79 = _tmp78 + position_vector(0, 0);
  const Scalar _tmp80 = _tmp79 - p_d(0, 0);
  const Scalar _tmp81 = _tmp17 + _tmp5;
  const Scalar _tmp82 = _tmp81 + position_vector(1, 0);
  const Scalar _tmp83 = _tmp82 - p_d(1, 0);
  const Scalar _tmp84 = std::pow(Scalar(std::pow(_tmp80, Scalar(2)) + std::pow(_tmp83, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp85 = _tmp80 * _tmp84;
  const Scalar _tmp86 = _tmp83 * _tmp84;
  const Scalar _tmp87 = _tmp63 * _tmp85 - _tmp86;
  const Scalar _tmp88 = _tmp65 * _tmp87;
  const Scalar _tmp89 = -_tmp67 * _tmp85 - _tmp68 * _tmp88 + _tmp77 * _tmp86;
  const Scalar _tmp90 = _tmp60 * _tmp85 - _tmp62 * _tmp88 - _tmp74 * _tmp89 - _tmp77 * _tmp85;
  const Scalar _tmp91 = Scalar(1.0) / (_tmp90);
  const Scalar _tmp92 = _tmp44 * _tmp58 - _tmp51 * _tmp64 + _tmp54 * _tmp58;
  const Scalar _tmp93 = _tmp44 * _tmp85 - _tmp78 * _tmp86 + _tmp81 * _tmp85 - _tmp88 * _tmp92;
  const Scalar _tmp94 = _tmp91 * _tmp93;
  const Scalar _tmp95 = Scalar(1.0) / (_tmp93);
  const Scalar _tmp96 = _tmp90 * _tmp95;
  const Scalar _tmp97 = _tmp96 * (-_tmp44 + _tmp66 * _tmp92 - _tmp75 * _tmp94);
  const Scalar _tmp98 = _tmp75 + _tmp97;
  const Scalar _tmp99 = _tmp87 * _tmp91;
  const Scalar _tmp100 = -_tmp63 - _tmp98 * _tmp99;
  const Scalar _tmp101 = _tmp58 * _tmp65;
  const Scalar _tmp102 = _tmp85 * _tmp91;
  const Scalar _tmp103 = _tmp30 - p_a(0, 0);
  const Scalar _tmp104 = _tmp19 - p_a(1, 0);
  const Scalar _tmp105 =
      std::pow(Scalar(std::pow(_tmp103, Scalar(2)) + std::pow(_tmp104, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp106 = _tmp103 * _tmp105;
  const Scalar _tmp107 = _tmp106 * fh1;
  const Scalar _tmp108 = Scalar(1.0) * _tmp65;
  const Scalar _tmp109 = _tmp108 * _tmp68;
  const Scalar _tmp110 = -_tmp108 * _tmp62 + _tmp109 * _tmp74;
  const Scalar _tmp111 = _tmp96 * (-_tmp108 * _tmp92 - _tmp110 * _tmp94);
  const Scalar _tmp112 = _tmp110 + _tmp111;
  const Scalar _tmp113 = -_tmp112 * _tmp99 + Scalar(1.0);
  const Scalar _tmp114 = _tmp104 * _tmp105;
  const Scalar _tmp115 = _tmp114 * fh1;
  const Scalar _tmp116 = Scalar(1.0) * _tmp95;
  const Scalar _tmp117 = _tmp58 * _tmp88;
  const Scalar _tmp118 = fh1 * (-_tmp106 * _tmp18 + _tmp114 * _tmp29);
  const Scalar _tmp119 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp120 = _tmp70 * _tmp74 + _tmp73;
  const Scalar _tmp121 = 0;
  const Scalar _tmp122 = -_tmp107 * _tmp43 * (_tmp100 * _tmp101 + _tmp102 * _tmp98 + Scalar(1.0)) -
                         _tmp115 * _tmp43 * (_tmp101 * _tmp113 + _tmp102 * _tmp112) -
                         _tmp118 * _tmp43 * (-_tmp116 * _tmp117 + _tmp116 * _tmp85) -
                         _tmp119 * _tmp43 * (-_tmp117 * _tmp121 + _tmp121 * _tmp85);
  const Scalar _tmp123 = Scalar(1.0) / (_tmp122);
  const Scalar _tmp124 = fh1 * (_tmp59 + _tmp76);
  const Scalar _tmp125 = _tmp106 * _tmp124 + Scalar(3.29616) * _tmp25 + _tmp29 * fv1;
  const Scalar _tmp126 = _tmp71 + _tmp81;
  const Scalar _tmp127 = _tmp126 * _tmp74;
  const Scalar _tmp128 = Scalar(1.0) / (-_tmp127 + _tmp73 - _tmp78);
  const Scalar _tmp129 = Scalar(1.0) * _tmp128;
  const Scalar _tmp130 = _tmp126 * _tmp72;
  const Scalar _tmp131 = _tmp120 * _tmp128;
  const Scalar _tmp132 = -_tmp121 * _tmp89 - _tmp126 * _tmp131 + _tmp71;
  const Scalar _tmp133 = Scalar(1.0) * _tmp72;
  const Scalar _tmp134 = _tmp129 * _tmp96;
  const Scalar _tmp135 = -_tmp116 * _tmp89 + _tmp126 * _tmp134;
  const Scalar _tmp136 = -_tmp114 * _tmp124 - Scalar(3.29616) * _tmp15 - _tmp18 * fv1;
  const Scalar _tmp137 = _tmp127 * _tmp129 + Scalar(1.0);
  const Scalar _tmp138 = _tmp129 * _tmp74;
  const Scalar _tmp139 = _tmp126 * _tmp128;
  const Scalar _tmp140 = _tmp89 * _tmp91;
  const Scalar _tmp141 = -_tmp109 + _tmp111 * _tmp139 - _tmp112 * _tmp140;
  const Scalar _tmp142 = _tmp139 * _tmp97 - _tmp140 * _tmp98 + _tmp69;
  const Scalar _tmp143 = std::asinh(
      _tmp123 * (Scalar(1.0) * _tmp107 * (_tmp129 * _tmp97 - _tmp133 * _tmp142) +
                 Scalar(1.0) * _tmp115 * (_tmp111 * _tmp129 - _tmp133 * _tmp141) +
                 Scalar(1.0) * _tmp118 * (-_tmp133 * _tmp135 + _tmp134) +
                 Scalar(1.0) * _tmp119 * (-_tmp120 * _tmp129 - _tmp132 * _tmp133 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp125 * (_tmp129 * _tmp130 - _tmp129) +
                 Scalar(1.0) * _tmp136 * (-_tmp133 * _tmp137 + _tmp138)));
  const Scalar _tmp144 = Scalar(9.6622558468725703) * _tmp122;
  const Scalar _tmp145 = _tmp116 * _tmp118;
  const Scalar _tmp146 = _tmp119 * _tmp121;
  const Scalar _tmp147 =
      _tmp100 * _tmp107 * _tmp65 + _tmp113 * _tmp115 * _tmp65 - _tmp145 * _tmp88 - _tmp146 * _tmp88;
  const Scalar _tmp148 = Scalar(1.0) / (_tmp147);
  const Scalar _tmp149 = _tmp125 * _tmp129;
  const Scalar _tmp150 =
      std::asinh(_tmp148 * (_tmp107 * _tmp142 * _tmp72 + _tmp115 * _tmp141 * _tmp72 +
                            _tmp118 * _tmp135 * _tmp72 + _tmp119 * _tmp132 * _tmp72 -
                            _tmp130 * _tmp149 + _tmp136 * _tmp137 * _tmp72));
  const Scalar _tmp151 = Scalar(9.6622558468725703) * _tmp147;
  const Scalar _tmp152 = _tmp107 * _tmp91 * _tmp98 + _tmp112 * _tmp115 * _tmp91 + _tmp145 + _tmp146;
  const Scalar _tmp153 = Scalar(1.0) / (_tmp152);
  const Scalar _tmp154 =
      std::asinh(_tmp153 * (-_tmp107 * _tmp128 * _tmp97 - _tmp111 * _tmp115 * _tmp128 -
                            _tmp118 * _tmp134 + _tmp119 * _tmp131 - _tmp136 * _tmp138 + _tmp149));
  const Scalar _tmp155 = Scalar(9.6622558468725703) * _tmp152;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      _tmp32 * (-std::sinh(Scalar(1.0) * _tmp31) -
                std::sinh(Scalar(0.1034955) * _tmp0 *
                          (-_tmp31 * _tmp32 -
                           std::sqrt(Scalar(std::pow(Scalar(-_tmp19 + p_a(1, 0)), Scalar(2)) +
                                            std::pow(Scalar(-_tmp30 + p_a(0, 0)), Scalar(2))))))) -
      encoder_data(0, 0) + ofset0;
  _res(1, 0) =
      _tmp144 * (-std::sinh(Scalar(1.0) * _tmp143) -
                 std::sinh(Scalar(0.1034955) * _tmp123 *
                           (-_tmp143 * _tmp144 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp34 + p_b(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp38 + p_b(1, 0)), Scalar(2))))))) -
      encoder_data(1, 0) + ofset1;
  _res(2, 0) =
      _tmp151 * (-std::sinh(Scalar(1.0) * _tmp150) -
                 std::sinh(Scalar(0.1034955) * _tmp148 *
                           (-_tmp150 * _tmp151 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp52 + p_c(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp55 + p_c(1, 0)), Scalar(2))))))) -
      encoder_data(2, 0) + ofset2;
  _res(3, 0) =
      _tmp155 * (-std::sinh(Scalar(1.0) * _tmp154) -
                 std::sinh(Scalar(0.1034955) * _tmp153 *
                           (-_tmp154 * _tmp155 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp79 + p_d(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp82 + p_d(1, 0)), Scalar(2))))))) -
      encoder_data(3, 0) + ofset3;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
