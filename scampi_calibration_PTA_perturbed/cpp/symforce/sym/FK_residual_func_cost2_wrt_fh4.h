// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost2_wrt_fh4
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     fh2: Scalar
 *     fv2: Scalar
 *     fh3: Scalar
 *     fv3: Scalar
 *     fh4: Scalar
 *     fv4: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> FkResidualFuncCost2WrtFh4(
    const Scalar fh1, const Scalar fv1, const Scalar fh2, const Scalar fv2, const Scalar fh3,
    const Scalar fv3, const Scalar fh4, const Scalar fv4, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 111

  // Unused inputs
  (void)fh1;
  (void)fv1;
  (void)fh2;
  (void)fv2;
  (void)fh3;
  (void)fv3;
  (void)p_a;
  (void)p_b;
  (void)p_c;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (18)
  const Scalar _tmp0 = Scalar(1.0) / (fh4);
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp3 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = -_DeltaRot[0] * rot_init_x - _DeltaRot[1] * rot_init_y -
                       _DeltaRot[2] * rot_init_z + _DeltaRot[3] * rot_init_w;
  const Scalar _tmp7 = 2 * _tmp1;
  const Scalar _tmp8 = _tmp4 * _tmp7;
  const Scalar _tmp9 = 2 * _tmp2 * _tmp6;
  const Scalar _tmp10 = _tmp0 * fv4;
  const Scalar _tmp11 = std::asinh(_tmp10);
  const Scalar _tmp12 = Scalar(9.6622558468725703) * _tmp11;
  const Scalar _tmp13 =
      -Scalar(0.1034955) * _tmp12 * fh4 -
      Scalar(0.1034955) *
          std::sqrt(Scalar(
              std::pow(
                  Scalar(-Scalar(0.41999999999999998) * std::pow(_tmp1, Scalar(2)) +
                         Scalar(0.010999999999999999) * _tmp2 * _tmp5 +
                         Scalar(0.20999999999999999) * _tmp3 +
                         Scalar(0.010999999999999999) * _tmp6 * _tmp7 -
                         Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9 +
                         p_d(0, 0) - position_vector(0, 0)),
                  Scalar(2)) +
              std::pow(
                  Scalar(Scalar(0.010999999999999999) * _tmp2 * _tmp7 -
                         Scalar(0.20999999999999999) * _tmp3 +
                         Scalar(0.41999999999999998) * std::pow(_tmp4, Scalar(2)) -
                         Scalar(0.010999999999999999) * _tmp5 * _tmp6 +
                         Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9 +
                         p_d(1, 0) - position_vector(1, 0)),
                  Scalar(2))));
  const Scalar _tmp14 = _tmp0 * _tmp13;
  const Scalar _tmp15 = std::pow(fh4, Scalar(-2));
  const Scalar _tmp16 =
      std::pow(Scalar(_tmp15 * std::pow(fv4, Scalar(2)) + 1), Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp17 = Scalar(1.0) * _tmp11;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res.setZero();

  _res(3, 0) =
      -Scalar(9.6622558468725703) * fh4 *
          (Scalar(1.0) * _tmp15 * _tmp16 * fv4 * std::cosh(_tmp17) -
           (Scalar(0.1034955) * _tmp0 * (Scalar(9.6622558468725703) * _tmp10 * _tmp16 - _tmp12) -
            _tmp13 * _tmp15) *
               std::cosh(_tmp14)) +
      Scalar(9.6622558468725703) * std::sinh(_tmp14) +
      Scalar(9.6622558468725703) * std::sinh(_tmp17);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
