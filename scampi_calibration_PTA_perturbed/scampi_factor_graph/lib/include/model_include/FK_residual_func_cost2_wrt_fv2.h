// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost2_wrt_fv2
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     fh2: Scalar
 *     fv2: Scalar
 *     fh3: Scalar
 *     fv3: Scalar
 *     fh4: Scalar
 *     fv4: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> FkResidualFuncCost2WrtFv2(
    const Scalar fh1, const Scalar fv1, const Scalar fh2, const Scalar fv2, const Scalar fh3,
    const Scalar fv3, const Scalar fh4, const Scalar fv4, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 99

  // Unused inputs
  (void)fh1;
  (void)fv1;
  (void)fh3;
  (void)fv3;
  (void)fh4;
  (void)fv4;
  (void)p_a;
  (void)p_c;
  (void)p_d;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (12)
  const Scalar _tmp0 = Scalar(1.0) / (fh2);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv2);
  const Scalar _tmp2 = Scalar(1.0) * _tmp0 /
                       std::sqrt(Scalar(1 + std::pow(fv2, Scalar(2)) / std::pow(fh2, Scalar(2))));
  const Scalar _tmp3 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp4 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp5 = 1 - 2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp6 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp7 = 2 * _tmp4;
  const Scalar _tmp8 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp9 = 2 * _tmp3 * _tmp6;
  const Scalar _tmp10 = _tmp4 * _tmp8;
  const Scalar _tmp11 = Scalar(9.6622558468725703) * fh2;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res.setZero();

  _res(1, 0) =
      -_tmp11 *
      (-_tmp2 * std::cosh(Scalar(1.0) * _tmp1) +
       _tmp2 *
           std::cosh(Scalar(0.1034955) * _tmp0 *
                     (-_tmp1 * _tmp11 -
                      std::sqrt(Scalar(
                          std::pow(Scalar(-Scalar(0.20999999999999999) * _tmp10 +
                                          Scalar(0.41999999999999998) * std::pow(_tmp3, Scalar(2)) +
                                          Scalar(0.010999999999999999) * _tmp3 * _tmp8 -
                                          Scalar(0.20999999999999999) * _tmp5 +
                                          Scalar(0.010999999999999999) * _tmp6 * _tmp7 +
                                          Scalar(0.20999999999999999) * _tmp9 + p_b(0, 0) -
                                          position_vector(0, 0)),
                                   Scalar(2)) +
                          std::pow(Scalar(-Scalar(0.20999999999999999) * _tmp10 +
                                          Scalar(0.010999999999999999) * _tmp3 * _tmp7 +
                                          Scalar(0.20999999999999999) * _tmp5 -
                                          Scalar(0.41999999999999998) * std::pow(_tmp6, Scalar(2)) -
                                          Scalar(0.010999999999999999) * _tmp6 * _tmp8 -
                                          Scalar(0.20999999999999999) * _tmp9 + p_b(1, 0) -
                                          position_vector(1, 0)),
                                   Scalar(2)))))));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
