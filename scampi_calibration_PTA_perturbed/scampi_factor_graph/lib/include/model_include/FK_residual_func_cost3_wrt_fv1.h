// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_fv1
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> FkResidualFuncCost3WrtFv1(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 287

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (102)
  const Scalar _tmp0 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp3 = 2 * _tmp1 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp5 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = 2 * _tmp4;
  const Scalar _tmp9 = _tmp1 * _tmp8;
  const Scalar _tmp10 = _tmp2 * _tmp5;
  const Scalar _tmp11 =
      Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp12 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp13 = 1 - 2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp7;
  const Scalar _tmp17 = _tmp16 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp19 = _tmp2 * _tmp8;
  const Scalar _tmp20 = _tmp1 * _tmp5;
  const Scalar _tmp21 =
      -Scalar(0.010999999999999999) * _tmp19 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp22 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp12 +
                        Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999);
  const Scalar _tmp24 = _tmp21 + _tmp23;
  const Scalar _tmp25 = _tmp18 + _tmp24;
  const Scalar _tmp26 = _tmp25 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp27 = std::pow(Scalar(std::pow(_tmp17, Scalar(2)) + std::pow(_tmp26, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp28 = _tmp26 * _tmp27;
  const Scalar _tmp29 = _tmp11 - _tmp14;
  const Scalar _tmp30 = _tmp29 + _tmp7;
  const Scalar _tmp31 = _tmp30 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp32 = -_tmp18;
  const Scalar _tmp33 = _tmp24 + _tmp32;
  const Scalar _tmp34 = _tmp33 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp35 = Scalar(1.0) / (_tmp34);
  const Scalar _tmp36 = _tmp31 * _tmp35;
  const Scalar _tmp37 = -_tmp7;
  const Scalar _tmp38 = _tmp15 + _tmp37;
  const Scalar _tmp39 = _tmp38 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp40 = _tmp21 - _tmp23;
  const Scalar _tmp41 = _tmp18 + _tmp40;
  const Scalar _tmp42 = _tmp41 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp43 = std::pow(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp42, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp44 = _tmp42 * _tmp43;
  const Scalar _tmp45 = _tmp39 * _tmp43;
  const Scalar _tmp46 = _tmp36 * _tmp44 - _tmp45;
  const Scalar _tmp47 = _tmp17 * _tmp27;
  const Scalar _tmp48 = Scalar(1.0) / (_tmp28 * _tmp36 - _tmp47);
  const Scalar _tmp49 = _tmp46 * _tmp48;
  const Scalar _tmp50 =
      -Scalar(0.010999999999999999) * _tmp13 - Scalar(0.010999999999999999) * _tmp22;
  const Scalar _tmp51 = Scalar(0.20999999999999999) * _tmp19 - Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp52 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp53 = _tmp50 + _tmp51 - _tmp52;
  const Scalar _tmp54 = _tmp36 * _tmp53;
  const Scalar _tmp55 = _tmp50 + _tmp52;
  const Scalar _tmp56 = -_tmp51 + _tmp55;
  const Scalar _tmp57 = _tmp51 + _tmp55;
  const Scalar _tmp58 = -_tmp28 * _tmp54 + _tmp47 * _tmp57;
  const Scalar _tmp59 = Scalar(1.0) * _tmp30;
  const Scalar _tmp60 = Scalar(1.0) * _tmp33;
  const Scalar _tmp61 = (-_tmp25 + _tmp60) / (_tmp16 - _tmp59);
  const Scalar _tmp62 = _tmp28 * _tmp53 - _tmp28 * _tmp57;
  const Scalar _tmp63 = _tmp44 * _tmp53 - _tmp44 * _tmp56 - _tmp49 * _tmp62 -
                        _tmp61 * (-_tmp44 * _tmp54 + _tmp45 * _tmp56 - _tmp49 * _tmp58);
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _tmp59 * _tmp61 + _tmp60;
  const Scalar _tmp66 = 0;
  const Scalar _tmp67 = _tmp49 * _tmp66;
  const Scalar _tmp68 =
      std::sqrt(Scalar(std::pow(_tmp31, Scalar(2)) + std::pow(_tmp34, Scalar(2))));
  const Scalar _tmp69 = _tmp35 * _tmp68;
  const Scalar _tmp70 = _tmp69 * (-_tmp28 * _tmp67 + _tmp44 * _tmp66);
  const Scalar _tmp71 = Scalar(1.0) / (_tmp68);
  const Scalar _tmp72 = _tmp69 * (-_tmp30 * _tmp34 * _tmp71 + _tmp31 * _tmp33 * _tmp71);
  const Scalar _tmp73 = _tmp16 * _tmp28 - _tmp25 * _tmp47 + _tmp28 * _tmp72;
  const Scalar _tmp74 = _tmp36 * _tmp48;
  const Scalar _tmp75 = -_tmp53 - _tmp61 * (_tmp54 + _tmp58 * _tmp74) + _tmp62 * _tmp74;
  const Scalar _tmp76 = _tmp38 * _tmp44 - _tmp41 * _tmp45 + _tmp44 * _tmp72 - _tmp49 * _tmp73;
  const Scalar _tmp77 = _tmp64 * _tmp76;
  const Scalar _tmp78 = Scalar(1.0) / (_tmp76);
  const Scalar _tmp79 = _tmp63 * _tmp78;
  const Scalar _tmp80 = _tmp75 + _tmp79 * (-_tmp72 + _tmp73 * _tmp74 - _tmp75 * _tmp77);
  const Scalar _tmp81 = _tmp44 * _tmp64;
  const Scalar _tmp82 = _tmp46 * _tmp64;
  const Scalar _tmp83 = -_tmp36 - _tmp80 * _tmp82;
  const Scalar _tmp84 = _tmp28 * _tmp48;
  const Scalar _tmp85 = _tmp32 + _tmp40;
  const Scalar _tmp86 = _tmp85 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp87 = _tmp29 + _tmp37;
  const Scalar _tmp88 = _tmp87 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp89 = std::pow(Scalar(std::pow(_tmp86, Scalar(2)) + std::pow(_tmp88, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp90 = _tmp86 * _tmp89;
  const Scalar _tmp91 = _tmp90 * fh1;
  const Scalar _tmp92 = Scalar(1.0) * _tmp48;
  const Scalar _tmp93 = _tmp58 * _tmp61 * _tmp92 - _tmp62 * _tmp92;
  const Scalar _tmp94 = _tmp79 * (-_tmp73 * _tmp92 - _tmp77 * _tmp93) + _tmp93;
  const Scalar _tmp95 = -_tmp82 * _tmp94 + Scalar(1.0);
  const Scalar _tmp96 = _tmp88 * _tmp89;
  const Scalar _tmp97 = _tmp96 * fh1;
  const Scalar _tmp98 = Scalar(1.0) * _tmp78;
  const Scalar _tmp99 = fh1 * (_tmp85 * _tmp96 - _tmp87 * _tmp90);
  const Scalar _tmp100 = _tmp0 * _tmp66;
  const Scalar _tmp101 = _tmp98 * _tmp99;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp70 * std::exp(_tmp0 * _tmp70 +
                         _tmp69 * _tmp91 * (_tmp80 * _tmp81 + _tmp83 * _tmp84 + Scalar(1.0)) +
                         _tmp69 * _tmp97 * (_tmp81 * _tmp94 + _tmp84 * _tmp95) +
                         _tmp69 * _tmp99 * (-_tmp28 * _tmp49 * _tmp98 + _tmp44 * _tmp98));
  _res(2, 0) = -_tmp67 * std::exp(_tmp100 * _tmp49 + _tmp101 * _tmp49 - _tmp48 * _tmp83 * _tmp91 -
                                  _tmp48 * _tmp95 * _tmp97);
  _res(3, 0) =
      _tmp66 * std::exp(-_tmp100 - _tmp101 - _tmp64 * _tmp80 * _tmp91 - _tmp64 * _tmp94 * _tmp97);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
