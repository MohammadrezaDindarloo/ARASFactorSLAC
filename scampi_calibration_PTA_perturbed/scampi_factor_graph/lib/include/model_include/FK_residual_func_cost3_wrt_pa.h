// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_pa
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost3WrtPa(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 353

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (137)
  const Scalar _tmp0 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp3 = 2 * _tmp1 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp5 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp9 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp10 = Scalar(0.20999999999999999) * _tmp8 + Scalar(0.20999999999999999) * _tmp9 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp11 = 2 * _tmp4;
  const Scalar _tmp12 = _tmp1 * _tmp11;
  const Scalar _tmp13 = _tmp2 * _tmp5;
  const Scalar _tmp14 =
      -Scalar(0.010999999999999999) * _tmp12 + Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp15 = -_tmp10 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp7;
  const Scalar _tmp17 = _tmp16 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp19 = -_tmp18;
  const Scalar _tmp20 = _tmp11 * _tmp2;
  const Scalar _tmp21 = _tmp1 * _tmp5;
  const Scalar _tmp22 =
      -Scalar(0.010999999999999999) * _tmp20 - Scalar(0.010999999999999999) * _tmp21;
  const Scalar _tmp23 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp24 = Scalar(0.20999999999999999) * _tmp23 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp25 = _tmp22 + _tmp24;
  const Scalar _tmp26 = _tmp19 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp28 = Scalar(1.0) / (_tmp27);
  const Scalar _tmp29 = _tmp17 * _tmp28;
  const Scalar _tmp30 =
      -Scalar(0.010999999999999999) * _tmp23 - Scalar(0.010999999999999999) * _tmp8;
  const Scalar _tmp31 = Scalar(0.20999999999999999) * _tmp20 - Scalar(0.20999999999999999) * _tmp21;
  const Scalar _tmp32 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp33 = _tmp30 + _tmp31 - _tmp32;
  const Scalar _tmp34 = -_tmp7;
  const Scalar _tmp35 = _tmp10 + _tmp14;
  const Scalar _tmp36 = _tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp36 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp38 = _tmp22 - _tmp24;
  const Scalar _tmp39 = _tmp18 + _tmp38;
  const Scalar _tmp40 = _tmp39 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp41 = std::pow(Scalar(std::pow(_tmp37, Scalar(2)) + std::pow(_tmp40, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp42 = _tmp40 * _tmp41;
  const Scalar _tmp43 = _tmp33 * _tmp42;
  const Scalar _tmp44 = _tmp30 + _tmp32;
  const Scalar _tmp45 = -_tmp31 + _tmp44;
  const Scalar _tmp46 = _tmp37 * _tmp41;
  const Scalar _tmp47 = _tmp35 + _tmp7;
  const Scalar _tmp48 = _tmp47 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp49 = _tmp18 + _tmp25;
  const Scalar _tmp50 = _tmp49 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp51 = std::pow(Scalar(std::pow(_tmp48, Scalar(2)) + std::pow(_tmp50, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp52 = _tmp50 * _tmp51;
  const Scalar _tmp53 = _tmp33 * _tmp52;
  const Scalar _tmp54 = _tmp31 + _tmp44;
  const Scalar _tmp55 = _tmp48 * _tmp51;
  const Scalar _tmp56 = -_tmp29 * _tmp53 + _tmp54 * _tmp55;
  const Scalar _tmp57 = _tmp29 * _tmp42 - _tmp46;
  const Scalar _tmp58 = Scalar(1.0) / (_tmp29 * _tmp52 - _tmp55);
  const Scalar _tmp59 = _tmp57 * _tmp58;
  const Scalar _tmp60 = Scalar(1.0) * _tmp16;
  const Scalar _tmp61 = Scalar(1.0) * _tmp26;
  const Scalar _tmp62 = (-_tmp49 + _tmp61) / (_tmp47 - _tmp60);
  const Scalar _tmp63 = -_tmp52 * _tmp54 + _tmp53;
  const Scalar _tmp64 = -_tmp42 * _tmp45 + _tmp43 - _tmp59 * _tmp63 -
                        _tmp62 * (-_tmp29 * _tmp43 + _tmp45 * _tmp46 - _tmp56 * _tmp59);
  const Scalar _tmp65 = Scalar(1.0) / (_tmp64);
  const Scalar _tmp66 = _tmp60 * _tmp62 + _tmp61;
  const Scalar _tmp67 = 0;
  const Scalar _tmp68 = _tmp52 * _tmp59;
  const Scalar _tmp69 =
      std::sqrt(Scalar(std::pow(_tmp17, Scalar(2)) + std::pow(_tmp27, Scalar(2))));
  const Scalar _tmp70 = _tmp28 * _tmp69;
  const Scalar _tmp71 = _tmp19 + _tmp38;
  const Scalar _tmp72 = _tmp71 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp73 = Scalar(1.0) / (_tmp69);
  const Scalar _tmp74 = _tmp70 * (-_tmp16 * _tmp27 * _tmp73 + _tmp17 * _tmp26 * _tmp73);
  const Scalar _tmp75 = _tmp47 * _tmp52 - _tmp49 * _tmp55 + _tmp52 * _tmp74;
  const Scalar _tmp76 = _tmp29 * _tmp58;
  const Scalar _tmp77 = -_tmp33 - _tmp62 * (_tmp29 * _tmp33 + _tmp56 * _tmp76) + _tmp63 * _tmp76;
  const Scalar _tmp78 = _tmp36 * _tmp42 - _tmp39 * _tmp46 + _tmp42 * _tmp74 - _tmp59 * _tmp75;
  const Scalar _tmp79 = _tmp65 * _tmp78;
  const Scalar _tmp80 = Scalar(1.0) / (_tmp78);
  const Scalar _tmp81 = _tmp64 * _tmp80;
  const Scalar _tmp82 = _tmp77 + _tmp81 * (-_tmp74 + _tmp75 * _tmp76 - _tmp77 * _tmp79);
  const Scalar _tmp83 = _tmp65 * _tmp82;
  const Scalar _tmp84 = _tmp57 * _tmp65;
  const Scalar _tmp85 = -_tmp29 - _tmp82 * _tmp84;
  const Scalar _tmp86 = _tmp52 * _tmp58;
  const Scalar _tmp87 = _tmp42 * _tmp83 + _tmp85 * _tmp86 + Scalar(1.0);
  const Scalar _tmp88 = _tmp15 + _tmp34;
  const Scalar _tmp89 = _tmp88 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp90 = std::pow(_tmp89, Scalar(2));
  const Scalar _tmp91 = std::pow(_tmp72, Scalar(2));
  const Scalar _tmp92 = _tmp90 + _tmp91;
  const Scalar _tmp93 = std::pow(_tmp92, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp94 = _tmp93 * fh1;
  const Scalar _tmp95 = _tmp70 * _tmp94;
  const Scalar _tmp96 = _tmp87 * _tmp95;
  const Scalar _tmp97 = Scalar(1.0) * _tmp58;
  const Scalar _tmp98 = _tmp56 * _tmp62 * _tmp97 - _tmp63 * _tmp97;
  const Scalar _tmp99 = _tmp81 * (-_tmp75 * _tmp97 - _tmp79 * _tmp98) + _tmp98;
  const Scalar _tmp100 = _tmp65 * _tmp99;
  const Scalar _tmp101 = -_tmp84 * _tmp99 + Scalar(1.0);
  const Scalar _tmp102 = _tmp100 * _tmp42 + _tmp101 * _tmp86;
  const Scalar _tmp103 = _tmp102 * _tmp95;
  const Scalar _tmp104 = _tmp71 * _tmp93;
  const Scalar _tmp105 = _tmp88 * _tmp93;
  const Scalar _tmp106 = _tmp104 * _tmp89 - _tmp105 * _tmp72;
  const Scalar _tmp107 = Scalar(1.0) * _tmp80;
  const Scalar _tmp108 = _tmp70 * (_tmp107 * _tmp42 - _tmp107 * _tmp68);
  const Scalar _tmp109 = _tmp108 * fh1;
  const Scalar _tmp110 = std::exp(_tmp0 * _tmp70 * (_tmp42 * _tmp67 - _tmp67 * _tmp68) +
                                  _tmp103 * _tmp89 + _tmp106 * _tmp109 + _tmp72 * _tmp96);
  const Scalar _tmp111 = std::pow(_tmp92, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp112 = _tmp111 * fh1;
  const Scalar _tmp113 = _tmp112 * _tmp91;
  const Scalar _tmp114 = _tmp70 * _tmp87;
  const Scalar _tmp115 = _tmp111 * _tmp71;
  const Scalar _tmp116 = _tmp72 * _tmp89;
  const Scalar _tmp117 = _tmp111 * _tmp88;
  const Scalar _tmp118 = fh1 * (_tmp105 + _tmp115 * _tmp116 - _tmp117 * _tmp91);
  const Scalar _tmp119 = _tmp112 * _tmp116;
  const Scalar _tmp120 = _tmp102 * _tmp70;
  const Scalar _tmp121 = _tmp0 * _tmp67;
  const Scalar _tmp122 = _tmp58 * _tmp94;
  const Scalar _tmp123 = _tmp122 * _tmp85;
  const Scalar _tmp124 = _tmp107 * fh1;
  const Scalar _tmp125 = _tmp106 * _tmp124;
  const Scalar _tmp126 = _tmp101 * _tmp122;
  const Scalar _tmp127 =
      std::exp(_tmp121 * _tmp59 - _tmp123 * _tmp72 + _tmp125 * _tmp59 - _tmp126 * _tmp89);
  const Scalar _tmp128 = _tmp58 * _tmp85;
  const Scalar _tmp129 = _tmp101 * _tmp58;
  const Scalar _tmp130 = _tmp107 * _tmp118;
  const Scalar _tmp131 = _tmp83 * _tmp94;
  const Scalar _tmp132 = _tmp100 * _tmp94;
  const Scalar _tmp133 = std::exp(-_tmp121 - _tmp125 - _tmp131 * _tmp72 - _tmp132 * _tmp89);
  const Scalar _tmp134 = -_tmp104 + _tmp115 * _tmp90 - _tmp116 * _tmp117;
  const Scalar _tmp135 = _tmp112 * _tmp90;
  const Scalar _tmp136 = _tmp124 * _tmp134;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) = -_tmp110 * (-_tmp108 * _tmp118 - _tmp113 * _tmp114 - _tmp119 * _tmp120 + _tmp96);
  _res(2, 0) = -_tmp127 * (_tmp113 * _tmp128 + _tmp119 * _tmp129 - _tmp123 - _tmp130 * _tmp59);
  _res(3, 0) = -_tmp133 * (_tmp100 * _tmp119 + _tmp113 * _tmp83 + _tmp130 - _tmp131);
  _res(0, 1) = 0;
  _res(1, 1) = -_tmp110 * (_tmp103 - _tmp109 * _tmp134 - _tmp114 * _tmp119 - _tmp120 * _tmp135);
  _res(2, 1) = -_tmp127 * (_tmp119 * _tmp128 - _tmp126 + _tmp129 * _tmp135 - _tmp136 * _tmp59);
  _res(3, 1) = -_tmp133 * (_tmp100 * _tmp135 + _tmp119 * _tmp83 - _tmp132 + _tmp136);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
