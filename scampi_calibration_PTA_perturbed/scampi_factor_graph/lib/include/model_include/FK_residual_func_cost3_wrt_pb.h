// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_pb
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix43
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 3> FkResidualFuncCost3WrtPb(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 713

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (237)
  const Scalar _tmp0 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = 2 * _tmp1;
  const Scalar _tmp3 = _tmp0 * _tmp2;
  const Scalar _tmp4 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp5 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp6 = _tmp4 * _tmp5;
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp3 - Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = 2 * _tmp0 * _tmp4;
  const Scalar _tmp10 = _tmp1 * _tmp5;
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp12 = -2 * std::pow(_tmp4, Scalar(2));
  const Scalar _tmp13 = 1 - 2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 + Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 + _tmp8;
  const Scalar _tmp17 = _tmp16 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp18 = Scalar(1.0) / (_tmp17);
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp3 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp20 = -2 * std::pow(_tmp0, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp12 +
                        Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999);
  const Scalar _tmp22 = _tmp2 * _tmp4;
  const Scalar _tmp23 = _tmp0 * _tmp5;
  const Scalar _tmp24 =
      -Scalar(0.010999999999999999) * _tmp22 + Scalar(0.010999999999999999) * _tmp23;
  const Scalar _tmp25 = -_tmp21 + _tmp24;
  const Scalar _tmp26 = _tmp19 + _tmp25;
  const Scalar _tmp27 = _tmp26 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp28 = std::pow(_tmp27, Scalar(2));
  const Scalar _tmp29 = std::pow(_tmp17, Scalar(2));
  const Scalar _tmp30 = _tmp28 + _tmp29;
  const Scalar _tmp31 = std::sqrt(_tmp30);
  const Scalar _tmp32 = _tmp18 * _tmp31;
  const Scalar _tmp33 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp34 = -_tmp19;
  const Scalar _tmp35 = _tmp21 + _tmp24;
  const Scalar _tmp36 = _tmp34 + _tmp35;
  const Scalar _tmp37 = _tmp36 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp38 = _tmp11 - _tmp14;
  const Scalar _tmp39 = _tmp38 + _tmp7;
  const Scalar _tmp40 = _tmp39 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp41 = std::pow(Scalar(std::pow(_tmp37, Scalar(2)) + std::pow(_tmp40, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp42 = _tmp40 * _tmp41;
  const Scalar _tmp43 =
      -Scalar(0.010999999999999999) * _tmp13 - Scalar(0.010999999999999999) * _tmp20;
  const Scalar _tmp44 = -Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp9;
  const Scalar _tmp45 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp23;
  const Scalar _tmp46 = _tmp43 + _tmp44 - _tmp45;
  const Scalar _tmp47 = _tmp18 * _tmp46;
  const Scalar _tmp48 = _tmp27 * _tmp47;
  const Scalar _tmp49 = _tmp43 + _tmp45;
  const Scalar _tmp50 = -_tmp44 + _tmp49;
  const Scalar _tmp51 = _tmp37 * _tmp41;
  const Scalar _tmp52 = _tmp18 * _tmp27;
  const Scalar _tmp53 = _tmp42 * _tmp52 - _tmp51;
  const Scalar _tmp54 = _tmp19 + _tmp35;
  const Scalar _tmp55 = _tmp54 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp56 = _tmp15 + _tmp7;
  const Scalar _tmp57 = _tmp56 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp58 = std::pow(_tmp57, Scalar(2));
  const Scalar _tmp59 = std::pow(_tmp55, Scalar(2)) + _tmp58;
  const Scalar _tmp60 = std::pow(_tmp59, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp61 = _tmp57 * _tmp60;
  const Scalar _tmp62 = _tmp55 * _tmp60;
  const Scalar _tmp63 = _tmp52 * _tmp61 - _tmp62;
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _tmp44 + _tmp49;
  const Scalar _tmp66 = -_tmp48 * _tmp61 + _tmp62 * _tmp65;
  const Scalar _tmp67 = _tmp64 * _tmp66;
  const Scalar _tmp68 = Scalar(1.0) * _tmp26;
  const Scalar _tmp69 = Scalar(1.0) * _tmp16;
  const Scalar _tmp70 = (-_tmp56 + _tmp69) / (_tmp54 - _tmp68);
  const Scalar _tmp71 = _tmp42 * _tmp46;
  const Scalar _tmp72 = _tmp46 * _tmp61;
  const Scalar _tmp73 = -_tmp61 * _tmp65 + _tmp72;
  const Scalar _tmp74 = _tmp53 * _tmp64;
  const Scalar _tmp75 = -_tmp42 * _tmp50 -
                        _tmp70 * (-_tmp42 * _tmp48 + _tmp50 * _tmp51 - _tmp53 * _tmp67) + _tmp71 -
                        _tmp73 * _tmp74;
  const Scalar _tmp76 = Scalar(1.0) / (_tmp75);
  const Scalar _tmp77 = _tmp68 * _tmp70 + _tmp69;
  const Scalar _tmp78 = 0;
  const Scalar _tmp79 = _tmp76 * _tmp78;
  const Scalar _tmp80 = _tmp61 * _tmp74;
  const Scalar _tmp81 = _tmp42 * _tmp79;
  const Scalar _tmp82 = _tmp33 * (-_tmp79 * _tmp80 + _tmp81);
  const Scalar _tmp83 = Scalar(1.0) / (_tmp31);
  const Scalar _tmp84 = _tmp26 * _tmp83;
  const Scalar _tmp85 = _tmp16 * _tmp83;
  const Scalar _tmp86 = -_tmp17 * _tmp84 + _tmp27 * _tmp85;
  const Scalar _tmp87 = _tmp32 * _tmp86;
  const Scalar _tmp88 = _tmp54 * _tmp61 - _tmp56 * _tmp62 + _tmp61 * _tmp87;
  const Scalar _tmp89 = _tmp52 * _tmp64;
  const Scalar _tmp90 = -_tmp46 - _tmp70 * (_tmp48 + _tmp52 * _tmp67) + _tmp73 * _tmp89;
  const Scalar _tmp91 = _tmp36 * _tmp42 - _tmp39 * _tmp51 + _tmp42 * _tmp87 - _tmp74 * _tmp88;
  const Scalar _tmp92 = _tmp76 * _tmp91;
  const Scalar _tmp93 = -_tmp87 + _tmp88 * _tmp89 - _tmp90 * _tmp92;
  const Scalar _tmp94 = Scalar(1.0) / (_tmp91);
  const Scalar _tmp95 = _tmp93 * _tmp94;
  const Scalar _tmp96 = _tmp75 * _tmp95 + _tmp90;
  const Scalar _tmp97 = _tmp42 * _tmp76;
  const Scalar _tmp98 = _tmp96 * _tmp97;
  const Scalar _tmp99 = _tmp53 * _tmp76;
  const Scalar _tmp100 = -_tmp52 - _tmp96 * _tmp99;
  const Scalar _tmp101 = _tmp61 * _tmp64;
  const Scalar _tmp102 = _tmp25 + _tmp34;
  const Scalar _tmp103 = _tmp102 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp104 = _tmp38 + _tmp8;
  const Scalar _tmp105 = _tmp104 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp106 =
      std::pow(Scalar(std::pow(_tmp103, Scalar(2)) + std::pow(_tmp105, Scalar(2))),
               Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp107 = _tmp105 * _tmp106;
  const Scalar _tmp108 = _tmp107 * fh1;
  const Scalar _tmp109 = _tmp108 * (_tmp100 * _tmp101 + _tmp98 + Scalar(1.0));
  const Scalar _tmp110 = Scalar(1.0) * _tmp70;
  const Scalar _tmp111 = Scalar(1.0) * _tmp64;
  const Scalar _tmp112 = _tmp110 * _tmp67 - _tmp111 * _tmp73;
  const Scalar _tmp113 = _tmp112 * _tmp76;
  const Scalar _tmp114 = -_tmp111 * _tmp88 - _tmp113 * _tmp91;
  const Scalar _tmp115 = _tmp75 * _tmp94;
  const Scalar _tmp116 = _tmp112 + _tmp114 * _tmp115;
  const Scalar _tmp117 = _tmp116 * _tmp97;
  const Scalar _tmp118 = -_tmp116 * _tmp99 + Scalar(1.0);
  const Scalar _tmp119 = _tmp103 * _tmp106;
  const Scalar _tmp120 = _tmp119 * fh1;
  const Scalar _tmp121 = _tmp120 * (_tmp101 * _tmp118 + _tmp117);
  const Scalar _tmp122 = Scalar(1.0) * _tmp94;
  const Scalar _tmp123 = fh1 * (-_tmp102 * _tmp107 + _tmp104 * _tmp119);
  const Scalar _tmp124 = _tmp123 * (_tmp122 * _tmp42 - _tmp122 * _tmp80);
  const Scalar _tmp125 =
      std::exp(_tmp109 * _tmp32 + _tmp121 * _tmp32 + _tmp124 * _tmp32 + _tmp32 * _tmp82);
  const Scalar _tmp126 = Scalar(1.0) / (_tmp29);
  const Scalar _tmp127 = _tmp126 * _tmp31;
  const Scalar _tmp128 = _tmp127 * _tmp86;
  const Scalar _tmp129 = _tmp126 * _tmp27;
  const Scalar _tmp130 = _tmp129 * _tmp64;
  const Scalar _tmp131 = _tmp130 * _tmp88;
  const Scalar _tmp132 = std::pow(_tmp30, Scalar(Scalar(-3) / Scalar(2)));
  const Scalar _tmp133 = _tmp132 * _tmp26;
  const Scalar _tmp134 = _tmp132 * _tmp16;
  const Scalar _tmp135 = _tmp17 * _tmp27;
  const Scalar _tmp136 = _tmp32 * (-_tmp133 * _tmp29 + _tmp134 * _tmp135 + _tmp84);
  const Scalar _tmp137 = _tmp83 * _tmp86;
  const Scalar _tmp138 = _tmp128 * _tmp61 + _tmp136 * _tmp61 - _tmp137 * _tmp61;
  const Scalar _tmp139 = std::pow(_tmp63, Scalar(-2));
  const Scalar _tmp140 = _tmp129 * _tmp139;
  const Scalar _tmp141 = _tmp61 * _tmp88;
  const Scalar _tmp142 = _tmp140 * _tmp141;
  const Scalar _tmp143 = _tmp128 * _tmp42 - _tmp131 * _tmp42 + _tmp136 * _tmp42 - _tmp137 * _tmp42 -
                         _tmp138 * _tmp74 + _tmp142 * _tmp53;
  const Scalar _tmp144 = std::pow(_tmp91, Scalar(-2));
  const Scalar _tmp145 = _tmp144 * _tmp75;
  const Scalar _tmp146 = _tmp114 * _tmp145;
  const Scalar _tmp147 = _tmp61 * _tmp73;
  const Scalar _tmp148 = _tmp140 * _tmp147;
  const Scalar _tmp149 = _tmp129 * _tmp72;
  const Scalar _tmp150 = _tmp111 * _tmp70;
  const Scalar _tmp151 = _tmp61 * _tmp66;
  const Scalar _tmp152 = _tmp140 * _tmp151;
  const Scalar _tmp153 = -_tmp110 * _tmp152 + Scalar(1.0) * _tmp148 - _tmp149 * _tmp150;
  const Scalar _tmp154 = _tmp129 * _tmp67;
  const Scalar _tmp155 = _tmp130 * _tmp73;
  const Scalar _tmp156 =
      _tmp148 * _tmp53 - _tmp155 * _tmp42 -
      _tmp70 * (-_tmp129 * _tmp71 + _tmp149 * _tmp74 + _tmp152 * _tmp53 - _tmp154 * _tmp42);
  const Scalar _tmp157 = std::pow(_tmp75, Scalar(-2));
  const Scalar _tmp158 = _tmp156 * _tmp157;
  const Scalar _tmp159 = _tmp112 * _tmp91;
  const Scalar _tmp160 = _tmp114 * _tmp94;
  const Scalar _tmp161 = _tmp115 * (-_tmp111 * _tmp138 - _tmp113 * _tmp143 + Scalar(1.0) * _tmp142 -
                                    _tmp153 * _tmp92 + _tmp158 * _tmp159) -
                         _tmp143 * _tmp146 + _tmp153 + _tmp156 * _tmp160;
  const Scalar _tmp162 = _tmp58 / _tmp59;
  const Scalar _tmp163 = _tmp140 * _tmp162;
  const Scalar _tmp164 = _tmp158 * _tmp42;
  const Scalar _tmp165 = _tmp158 * _tmp53;
  const Scalar _tmp166 = _tmp116 * _tmp165 - _tmp117 * _tmp129 - _tmp161 * _tmp99;
  const Scalar _tmp167 = _tmp120 * _tmp32;
  const Scalar _tmp168 = _tmp124 * _tmp83;
  const Scalar _tmp169 = _tmp78 * _tmp99;
  const Scalar _tmp170 = _tmp78 * _tmp80;
  const Scalar _tmp171 = _tmp32 * _tmp33;
  const Scalar _tmp172 = Scalar(1.0) * _tmp144;
  const Scalar _tmp173 = _tmp143 * _tmp172;
  const Scalar _tmp174 = _tmp122 * _tmp53;
  const Scalar _tmp175 = _tmp111 * _tmp42 * _tmp94;
  const Scalar _tmp176 = _tmp129 * _tmp175;
  const Scalar _tmp177 = _tmp123 * _tmp32;
  const Scalar _tmp178 = _tmp100 * _tmp162;
  const Scalar _tmp179 = _tmp76 * _tmp90;
  const Scalar _tmp180 = _tmp28 / [&]() {
    const Scalar base = _tmp17;
    return base * base * base;
  }();
  const Scalar _tmp181 = _tmp139 * _tmp180;
  const Scalar _tmp182 =
      -_tmp147 * _tmp181 + _tmp155 -
      _tmp70 * (_tmp129 * _tmp46 - _tmp151 * _tmp181 + _tmp154 - _tmp180 * _tmp64 * _tmp72);
  const Scalar _tmp183 = _tmp90 * _tmp91;
  const Scalar _tmp184 = _tmp145 * _tmp93;
  const Scalar _tmp185 =
      _tmp115 * (-_tmp128 + _tmp131 - _tmp136 + _tmp137 + _tmp138 * _tmp89 - _tmp141 * _tmp181 -
                 _tmp143 * _tmp179 + _tmp158 * _tmp183 - _tmp182 * _tmp92) -
      _tmp143 * _tmp184 + _tmp156 * _tmp95 + _tmp182;
  const Scalar _tmp186 = -_tmp129 * _tmp98 - _tmp129 + _tmp165 * _tmp96 - _tmp185 * _tmp99;
  const Scalar _tmp187 = _tmp108 * _tmp32;
  const Scalar _tmp188 = _tmp121 * _tmp83;
  const Scalar _tmp189 = _tmp109 * _tmp83;
  const Scalar _tmp190 = _tmp82 * _tmp83;
  const Scalar _tmp191 = _tmp33 * _tmp79;
  const Scalar _tmp192 = _tmp108 * _tmp64;
  const Scalar _tmp193 = _tmp122 * _tmp123;
  const Scalar _tmp194 = _tmp120 * _tmp64;
  const Scalar _tmp195 =
      std::exp(-_tmp100 * _tmp192 - _tmp118 * _tmp194 + _tmp191 * _tmp74 + _tmp193 * _tmp74);
  const Scalar _tmp196 = _tmp140 * _tmp61;
  const Scalar _tmp197 = _tmp33 * _tmp78;
  const Scalar _tmp198 = _tmp197 * _tmp99;
  const Scalar _tmp199 = _tmp123 * _tmp173;
  const Scalar _tmp200 = _tmp100 * _tmp108;
  const Scalar _tmp201 = _tmp120 * _tmp61;
  const Scalar _tmp202 = _tmp191 * _tmp42;
  const Scalar _tmp203 = _tmp158 * _tmp197;
  const Scalar _tmp204 = _tmp108 * _tmp76;
  const Scalar _tmp205 = _tmp120 * _tmp76;
  const Scalar _tmp206 = std::exp(-_tmp116 * _tmp205 - _tmp191 - _tmp193 - _tmp204 * _tmp96);
  const Scalar _tmp207 = _tmp116 * _tmp120;
  const Scalar _tmp208 = _tmp108 * _tmp96;
  const Scalar _tmp209 = _tmp139 * _tmp18;
  const Scalar _tmp210 = _tmp209 * _tmp61;
  const Scalar _tmp211 = _tmp210 * _tmp53;
  const Scalar _tmp212 = _tmp18 * _tmp67;
  const Scalar _tmp213 = _tmp18 * _tmp64;
  const Scalar _tmp214 = _tmp213 * _tmp73;
  const Scalar _tmp215 =
      -_tmp211 * _tmp73 + _tmp214 * _tmp42 -
      _tmp70 * (-_tmp211 * _tmp66 + _tmp212 * _tmp42 + _tmp42 * _tmp47 - _tmp47 * _tmp80);
  const Scalar _tmp216 = _tmp157 * _tmp215;
  const Scalar _tmp217 = _tmp216 * _tmp42;
  const Scalar _tmp218 = _tmp213 * _tmp88;
  const Scalar _tmp219 = _tmp137 * _tmp52;
  const Scalar _tmp220 = _tmp32 * (-_tmp133 * _tmp135 + _tmp134 * _tmp28 - _tmp85);
  const Scalar _tmp221 = -_tmp219 * _tmp61 + _tmp220 * _tmp61;
  const Scalar _tmp222 =
      -_tmp211 * _tmp88 + _tmp218 * _tmp42 - _tmp219 * _tmp42 + _tmp220 * _tmp42 - _tmp221 * _tmp74;
  const Scalar _tmp223 =
      _tmp148 - _tmp214 - _tmp70 * (_tmp130 * _tmp72 + _tmp152 - _tmp212 - _tmp47);
  const Scalar _tmp224 = _tmp115 * (_tmp142 - _tmp179 * _tmp222 + _tmp183 * _tmp216 - _tmp218 +
                                    _tmp219 - _tmp220 + _tmp221 * _tmp89 - _tmp223 * _tmp92) -
                         _tmp184 * _tmp222 + _tmp215 * _tmp95 + _tmp223;
  const Scalar _tmp225 = _tmp216 * _tmp53;
  const Scalar _tmp226 = _tmp18 * _tmp98 + _tmp18 - _tmp224 * _tmp99 + _tmp225 * _tmp96;
  const Scalar _tmp227 = _tmp162 * _tmp209;
  const Scalar _tmp228 = Scalar(1.0) * _tmp210;
  const Scalar _tmp229 = _tmp110 * _tmp210 * _tmp66 + _tmp150 * _tmp47 * _tmp61 - _tmp228 * _tmp73;
  const Scalar _tmp230 = _tmp115 * (-_tmp111 * _tmp221 - _tmp113 * _tmp222 + _tmp159 * _tmp216 -
                                    _tmp228 * _tmp88 - _tmp229 * _tmp92) -
                         _tmp146 * _tmp222 + _tmp160 * _tmp215 + _tmp229;
  const Scalar _tmp231 = _tmp116 * _tmp225 + _tmp117 * _tmp18 - _tmp230 * _tmp99;
  const Scalar _tmp232 = _tmp118 * _tmp209;
  const Scalar _tmp233 = _tmp172 * _tmp222;
  const Scalar _tmp234 = _tmp175 * _tmp18;
  const Scalar _tmp235 = _tmp197 * _tmp216;
  const Scalar _tmp236 = _tmp123 * _tmp233;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 3> _res;

  _res(0, 0) = 0;
  _res(1, 0) =
      -_tmp125 *
      (-_tmp109 * _tmp127 - _tmp121 * _tmp127 - _tmp124 * _tmp127 - _tmp127 * _tmp82 -
       _tmp167 * (_tmp101 * _tmp166 - _tmp116 * _tmp164 - _tmp118 * _tmp163 + _tmp161 * _tmp97) +
       _tmp168 -
       _tmp171 * (-_tmp101 * _tmp129 * _tmp81 + _tmp158 * _tmp170 + _tmp163 * _tmp169 -
                  _tmp164 * _tmp78) -
       _tmp177 * (_tmp163 * _tmp174 - _tmp173 * _tmp42 + _tmp173 * _tmp80 - _tmp176 * _tmp61) -
       _tmp187 * (_tmp101 * _tmp186 - _tmp140 * _tmp178 - _tmp164 * _tmp96 + _tmp185 * _tmp97) +
       _tmp188 + _tmp189 + _tmp190);
  _res(2, 0) =
      -_tmp195 * (-_tmp118 * _tmp140 * _tmp201 - _tmp123 * _tmp176 - _tmp130 * _tmp202 +
                  _tmp166 * _tmp194 + _tmp186 * _tmp192 + _tmp193 * _tmp196 * _tmp53 +
                  _tmp196 * _tmp198 - _tmp196 * _tmp200 + _tmp199 * _tmp74 + _tmp203 * _tmp74);
  _res(3, 0) = -_tmp206 * (-_tmp158 * _tmp207 - _tmp158 * _tmp208 + _tmp161 * _tmp205 +
                           _tmp185 * _tmp204 - _tmp199 - _tmp203);
  _res(0, 1) = 0;
  _res(1, 1) =
      -_tmp125 *
      (-_tmp167 * (_tmp101 * _tmp231 - _tmp116 * _tmp217 + _tmp162 * _tmp232 + _tmp230 * _tmp97) +
       _tmp168 * _tmp52 -
       _tmp171 *
           (-_tmp169 * _tmp227 + _tmp170 * _tmp216 + _tmp213 * _tmp61 * _tmp81 - _tmp217 * _tmp78) -
       _tmp177 * (-_tmp174 * _tmp227 - _tmp233 * _tmp42 + _tmp233 * _tmp80 + _tmp234 * _tmp61) -
       _tmp187 * (_tmp101 * _tmp226 + _tmp178 * _tmp209 - _tmp217 * _tmp96 + _tmp224 * _tmp97) +
       _tmp188 * _tmp52 + _tmp189 * _tmp52 + _tmp190 * _tmp52);
  _res(2, 1) =
      -_tmp195 * (_tmp123 * _tmp234 + _tmp192 * _tmp226 - _tmp193 * _tmp211 + _tmp194 * _tmp231 -
                  _tmp198 * _tmp210 + _tmp200 * _tmp210 + _tmp201 * _tmp232 + _tmp202 * _tmp213 +
                  _tmp235 * _tmp74 + _tmp236 * _tmp74);
  _res(3, 1) = -_tmp206 * (_tmp204 * _tmp224 + _tmp205 * _tmp230 - _tmp207 * _tmp216 -
                           _tmp208 * _tmp216 - _tmp235 - _tmp236);
  _res(0, 2) = 0;
  _res(1, 2) = 0;
  _res(2, 2) = 0;
  _res(3, 2) = 0;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
