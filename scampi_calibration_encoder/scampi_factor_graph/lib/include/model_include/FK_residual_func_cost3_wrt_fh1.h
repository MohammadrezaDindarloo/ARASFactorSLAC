// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: FK_residual_func_cost3_wrt_fh1
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     DeltaRot: Rot3
 *     position_vector: Matrix31
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> FkResidualFuncCost3WrtFh1(
    const Scalar fh1, const Scalar fv1, const Eigen::Matrix<Scalar, 3, 1>& p_a,
    const Eigen::Matrix<Scalar, 3, 1>& p_b, const Eigen::Matrix<Scalar, 3, 1>& p_c,
    const Eigen::Matrix<Scalar, 3, 1>& p_d, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& position_vector, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 302

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (108)
  const Scalar _tmp0 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp1 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp2 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 * _tmp3;
  const Scalar _tmp5 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp6 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                       2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp7 = _tmp5 * _tmp6;
  const Scalar _tmp8 = Scalar(0.20999999999999999) * _tmp4 + Scalar(0.20999999999999999) * _tmp7;
  const Scalar _tmp9 = -2 * std::pow(_tmp1, Scalar(2));
  const Scalar _tmp10 = 1 - 2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp11 =
      -Scalar(0.010999999999999999) * _tmp10 - Scalar(0.010999999999999999) * _tmp9;
  const Scalar _tmp12 = _tmp3 * _tmp5;
  const Scalar _tmp13 = _tmp1 * _tmp6;
  const Scalar _tmp14 = Scalar(0.20999999999999999) * _tmp12 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp15 = _tmp11 + _tmp14;
  const Scalar _tmp16 = _tmp15 - _tmp8;
  const Scalar _tmp17 = 2 * _tmp1 * _tmp5;
  const Scalar _tmp18 = _tmp2 * _tmp6;
  const Scalar _tmp19 = Scalar(0.20999999999999999) * _tmp17 + Scalar(0.20999999999999999) * _tmp18;
  const Scalar _tmp20 = -2 * std::pow(_tmp2, Scalar(2));
  const Scalar _tmp21 = Scalar(0.20999999999999999) * _tmp10 + Scalar(0.20999999999999999) * _tmp20;
  const Scalar _tmp22 =
      -Scalar(0.010999999999999999) * _tmp4 + Scalar(0.010999999999999999) * _tmp7;
  const Scalar _tmp23 = -_tmp21 + _tmp22;
  const Scalar _tmp24 = _tmp19 + _tmp23;
  const Scalar _tmp25 = _tmp24 - p_b(1, 0) + position_vector(1, 0);
  const Scalar _tmp26 = Scalar(0.20999999999999999) * _tmp17 - Scalar(0.20999999999999999) * _tmp18;
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 =
      -Scalar(0.010999999999999999) * _tmp12 - Scalar(0.010999999999999999) * _tmp13;
  const Scalar _tmp29 = Scalar(0.20999999999999999) * _tmp20 + Scalar(0.20999999999999999) * _tmp9 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp30 = _tmp28 + _tmp29;
  const Scalar _tmp31 = _tmp27 + _tmp30;
  const Scalar _tmp32 = _tmp31 - p_b(0, 0) + position_vector(0, 0);
  const Scalar _tmp33 = Scalar(1.0) / (_tmp32);
  const Scalar _tmp34 = _tmp25 * _tmp33;
  const Scalar _tmp35 = _tmp16 * _tmp34;
  const Scalar _tmp36 = -_tmp19;
  const Scalar _tmp37 = _tmp21 + _tmp22;
  const Scalar _tmp38 = _tmp36 + _tmp37;
  const Scalar _tmp39 = _tmp38 - p_d(1, 0) + position_vector(1, 0);
  const Scalar _tmp40 = _tmp28 - _tmp29;
  const Scalar _tmp41 = _tmp26 + _tmp40;
  const Scalar _tmp42 = _tmp41 - p_d(0, 0) + position_vector(0, 0);
  const Scalar _tmp43 = std::pow(Scalar(std::pow(_tmp39, Scalar(2)) + std::pow(_tmp42, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp44 = _tmp42 * _tmp43;
  const Scalar _tmp45 = _tmp11 - _tmp14 + _tmp8;
  const Scalar _tmp46 = _tmp39 * _tmp43;
  const Scalar _tmp47 = _tmp19 + _tmp37;
  const Scalar _tmp48 = _tmp47 - p_c(1, 0) + position_vector(1, 0);
  const Scalar _tmp49 = _tmp26 + _tmp30;
  const Scalar _tmp50 = _tmp49 - p_c(0, 0) + position_vector(0, 0);
  const Scalar _tmp51 = std::pow(Scalar(std::pow(_tmp48, Scalar(2)) + std::pow(_tmp50, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp52 = _tmp50 * _tmp51;
  const Scalar _tmp53 = _tmp15 + _tmp8;
  const Scalar _tmp54 = _tmp48 * _tmp51;
  const Scalar _tmp55 = -_tmp35 * _tmp52 + _tmp53 * _tmp54;
  const Scalar _tmp56 = _tmp34 * _tmp44 - _tmp46;
  const Scalar _tmp57 = Scalar(1.0) / (_tmp34 * _tmp52 - _tmp54);
  const Scalar _tmp58 = _tmp56 * _tmp57;
  const Scalar _tmp59 = Scalar(1.0) * _tmp24;
  const Scalar _tmp60 = Scalar(1.0) * _tmp31;
  const Scalar _tmp61 = (-_tmp49 + _tmp60) / (_tmp47 - _tmp59);
  const Scalar _tmp62 = _tmp16 * _tmp52 - _tmp52 * _tmp53;
  const Scalar _tmp63 = _tmp16 * _tmp44 - _tmp44 * _tmp45 - _tmp58 * _tmp62 -
                        _tmp61 * (-_tmp35 * _tmp44 + _tmp45 * _tmp46 - _tmp55 * _tmp58);
  const Scalar _tmp64 = Scalar(1.0) / (_tmp63);
  const Scalar _tmp65 = _tmp59 * _tmp61 + _tmp60;
  const Scalar _tmp66 = 0;
  const Scalar _tmp67 = _tmp52 * _tmp58;
  const Scalar _tmp68 =
      std::sqrt(Scalar(std::pow(_tmp25, Scalar(2)) + std::pow(_tmp32, Scalar(2))));
  const Scalar _tmp69 = _tmp33 * _tmp68;
  const Scalar _tmp70 = Scalar(1.0) / (_tmp68);
  const Scalar _tmp71 = _tmp69 * (-_tmp24 * _tmp32 * _tmp70 + _tmp25 * _tmp31 * _tmp70);
  const Scalar _tmp72 = _tmp47 * _tmp52 - _tmp49 * _tmp54 + _tmp52 * _tmp71;
  const Scalar _tmp73 = _tmp34 * _tmp57;
  const Scalar _tmp74 = -_tmp16 - _tmp61 * (_tmp35 + _tmp55 * _tmp73) + _tmp62 * _tmp73;
  const Scalar _tmp75 = _tmp38 * _tmp44 - _tmp41 * _tmp46 + _tmp44 * _tmp71 - _tmp58 * _tmp72;
  const Scalar _tmp76 = _tmp64 * _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (_tmp75);
  const Scalar _tmp78 = _tmp63 * _tmp77;
  const Scalar _tmp79 = _tmp74 + _tmp78 * (-_tmp71 + _tmp72 * _tmp73 - _tmp74 * _tmp76);
  const Scalar _tmp80 = _tmp64 * _tmp79;
  const Scalar _tmp81 = _tmp56 * _tmp64;
  const Scalar _tmp82 = -_tmp34 - _tmp79 * _tmp81;
  const Scalar _tmp83 = _tmp52 * _tmp57;
  const Scalar _tmp84 = _tmp23 + _tmp36;
  const Scalar _tmp85 = _tmp84 - p_a(1, 0) + position_vector(1, 0);
  const Scalar _tmp86 = _tmp27 + _tmp40;
  const Scalar _tmp87 = _tmp86 - p_a(0, 0) + position_vector(0, 0);
  const Scalar _tmp88 = std::pow(Scalar(std::pow(_tmp85, Scalar(2)) + std::pow(_tmp87, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp89 = _tmp87 * _tmp88;
  const Scalar _tmp90 = _tmp69 * _tmp89 * (_tmp44 * _tmp80 + _tmp82 * _tmp83 + Scalar(1.0));
  const Scalar _tmp91 = Scalar(1.0) * _tmp57;
  const Scalar _tmp92 = _tmp55 * _tmp61 * _tmp91 - _tmp62 * _tmp91;
  const Scalar _tmp93 = _tmp78 * (-_tmp72 * _tmp91 - _tmp76 * _tmp92) + _tmp92;
  const Scalar _tmp94 = _tmp64 * _tmp93;
  const Scalar _tmp95 = -_tmp81 * _tmp93 + Scalar(1.0);
  const Scalar _tmp96 = _tmp85 * _tmp88;
  const Scalar _tmp97 = _tmp69 * _tmp96 * (_tmp44 * _tmp94 + _tmp83 * _tmp95);
  const Scalar _tmp98 = -_tmp84 * _tmp89 + _tmp86 * _tmp96;
  const Scalar _tmp99 = Scalar(1.0) * _tmp77;
  const Scalar _tmp100 = _tmp69 * _tmp98 * (_tmp44 * _tmp99 - _tmp67 * _tmp99);
  const Scalar _tmp101 = _tmp0 * _tmp66;
  const Scalar _tmp102 = _tmp57 * _tmp82 * _tmp89;
  const Scalar _tmp103 = _tmp98 * _tmp99;
  const Scalar _tmp104 = _tmp103 * fh1;
  const Scalar _tmp105 = _tmp57 * _tmp95 * _tmp96;
  const Scalar _tmp106 = _tmp80 * _tmp89;
  const Scalar _tmp107 = _tmp94 * _tmp96;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) = -std::exp(-fh1);
  _res(1, 0) = -(-_tmp100 - _tmp90 - _tmp97) *
               std::exp(_tmp0 * _tmp69 * (_tmp44 * _tmp66 - _tmp66 * _tmp67) + _tmp100 * fh1 +
                        _tmp90 * fh1 + _tmp97 * fh1);
  _res(2, 0) = -(_tmp102 - _tmp103 * _tmp58 + _tmp105) *
               std::exp(_tmp101 * _tmp58 - _tmp102 * fh1 + _tmp104 * _tmp58 - _tmp105 * fh1);
  _res(3, 0) =
      -(_tmp103 + _tmp106 + _tmp107) * std::exp(-_tmp101 - _tmp104 - _tmp106 * fh1 - _tmp107 * fh1);

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
