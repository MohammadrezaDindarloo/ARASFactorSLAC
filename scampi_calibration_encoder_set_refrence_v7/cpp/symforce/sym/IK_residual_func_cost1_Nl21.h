// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: IK_residual_func_cost1_Nl21
 *
 * Args:
 *     fh1: Scalar
 *     fv1: Scalar
 *     DeltaRot: Rot3
 *     p_a: Matrix31
 *     p_b: Matrix31
 *     p_c: Matrix31
 *     p_d: Matrix31
 *     p_init0: Scalar
 *     p_init1: Scalar
 *     p_init2: Scalar
 *     rot_init_x: Scalar
 *     rot_init_y: Scalar
 *     rot_init_z: Scalar
 *     rot_init_w: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix41
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 4, 1> IkResidualFuncCost1Nl21(
    const Scalar fh1, const Scalar fv1, const sym::Rot3<Scalar>& DeltaRot,
    const Eigen::Matrix<Scalar, 3, 1>& p_a, const Eigen::Matrix<Scalar, 3, 1>& p_b,
    const Eigen::Matrix<Scalar, 3, 1>& p_c, const Eigen::Matrix<Scalar, 3, 1>& p_d,
    const Scalar p_init0, const Scalar p_init1, const Scalar p_init2, const Scalar rot_init_x,
    const Scalar rot_init_y, const Scalar rot_init_z, const Scalar rot_init_w,
    const Scalar epsilon) {
  // Total ops: 485

  // Unused inputs
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _DeltaRot = DeltaRot.Data();

  // Intermediate terms (161)
  const Scalar _tmp0 = Scalar(1.0) / (fh1);
  const Scalar _tmp1 = std::asinh(_tmp0 * fv1);
  const Scalar _tmp2 = Scalar(0.1034955) * _tmp0;
  const Scalar _tmp3 = -_DeltaRot[0] * rot_init_y + _DeltaRot[1] * rot_init_x +
                       _DeltaRot[2] * rot_init_w + _DeltaRot[3] * rot_init_z;
  const Scalar _tmp4 = -2 * std::pow(_tmp3, Scalar(2));
  const Scalar _tmp5 = _DeltaRot[0] * rot_init_z + _DeltaRot[1] * rot_init_w -
                       _DeltaRot[2] * rot_init_x + _DeltaRot[3] * rot_init_y;
  const Scalar _tmp6 = 1 - 2 * std::pow(_tmp5, Scalar(2));
  const Scalar _tmp7 = Scalar(0.20999999999999999) * _tmp4 + Scalar(0.20999999999999999) * _tmp6;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = _DeltaRot[0] * rot_init_w - _DeltaRot[1] * rot_init_z +
                       _DeltaRot[2] * rot_init_y + _DeltaRot[3] * rot_init_x;
  const Scalar _tmp10 = 2 * _tmp3;
  const Scalar _tmp11 = _tmp10 * _tmp9;
  const Scalar _tmp12 = -2 * _DeltaRot[0] * rot_init_x - 2 * _DeltaRot[1] * rot_init_y -
                        2 * _DeltaRot[2] * rot_init_z + 2 * _DeltaRot[3] * rot_init_w;
  const Scalar _tmp13 = _tmp12 * _tmp5;
  const Scalar _tmp14 = _tmp11 + _tmp13;
  const Scalar _tmp15 = -Scalar(0.010999999999999999) * _tmp14;
  const Scalar _tmp16 = 2 * _tmp5 * _tmp9;
  const Scalar _tmp17 = _tmp12 * _tmp3;
  const Scalar _tmp18 = Scalar(0.20999999999999999) * _tmp16 - Scalar(0.20999999999999999) * _tmp17;
  const Scalar _tmp19 = _tmp15 + _tmp18;
  const Scalar _tmp20 = _tmp19 + _tmp8;
  const Scalar _tmp21 = _tmp20 + p_init0;
  const Scalar _tmp22 = -2 * std::pow(_tmp9, Scalar(2));
  const Scalar _tmp23 = Scalar(0.20999999999999999) * _tmp22 + Scalar(0.20999999999999999) * _tmp4 +
                        Scalar(0.20999999999999999);
  const Scalar _tmp24 = _tmp10 * _tmp5;
  const Scalar _tmp25 = _tmp12 * _tmp9;
  const Scalar _tmp26 = _tmp24 - _tmp25;
  const Scalar _tmp27 = -Scalar(0.010999999999999999) * _tmp26;
  const Scalar _tmp28 = Scalar(0.20999999999999999) * _tmp16 + Scalar(0.20999999999999999) * _tmp17;
  const Scalar _tmp29 = _tmp27 - _tmp28;
  const Scalar _tmp30 = _tmp23 + _tmp29;
  const Scalar _tmp31 = _tmp30 + p_init1;
  const Scalar _tmp32 = Scalar(9.6622558468725703) * fh1;
  const Scalar _tmp33 = Scalar(0.20999999999999999) * _tmp11 - Scalar(0.20999999999999999) * _tmp13;
  const Scalar _tmp34 = -_tmp33;
  const Scalar _tmp35 =
      -Scalar(0.010999999999999999) * _tmp22 - Scalar(0.010999999999999999) * _tmp6;
  const Scalar _tmp36 = Scalar(0.20999999999999999) * _tmp24 + Scalar(0.20999999999999999) * _tmp25;
  const Scalar _tmp37 = _tmp35 + _tmp36;
  const Scalar _tmp38 = _tmp34 + _tmp37;
  const Scalar _tmp39 = _tmp15 - _tmp18;
  const Scalar _tmp40 = _tmp39 + _tmp7;
  const Scalar _tmp41 = _tmp40 + p_init0;
  const Scalar _tmp42 = -_tmp23;
  const Scalar _tmp43 = _tmp27 + _tmp28;
  const Scalar _tmp44 = _tmp42 + _tmp43;
  const Scalar _tmp45 = _tmp44 + p_init1;
  const Scalar _tmp46 = _tmp39 + _tmp8;
  const Scalar _tmp47 = _tmp46 + p_init0;
  const Scalar _tmp48 = _tmp47 - p_a(0, 0);
  const Scalar _tmp49 = _tmp29 + _tmp42;
  const Scalar _tmp50 = _tmp49 + p_init1;
  const Scalar _tmp51 = _tmp50 - p_a(1, 0);
  const Scalar _tmp52 = std::pow(Scalar(std::pow(_tmp48, Scalar(2)) + std::pow(_tmp51, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp53 = _tmp48 * _tmp52;
  const Scalar _tmp54 = _tmp19 + _tmp7;
  const Scalar _tmp55 = _tmp54 + p_init0;
  const Scalar _tmp56 = _tmp55 - p_c(0, 0);
  const Scalar _tmp57 = _tmp23 + _tmp43;
  const Scalar _tmp58 = _tmp57 + p_init1;
  const Scalar _tmp59 = _tmp58 - p_c(1, 0);
  const Scalar _tmp60 = std::pow(Scalar(std::pow(_tmp56, Scalar(2)) + std::pow(_tmp59, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp61 = _tmp59 * _tmp60;
  const Scalar _tmp62 = _tmp56 * _tmp60;
  const Scalar _tmp63 = _tmp45 - p_b(1, 0);
  const Scalar _tmp64 = _tmp41 - p_b(0, 0);
  const Scalar _tmp65 =
      std::sqrt(Scalar(std::pow(_tmp63, Scalar(2)) + std::pow(_tmp64, Scalar(2))));
  const Scalar _tmp66 = Scalar(1.0) / (_tmp65);
  const Scalar _tmp67 = Scalar(1.0) / (_tmp64);
  const Scalar _tmp68 = _tmp65 * _tmp67;
  const Scalar _tmp69 = _tmp68 * (_tmp40 * _tmp63 * _tmp66 - _tmp44 * _tmp64 * _tmp66);
  const Scalar _tmp70 = -_tmp54 * _tmp61 + _tmp57 * _tmp62 + _tmp62 * _tmp69;
  const Scalar _tmp71 = _tmp63 * _tmp67;
  const Scalar _tmp72 = Scalar(1.0) / (-_tmp61 + _tmp62 * _tmp71);
  const Scalar _tmp73 = _tmp51 * _tmp52;
  const Scalar _tmp74 = _tmp53 * _tmp71 - _tmp73;
  const Scalar _tmp75 = _tmp72 * _tmp74;
  const Scalar _tmp76 = -_tmp46 * _tmp73 + _tmp49 * _tmp53 + _tmp53 * _tmp69 - _tmp70 * _tmp75;
  const Scalar _tmp77 = Scalar(1.0) / (_tmp76);
  const Scalar _tmp78 = Scalar(1.0) * _tmp77;
  const Scalar _tmp79 = Scalar(1.0) * _tmp72;
  const Scalar _tmp80 = _tmp74 * _tmp77 * _tmp79;
  const Scalar _tmp81 = _tmp31 - p_d(1, 0);
  const Scalar _tmp82 = _tmp21 - p_d(0, 0);
  const Scalar _tmp83 = std::pow(Scalar(std::pow(_tmp81, Scalar(2)) + std::pow(_tmp82, Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp84 = _tmp82 * _tmp83;
  const Scalar _tmp85 = _tmp81 * _tmp83;
  const Scalar _tmp86 = fh1 * (_tmp20 * _tmp85 - _tmp30 * _tmp84);
  const Scalar _tmp87 = _tmp35 - _tmp36;
  const Scalar _tmp88 = _tmp33 + _tmp87;
  const Scalar _tmp89 = _tmp33 + _tmp37;
  const Scalar _tmp90 = _tmp62 * _tmp88 - _tmp62 * _tmp89;
  const Scalar _tmp91 = _tmp71 * _tmp88;
  const Scalar _tmp92 = _tmp61 * _tmp89 - _tmp62 * _tmp91;
  const Scalar _tmp93 = _tmp79 * _tmp92;
  const Scalar _tmp94 = Scalar(1.0) * _tmp44;
  const Scalar _tmp95 = -_tmp94;
  const Scalar _tmp96 = Scalar(1.0) / (_tmp57 + _tmp95);
  const Scalar _tmp97 = Scalar(1.0) * _tmp40;
  const Scalar _tmp98 = _tmp96 * (-_tmp54 + _tmp97);
  const Scalar _tmp99 = -_tmp79 * _tmp90 + _tmp93 * _tmp98;
  const Scalar _tmp100 = _tmp34 + _tmp87;
  const Scalar _tmp101 = _tmp53 * _tmp88;
  const Scalar _tmp102 = _tmp100 * _tmp73 - _tmp101 * _tmp71 - _tmp75 * _tmp92;
  const Scalar _tmp103 = -_tmp100 * _tmp53 + _tmp101 - _tmp102 * _tmp98 - _tmp75 * _tmp90;
  const Scalar _tmp104 = Scalar(1.0) / (_tmp103);
  const Scalar _tmp105 = _tmp104 * _tmp76;
  const Scalar _tmp106 = _tmp103 * _tmp77;
  const Scalar _tmp107 = _tmp106 * (-_tmp105 * _tmp99 - _tmp70 * _tmp79);
  const Scalar _tmp108 = _tmp107 + _tmp99;
  const Scalar _tmp109 = _tmp104 * _tmp53;
  const Scalar _tmp110 = _tmp104 * _tmp74;
  const Scalar _tmp111 = -_tmp108 * _tmp110 + Scalar(1.0);
  const Scalar _tmp112 = _tmp62 * _tmp72;
  const Scalar _tmp113 = _tmp85 * fh1;
  const Scalar _tmp114 = Scalar(43.164000000000001) - fv1;
  const Scalar _tmp115 = _tmp94 * _tmp98 + _tmp97;
  const Scalar _tmp116 = 0;
  const Scalar _tmp117 = _tmp110 * _tmp116;
  const Scalar _tmp118 = _tmp104 * _tmp116;
  const Scalar _tmp119 = _tmp71 * _tmp72;
  const Scalar _tmp120 = _tmp119 * _tmp92 + _tmp91;
  const Scalar _tmp121 = _tmp119 * _tmp90 - _tmp120 * _tmp98 - _tmp88;
  const Scalar _tmp122 = _tmp106 * (-_tmp105 * _tmp121 + _tmp119 * _tmp70 - _tmp69);
  const Scalar _tmp123 = _tmp121 + _tmp122;
  const Scalar _tmp124 = -_tmp110 * _tmp123 - _tmp71;
  const Scalar _tmp125 = _tmp84 * fh1;
  const Scalar _tmp126 = -_tmp113 * _tmp68 * (_tmp108 * _tmp109 + _tmp111 * _tmp112) -
                         _tmp114 * _tmp68 * (-_tmp112 * _tmp117 + _tmp118 * _tmp53) -
                         _tmp125 * _tmp68 * (_tmp109 * _tmp123 + _tmp112 * _tmp124 + Scalar(1.0)) -
                         _tmp68 * _tmp86 * (_tmp53 * _tmp78 - _tmp62 * _tmp80);
  const Scalar _tmp127 = Scalar(1.0) / (_tmp126);
  const Scalar _tmp128 = _tmp49 + _tmp95;
  const Scalar _tmp129 = _tmp128 * _tmp98;
  const Scalar _tmp130 = Scalar(1.0) / (-_tmp129 - _tmp46 + _tmp97);
  const Scalar _tmp131 = Scalar(1.0) * _tmp130;
  const Scalar _tmp132 = _tmp102 * _tmp104;
  const Scalar _tmp133 = _tmp128 * _tmp130;
  const Scalar _tmp134 = _tmp120 + _tmp122 * _tmp133 - _tmp123 * _tmp132;
  const Scalar _tmp135 = Scalar(1.0) * _tmp96;
  const Scalar _tmp136 = _tmp115 * _tmp130;
  const Scalar _tmp137 = -_tmp116 * _tmp132 - _tmp128 * _tmp136 + _tmp95;
  const Scalar _tmp138 = _tmp107 * _tmp133 - _tmp108 * _tmp132 - _tmp93;
  const Scalar _tmp139 = _tmp38 * fh1;
  const Scalar _tmp140 = _tmp139 * _tmp84 + Scalar(5.1796800000000003) * _tmp14 + _tmp20 * fv1;
  const Scalar _tmp141 = _tmp128 * _tmp96;
  const Scalar _tmp142 = _tmp131 * _tmp98;
  const Scalar _tmp143 = _tmp129 * _tmp131 + Scalar(1.0);
  const Scalar _tmp144 = -_tmp139 * _tmp85 - Scalar(5.1796800000000003) * _tmp26 - _tmp30 * fv1;
  const Scalar _tmp145 = _tmp106 * _tmp131;
  const Scalar _tmp146 = -_tmp102 * _tmp78 + _tmp128 * _tmp145;
  const Scalar _tmp147 = std::asinh(
      _tmp127 * (Scalar(1.0) * _tmp113 * (_tmp107 * _tmp131 - _tmp135 * _tmp138) +
                 Scalar(1.0) * _tmp114 * (-_tmp115 * _tmp131 - _tmp135 * _tmp137 + Scalar(1.0)) +
                 Scalar(1.0) * _tmp125 * (_tmp122 * _tmp131 - _tmp134 * _tmp135) +
                 Scalar(1.0) * _tmp140 * (_tmp131 * _tmp141 - _tmp131) +
                 Scalar(1.0) * _tmp144 * (-_tmp135 * _tmp143 + _tmp142) +
                 Scalar(1.0) * _tmp86 * (-_tmp135 * _tmp146 + _tmp145)));
  const Scalar _tmp148 = Scalar(9.6622558468725703) * _tmp126;
  const Scalar _tmp149 = Scalar(0.1034955) * _tmp127;
  const Scalar _tmp150 = _tmp111 * _tmp113 * _tmp72 - _tmp114 * _tmp117 * _tmp72 +
                         _tmp124 * _tmp125 * _tmp72 - _tmp80 * _tmp86;
  const Scalar _tmp151 = Scalar(1.0) / (_tmp150);
  const Scalar _tmp152 = _tmp131 * _tmp140;
  const Scalar _tmp153 =
      std::asinh(_tmp151 * (_tmp113 * _tmp138 * _tmp96 + _tmp114 * _tmp137 * _tmp96 +
                            _tmp125 * _tmp134 * _tmp96 - _tmp141 * _tmp152 +
                            _tmp143 * _tmp144 * _tmp96 + _tmp146 * _tmp86 * _tmp96));
  const Scalar _tmp154 = Scalar(9.6622558468725703) * _tmp150;
  const Scalar _tmp155 = Scalar(0.1034955) * _tmp151;
  const Scalar _tmp156 = _tmp104 * _tmp108 * _tmp113 + _tmp104 * _tmp123 * _tmp125 +
                         _tmp114 * _tmp118 + _tmp78 * _tmp86;
  const Scalar _tmp157 = Scalar(1.0) / (_tmp156);
  const Scalar _tmp158 = Scalar(0.1034955) * _tmp157;
  const Scalar _tmp159 = std::asinh(_tmp157 * (-_tmp107 * _tmp113 * _tmp130 + _tmp114 * _tmp136 -
                                               _tmp122 * _tmp125 * _tmp130 - _tmp142 * _tmp144 -
                                               _tmp145 * _tmp86 + _tmp152));
  const Scalar _tmp160 = Scalar(9.6622558468725703) * _tmp156;

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res(0, 0) =
      -_tmp32 * (_tmp2 * p_d(2, 0) + std::cosh(Scalar(1.0) * _tmp1) -
                 std::cosh(_tmp2 *
                           (-_tmp1 * _tmp32 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp21 + p_d(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp31 + p_d(1, 0)), Scalar(2))))))) +
      _tmp38 + p_init2;
  _res(1, 0) =
      -_tmp148 *
          (_tmp149 * p_b(2, 0) + std::cosh(Scalar(1.0) * _tmp147) -
           std::cosh(_tmp149 *
                     (-_tmp147 * _tmp148 -
                      std::sqrt(Scalar(std::pow(Scalar(-_tmp41 + p_b(0, 0)), Scalar(2)) +
                                       std::pow(Scalar(-_tmp45 + p_b(1, 0)), Scalar(2))))))) +
      _tmp88 + p_init2;
  _res(2, 0) =
      -_tmp154 *
          (_tmp155 * p_c(2, 0) + std::cosh(Scalar(1.0) * _tmp153) -
           std::cosh(_tmp155 *
                     (-_tmp153 * _tmp154 -
                      std::sqrt(Scalar(std::pow(Scalar(-_tmp55 + p_c(0, 0)), Scalar(2)) +
                                       std::pow(Scalar(-_tmp58 + p_c(1, 0)), Scalar(2))))))) +
      _tmp89 + p_init2;
  _res(3, 0) =
      _tmp100 -
      _tmp160 * (_tmp158 * p_a(2, 0) + std::cosh(Scalar(1.0) * _tmp159) -
                 std::cosh(_tmp158 *
                           (-_tmp159 * _tmp160 -
                            std::sqrt(Scalar(std::pow(Scalar(-_tmp47 + p_a(0, 0)), Scalar(2)) +
                                             std::pow(Scalar(-_tmp50 + p_a(1, 0)), Scalar(2))))))) +
      p_init2;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
